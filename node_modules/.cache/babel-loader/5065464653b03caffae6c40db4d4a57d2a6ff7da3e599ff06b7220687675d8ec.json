{"ast":null,"code":"var _jsxFileName = \"/home/lubesh/Desktop/DBMS/KGP_Bus/frontend/src/components/admin/RouteManagement.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-routing-machine';\nimport 'leaflet-routing-machine/dist/leaflet-routing-machine.css';\nimport '../../css/RouteManagement.css'; // Import your CSS file for styling\nimport api, { getApiUrl } from '../../utils/api2.js';\n\n// Fix for default marker icon in Leaflet with React\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',\n  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',\n  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png'\n});\nfunction configureRoutingMachine() {\n  if (typeof L !== 'undefined' && L.Routing) {\n    // Modify the global routing options\n    L.Routing.Itinerary.prototype.options.createGeocoderPane = false;\n    L.Routing.timeout = 30 * 1000; // 30 seconds timeout\n\n    // Override the error handling globally\n    if (L.Routing.ErrorControl && L.Routing.ErrorControl.prototype) {\n      L.Routing.ErrorControl.prototype._routingErrorHandler = function (e) {\n        console.warn(\"Handled routing error:\", e);\n        // No UI updates or errors thrown\n      };\n    }\n\n    // Fix issues with the layer removal\n    if (L.Routing.Line && L.Routing.Line.prototype) {\n      const originalClearLines = L.Routing.Line.prototype._clearLines;\n      L.Routing.Line.prototype._clearLines = function () {\n        try {\n          // Safety check before calling the original function\n          if (this._map && this._route && this._route._layers) {\n            originalClearLines.call(this);\n          }\n        } catch (e) {\n          console.warn(\"Protected from _clearLines error:\", e);\n          // Manual cleanup as fallback\n          if (this._map && this._route) {\n            try {\n              this._map.removeLayer(this._route);\n            } catch (e) {\n              console.warn(\"Also failed with manual cleanup:\", e);\n            }\n          }\n        }\n      };\n    }\n  }\n}\n\n// Component to recenter map when needed\nfunction MapUpdater({\n  center,\n  zoom\n}) {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (center) {\n      map.setView(center, zoom || map.getZoom());\n    }\n  }, [center, zoom, map]);\n  return null;\n}\n\n// Custom component to create routes that follow roads\n_s(MapUpdater, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapUpdater;\nfunction RoadBasedRoutes({\n  stops\n}) {\n  _s2();\n  // Removed setDirections parameter\n  const map = useMap();\n  const controlRef = useRef(null);\n\n  // A safer cleanup function we can call anytime\n  const cleanup = useCallback(() => {\n    if (controlRef.current) {\n      try {\n        // Always remove from map first\n        if (map) map.removeControl(controlRef.current);\n      } catch (e) {\n        console.warn(\"Error removing control:\", e);\n      }\n      controlRef.current = null;\n    }\n  }, [map]);\n\n  // Set up once - clean up on unmount\n  useEffect(() => {\n    return cleanup;\n  }, [cleanup]);\n\n  // Handle route creation/updates\n  useEffect(() => {\n    // Skip if no map or insufficient stops\n    if (!map || !stops || stops.length < 2) {\n      console.log(\"Not enough conditions for route drawing:\", {\n        hasMap: !!map,\n        stopsCount: (stops === null || stops === void 0 ? void 0 : stops.length) || 0\n      });\n      return;\n    }\n\n    // Clear any existing routes first\n    cleanup();\n\n    // Get waypoints from stops\n    const waypoints = [];\n    const orderedStops = [...stops].sort((a, b) => a.stop_order - b.stop_order);\n    console.log(\"Drawing routes for ordered stops:\", orderedStops);\n\n    // Find the actual stop data using the global stops data\n    for (const routeStop of orderedStops) {\n      var _window$stopsData;\n      const stopData = (_window$stopsData = window.stopsData) === null || _window$stopsData === void 0 ? void 0 : _window$stopsData.find(s => s.id === routeStop.bus_stop_id);\n      if (stopData) {\n        const lat = parseFloat(stopData.latitude);\n        const lng = parseFloat(stopData.longitude);\n        if (!isNaN(lat) && !isNaN(lng)) {\n          waypoints.push(L.latLng(lat, lng));\n        }\n      }\n    }\n\n    // // Add the first waypoint again for circular route\n    // if (waypoints.length >= 2) {\n    //     waypoints.push(waypoints[0]);\n    // }\n\n    console.log(\"Generated waypoints for circular route:\", waypoints.length);\n\n    // Only create route if we have at least 2 valid waypoints\n    if (waypoints.length < 2) {\n      // Now we need at least 3 (including repeat of first)\n      console.log(\"Not enough valid waypoints for circular route\");\n      return;\n    }\n\n    // Create the OSRM routing control\n    try {\n      const control = L.Routing.control({\n        waypoints,\n        routeWhileDragging: false,\n        showAlternatives: false,\n        fitSelectedRoutes: false,\n        show: false,\n        // Don't show the routing interface\n        lineOptions: {\n          styles: [{\n            color: '#3388ff',\n            opacity: 0.7,\n            weight: 5\n          }],\n          extendToWaypoints: true,\n          missingRouteTolerance: 10\n        },\n        createMarker: () => null,\n        // No markers from routing\n        addWaypoints: false,\n        serviceUrl: 'https://router.project-osrm.org/route/v1'\n      });\n\n      // Handle errors silently\n      control.on('routingerror', function (e) {\n        console.warn(\"Routing error:\", e);\n      });\n\n      // Store the reference\n      controlRef.current = control;\n\n      // Add the control to the map\n      setTimeout(() => {\n        if (map && controlRef.current) {\n          try {\n            controlRef.current.addTo(map);\n          } catch (e) {\n            console.warn(\"Error adding route control:\", e);\n          }\n        }\n      }, 200);\n    } catch (error) {\n      console.error(\"Error creating routing control:\", error);\n    }\n  }, [map, stops, cleanup]);\n  return null;\n}\n_s2(RoadBasedRoutes, \"F1aahUzq/yaim2/7IMfKxqW1b0I=\", false, function () {\n  return [useMap];\n});\n_c2 = RoadBasedRoutes;\nfunction RouteManagement({\n  user\n}) {\n  _s3();\n  var _getBusById, _getBusById2;\n  const [buses, setBuses] = useState([]);\n  const [stops, setStops] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [selectedBus, setSelectedBus] = useState(null);\n  const [mapCenter, setMapCenter] = useState([22.3190, 87.3091]); // IIT KGP coordinates\n  const [zoom, setZoom] = useState(15);\n  const mapRef = useRef(null);\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n  const [routes, setRoutes] = useState([]);\n  const [showMapDebug, setShowMapDebug] = useState(false); // State for debugging\n  const [mapLoading, setMapLoading] = useState(false); // New state for map loading\n  const [startTimes, setStartTimes] = useState([]); // New state for bus start times\n  const [editingStopId, setEditingStopId] = useState(null); // State to track which stop is being edited\n  const [editingTimeId, setEditingTimeId] = useState(null); // State to track which start time is being edited\n  const [newStartTime, setNewStartTime] = useState(''); // State for new start time input\n  const [isAddingStartTime, setIsAddingStartTime] = useState(false); // State to track if adding new start time\n\n  const [formData, setFormData] = useState({\n    bus_id: '',\n    stops: []\n  });\n\n  // State for editing individual stop time\n  const [stopTimeData, setStopTimeData] = useState({\n    time_from_start: ''\n  });\n  const [isAddingStop, setIsAddingStop] = useState(false);\n  const [currentStopOrder, setCurrentStopOrder] = useState(1);\n\n  // Add state for edit mode for stop name\n  const [editingStopName, setEditingStopName] = useState(false);\n  const [editFormData, setEditFormData] = useState({\n    stop_id: '',\n    stop_order: '',\n    time_from_start: ''\n  });\n  useEffect(() => {\n    // Initialize window-level stopsData and configuration flag\n    window.enableOSRM = true; // Always use OSRM\n    configureRoutingMachine();\n\n    // Add a global diagnostics object to help with debugging\n    window.routeDiagnostics = {\n      stops: [],\n      waypoints: [],\n      logState: () => {\n        var _window$stopsData2;\n        console.log(\"Current Map State:\", {\n          stops: ((_window$stopsData2 = window.stopsData) === null || _window$stopsData2 === void 0 ? void 0 : _window$stopsData2.length) || 0,\n          selectedBus,\n          routeStops: formData.stops.length,\n          mapInitialized: !!mapRef.current\n        });\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError('');\n\n        // Fetch buses\n        try {\n          const busesResponse = await axios.get(getApiUrl(api.endpoints.adminBuses), {\n            headers: {\n              Authorization: `Bearer ${user.token}`\n            },\n            timeout: 10000\n          });\n          setBuses(busesResponse.data);\n          console.log(\"Buses loaded for routes:\", busesResponse.data.length);\n        } catch (err) {\n          setError('Failed to fetch buses: ' + err.message);\n          console.error(\"Error fetching buses for routes:\", err);\n          setBuses([{\n            id: 'mock1',\n            name: 'Demo Bus 1'\n          }]); // Fallback data\n        }\n\n        // Fetch stops\n        try {\n          const stopsResponse = await axios.get(getApiUrl(api.endpoints.adminStops), {\n            headers: {\n              Authorization: `Bearer ${user.token}`\n            },\n            timeout: 10000\n          });\n          setStops(stopsResponse.data);\n          console.log(\"Stops loaded for routes:\", stopsResponse.data.length);\n        } catch (err) {\n          setError('Failed to fetch stops: ' + err.message);\n          console.error(\"Error fetching stops for routes:\", err);\n          setStops([{\n            id: 'mock1',\n            name: 'Demo Stop',\n            latitude: 22.3190,\n            longitude: 87.3091\n          }]); // Fallback data\n        }\n\n        // Fetch routes and update your state\n        try {\n          const routesResponse = await axios.get(getApiUrl(api.endpoints.adminRoutes), {\n            headers: {\n              Authorization: `Bearer ${user.token}`\n            },\n            timeout: 10000\n          });\n          // Using the fetched routes data\n          const fetchedRoutes = routesResponse.data;\n          setRoutes(fetchedRoutes);\n          console.log(\"Routes loaded:\", fetchedRoutes.length);\n        } catch (err) {\n          setError('Failed to fetch routes: ' + err.message);\n          console.error(\"Error fetching routes:\", err);\n          // Using default empty array for routes\n          setRoutes([]);\n        }\n      } catch (err) {\n        setError('Error fetching data: ' + err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [user.token, refreshTrigger]);\n  useEffect(() => {\n    if (stops && stops.length > 0) {\n      window.stopsData = stops;\n    }\n  }, [stops]);\n  const handleBusSelect = async busId => {\n    try {\n      setSelectedBus(busId);\n      setLoading(true);\n      setMapLoading(true); // Start map loading\n      setError('');\n      try {\n        // Fetch bus routes\n        const response = await axios.get(getApiUrl(api.endpoints.adminRouteById(busId)), {\n          headers: {\n            Authorization: `Bearer ${user.token}`\n          }\n        });\n        const busRoutes = response.data;\n        console.log('Routes loaded for bus', busId, busRoutes);\n        setFormData({\n          bus_id: busId,\n          stops: busRoutes\n        });\n\n        // Set current stop order for adding new stops\n        setCurrentStopOrder(busRoutes && busRoutes.length > 0 ? Math.max(...busRoutes.map(stop => stop.stop_order)) + 1 : 1);\n\n        // Find stop coordinates to center map\n        if (busRoutes && busRoutes.length > 0) {\n          fitRouteOnMap(busRoutes);\n        }\n\n        // Fetch start times for this bus\n        try {\n          const startTimesResponse = await axios.get(getApiUrl(api.endpoints.adminBusStartTimes(busId)), {\n            headers: {\n              Authorization: `Bearer ${user.token}`\n            }\n          });\n          if (startTimesResponse.data && startTimesResponse.data.data) {\n            setStartTimes(startTimesResponse.data.data);\n          } else if (Array.isArray(startTimesResponse.data)) {\n            setStartTimes(startTimesResponse.data);\n          } else {\n            setStartTimes([]);\n          }\n        } catch (err) {\n          console.error(\"Error fetching start times:\", err);\n          setStartTimes([]);\n        }\n\n        // Set a timer to ensure map loading state shows for at least a moment\n        setTimeout(() => {\n          setMapLoading(false);\n        }, 1000);\n      } catch (err) {\n        setError('Error fetching route data: ' + err.message);\n        console.error(\"Error fetching routes for bus:\", err);\n        setMapLoading(false); // End map loading on error\n      }\n    } catch (err) {\n      setError('Error preparing bus route view: ' + err.message);\n      setMapLoading(false); // End map loading on error\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAddStop = async stopId => {\n    try {\n      setError('');\n      setMapLoading(true); // Start map loading for route update\n      const stop = stops.find(s => s.id === stopId);\n      if (!stop) {\n        throw new Error(\"Stop not found\");\n      }\n\n      // Create new route stop entry\n      const newRoute = {\n        bus_id: selectedBus,\n        bus_stop_id: stopId,\n        stop_order: currentStopOrder,\n        time_from_start: 0 // Default to 0 minutes\n      };\n      const response = await axios.post(getApiUrl(api.endpoints.adminAddRoute), newRoute, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      if (response.data && response.data.id) {\n        // Use the complete object returned from API\n        const updatedStops = [...formData.stops, response.data];\n        setFormData(prev => ({\n          ...prev,\n          stops: updatedStops\n        }));\n        setRoutes(prev => [...prev, response.data]);\n        setCurrentStopOrder(currentStopOrder + 1);\n\n        // Update the map to show the new route\n        fitRouteOnMap(updatedStops);\n      }\n      setIsAddingStop(false);\n      setTimeout(() => {\n        setMapLoading(false);\n      }, 1000);\n    } catch (err) {\n      setError('Failed to add stop to route: ' + err.message);\n      console.error(\"Error adding stop to route:\", err);\n      setMapLoading(false);\n    }\n  };\n  const handleRemoveStop = async routeId => {\n    if (!window.confirm('Are you sure you want to remove this stop from the route?')) {\n      return;\n    }\n    try {\n      setMapLoading(true); // Start map loading for route update\n      await axios.delete(getApiUrl(api.endpoints.adminDeleteRoute(routeId)), {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Update local state\n      const updatedStops = formData.stops.filter(stop => stop.id !== routeId);\n      setFormData(prev => ({\n        ...prev,\n        stops: updatedStops\n      }));\n      setRoutes(prev => prev.filter(route => route.id !== routeId));\n\n      // Update the map\n      fitRouteOnMap(updatedStops);\n      setTimeout(() => {\n        setMapLoading(false);\n      }, 1000);\n    } catch (err) {\n      setError('Error removing stop: ' + err.message);\n      console.error(\"Error removing stop from route:\", err);\n      setMapLoading(false);\n    }\n  };\n\n  // Begin editing a stop's time\n  const handleEditStopTime = routeId => {\n    const stop = formData.stops.find(stop => stop.id === routeId);\n    if (stop) {\n      setEditingStopId(routeId);\n      setStopTimeData({\n        time_from_start: stop.time_from_start || 0\n      });\n    }\n  };\n\n  // Save edited stop time\n  const handleSaveStopTime = async () => {\n    if (!editingStopId) return;\n    try {\n      setMapLoading(true);\n      await axios.put(getApiUrl(api.endpoints.adminUpdateRoute(editingStopId)), {\n        time_from_start: parseFloat(stopTimeData.time_from_start)\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Update local state\n      const updatedStops = formData.stops.map(stop => {\n        if (stop.id === editingStopId) {\n          return {\n            ...stop,\n            time_from_start: parseFloat(stopTimeData.time_from_start)\n          };\n        }\n        return stop;\n      });\n      setFormData(prev => ({\n        ...prev,\n        stops: updatedStops\n      }));\n\n      // Update routes global state\n      setRoutes(prev => {\n        return prev.map(route => {\n          if (route.id === editingStopId) {\n            return {\n              ...route,\n              time_from_start: parseFloat(stopTimeData.time_from_start)\n            };\n          }\n          return route;\n        });\n      });\n\n      // Reset edit state\n      setEditingStopId(null);\n      setStopTimeData({\n        time_from_start: ''\n      });\n    } catch (err) {\n      setError('Error updating stop time: ' + err.message);\n      console.error(\"Error updating stop time:\", err);\n    } finally {\n      setMapLoading(false);\n    }\n  };\n\n  // Cancel editing stop time\n  const handleCancelEditStopTime = () => {\n    setEditingStopId(null);\n    setStopTimeData({\n      time_from_start: ''\n    });\n  };\n\n  // Add a new start time for the bus\n  const handleAddStartTime = async () => {\n    if (!selectedBus || !newStartTime) {\n      setError('Please select a bus and enter a valid start time.');\n      return;\n    }\n    try {\n      setMapLoading(true);\n\n      // Get current start times to calculate next rep_no\n      const startTimesResponse = await axios.get(getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)), {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Calculate next rep_no based on existing start times\n      let maxRepNo = 0;\n      if (Array.isArray(startTimesResponse.data)) {\n        const repNos = startTimesResponse.data.map(time => parseInt(time.rep_no) || 0);\n        maxRepNo = repNos.length > 0 ? Math.max(...repNos) : 0;\n      }\n      const newRepNo = maxRepNo + 1;\n\n      // Add new start time\n      await axios.post(getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)), {\n        start_time: newStartTime,\n        rep_no: newRepNo\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Update bus totalRep\n      await axios.put(getApiUrl(api.endpoints.adminUpdateBusTotalRep(selectedBus)), {\n        totalRep: newRepNo\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Fetch updated start times\n      const updatedStartTimesResponse = await axios.get(getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)), {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      if (updatedStartTimesResponse.data && updatedStartTimesResponse.data.data) {\n        setStartTimes(updatedStartTimesResponse.data.data);\n      } else if (Array.isArray(updatedStartTimesResponse.data)) {\n        setStartTimes(updatedStartTimesResponse.data);\n      }\n\n      // Reset form\n      setNewStartTime('');\n      setIsAddingStartTime(false);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError('Error adding start time: ' + (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message));\n      console.error(\"Error adding start time:\", err);\n    } finally {\n      setMapLoading(false);\n    }\n  };\n\n  // Handle delete start time\n  const handleDeleteStartTime = async timeId => {\n    if (!window.confirm('Are you sure you want to delete this start time?')) {\n      return;\n    }\n    try {\n      setMapLoading(true);\n      await axios.delete(getApiUrl(api.endpoints.adminDeleteStartTime(timeId)), {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Fetch updated start times\n      const startTimesResponse = await axios.get(getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)), {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      if (startTimesResponse.data && startTimesResponse.data.data) {\n        setStartTimes(startTimesResponse.data.data);\n      } else if (Array.isArray(startTimesResponse.data)) {\n        setStartTimes(startTimesResponse.data);\n      }\n\n      // Update bus totalRep based on max rep_no\n      if (Array.isArray(startTimesResponse.data) && startTimesResponse.data.length > 0) {\n        const repNos = startTimesResponse.data.map(time => parseInt(time.rep_no) || 0);\n        const maxRepNo = repNos.length > 0 ? Math.max(...repNos) : 0;\n        console.log(\"Updated max rep_no:\", maxRepNo);\n        await axios.put(getApiUrl(api.endpoints.adminUpdateBusTotalRep(selectedBus)), {\n          totalRep: maxRepNo\n        }, {\n          headers: {\n            Authorization: `Bearer ${user.token}`\n          }\n        });\n      }\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError('Error deleting start time: ' + (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message));\n      console.error(\"Error deleting start time:\", err);\n    } finally {\n      setMapLoading(false);\n    }\n  };\n  const handleEditStartTime = timeId => {\n    const startTime = startTimes.find(time => time.id === timeId);\n    if (startTime) {\n      setEditingTimeId(timeId);\n      setNewStartTime(startTime.start_time);\n    }\n  };\n  const handleSaveStartTime = async () => {\n    if (!editingTimeId || !newStartTime) return;\n    try {\n      setMapLoading(true);\n      await axios.put(getApiUrl(api.endpoints.adminUpdateStartTime(editingTimeId)), {\n        start_time: newStartTime\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Fetch updated start times\n      const startTimesResponse = await axios.get(getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)), {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      if (startTimesResponse.data && startTimesResponse.data.data) {\n        setStartTimes(startTimesResponse.data.data);\n      } else if (Array.isArray(startTimesResponse.data)) {\n        setStartTimes(startTimesResponse.data);\n      }\n\n      // Reset edit state\n      setEditingTimeId(null);\n      setNewStartTime('');\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError('Error updating start time: ' + (((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || err.message));\n      console.error(\"Error updating start time:\", err);\n    } finally {\n      setMapLoading(false);\n    }\n  };\n\n  // Cancel editing start time\n  const handleCancelEditStartTime = () => {\n    setEditingTimeId(null);\n    setNewStartTime('');\n  };\n  const fitRouteOnMap = routeStops => {\n    if (!routeStops || routeStops.length === 0 || !mapRef.current) return;\n\n    // Get all stop coordinates, ensuring we have proper numeric values\n    const stopPositions = routeStops.map(routeStop => {\n      const stop = stops.find(s => s.id === routeStop.bus_stop_id);\n      if (!stop) return null;\n      const lat = parseFloat(stop.latitude);\n      const lng = parseFloat(stop.longitude);\n      if (isNaN(lat) || isNaN(lng)) return null;\n      return [lat, lng];\n    }).filter(Boolean);\n    if (stopPositions.length === 0) return;\n    if (stopPositions.length === 1) {\n      // If only one stop, center on it\n      setMapCenter(stopPositions[0]);\n      setZoom(16);\n    } else {\n      // Calculate bounds for multiple stops\n      const minLat = Math.min(...stopPositions.map(pos => pos[0]));\n      const maxLat = Math.max(...stopPositions.map(pos => pos[0]));\n      const minLng = Math.min(...stopPositions.map(pos => pos[1]));\n      const maxLng = Math.max(...stopPositions.map(pos => pos[1]));\n\n      // Center the map on the middle of the route\n      setMapCenter([minLat + (maxLat - minLat) / 2, minLng + (maxLng - minLng) / 2]);\n\n      // Calculate zoom level based on distance\n      const latDiff = maxLat - minLat;\n      const lngDiff = maxLng - minLng;\n      const maxDiff = Math.max(latDiff, lngDiff);\n\n      // Simple zoom calculation, adjust as needed\n      if (maxDiff < 0.005) setZoom(16);else if (maxDiff < 0.01) setZoom(15);else if (maxDiff < 0.02) setZoom(14);else setZoom(13);\n    }\n  };\n  const getStopById = stopId => {\n    return stops.find(stop => stop.id === stopId);\n  };\n  const getBusById = busId => {\n    return buses.find(bus => bus.id === busId);\n  };\n\n  // Simplified version - remove the special handling for start/end stops\n  // since we're treating it as a circular route\n  const getStopIcon = () => {\n    // Use a single color for all stops in a circular route\n    return L.icon({\n      iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n      popupAnchor: [1, -34],\n      shadowSize: [41, 41]\n    });\n  };\n\n  // Begin editing a stop including name\n  const handleEditStopFull = routeId => {\n    const routeStop = formData.stops.find(stop => stop.id === routeId);\n    if (routeStop) {\n      setEditingStopId(routeId);\n      setEditingStopName(true);\n      setEditFormData({\n        stop_id: routeStop.bus_stop_id,\n        stop_order: routeStop.stop_order,\n        time_from_start: routeStop.time_from_start || 0\n      });\n    }\n  };\n\n  // Save edited stop including name change\n  const handleSaveStopFull = async () => {\n    if (!editingStopId) return;\n    try {\n      setMapLoading(true);\n\n      // Update route with new stop_id and time_from_start\n      await axios.put(getApiUrl(api.endpoints.adminUpdateRoute(editingStopId)), {\n        bus_stop_id: editFormData.stop_id,\n        stop_order: parseInt(editFormData.stop_order),\n        time_from_start: parseFloat(editFormData.time_from_start)\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Refresh the routes for this bus to get updated data\n      const response = await axios.get(getApiUrl(api.endpoints.adminRouteById(selectedBus)), {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      const busRoutes = response.data;\n      setFormData({\n        bus_id: selectedBus,\n        stops: busRoutes\n      });\n\n      // Reset edit state\n      setEditingStopId(null);\n      setEditingStopName(false);\n      setEditFormData({\n        stop_id: '',\n        stop_order: '',\n        time_from_start: ''\n      });\n\n      // Update map\n      fitRouteOnMap(busRoutes);\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      setError('Error updating stop: ' + (((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || err.message));\n      console.error(\"Error updating stop:\", err);\n    } finally {\n      setMapLoading(false);\n    }\n  };\n\n  // Cancel editing stop\n  const handleCancelStopEdit = () => {\n    setEditingStopId(null);\n    setEditingStopName(false);\n    setEditFormData({\n      stop_id: '',\n      stop_order: '',\n      time_from_start: ''\n    });\n  };\n  if (loading && !buses.length && !stops.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading route data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 847,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"route-management\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Route Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 853,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"refresh-button\",\n        onClick: () => setRefreshTrigger(prev => prev + 1),\n        disabled: loading,\n        children: loading ? 'Refreshing...' : 'Refresh Data'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowMapDebug(!showMapDebug),\n        children: showMapDebug ? \"Hide Debug Info\" : \"Show Debug Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 855,\n      columnNumber: 13\n    }, this), showMapDebug && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-info\",\n      style: {\n        padding: '10px',\n        backgroundColor: '#f0f0f0',\n        margin: '10px 0',\n        borderRadius: '5px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Route Debug Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 871,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Buses Loaded: \", buses.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Stops Loaded: \", stops.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 873,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected Bus: \", selectedBus ? (_getBusById = getBusById(selectedBus)) === null || _getBusById === void 0 ? void 0 : _getBusById.name : 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 874,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Route Stops: \", formData.stops.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 875,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Map Center: \", mapCenter.join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          window.routeDiagnostics.logState();\n          console.log(\"Current formData:\", formData);\n        },\n        children: \"Log Debug Info to Console\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 870,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"route-management-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bus-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select Bus to Manage Route\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bus-list\",\n          children: buses.map(bus => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: selectedBus === bus.id ? 'selected' : '',\n            onClick: () => handleBusSelect(bus.id),\n            children: bus.name\n          }, bus.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 891,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 17\n      }, this), selectedBus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"route-editor\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Route for \", (_getBusById2 = getBusById(selectedBus)) === null || _getBusById2 === void 0 ? void 0 : _getBusById2.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"start-times-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Bus Start Times\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 908,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"start-times-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Repetition\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 913,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Start Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 914,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Actions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 915,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 912,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 911,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: startTimes.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  colSpan: \"3\",\n                  children: \"No start times defined yet.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 921,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 920,\n                columnNumber: 41\n              }, this) : startTimes.map(time => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: time.rep_no\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 926,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: editingTimeId === time.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"time\",\n                    value: newStartTime,\n                    onChange: e => setNewStartTime(e.target.value),\n                    required: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 929,\n                    columnNumber: 57\n                  }, this) : time.start_time\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 927,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: editingTimeId === time.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: handleSaveStartTime,\n                      children: \"Save\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 942,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: handleCancelEditStartTime,\n                      children: \"Cancel\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 943,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleEditStartTime(time.id),\n                      children: \"Edit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 947,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleDeleteStartTime(time.id),\n                      className: \"delete-time-button\",\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 948,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 939,\n                  columnNumber: 49\n                }, this)]\n              }, time.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 925,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 918,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 910,\n            columnNumber: 29\n          }, this), isAddingStartTime ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"add-start-time-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Add New Start Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 965,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                value: newStartTime,\n                onChange: e => setNewStartTime(e.target.value),\n                placeholder: \"HH:MM\",\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 967,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleAddStartTime,\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 975,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    setIsAddingStartTime(false);\n                    setNewStartTime('');\n                  },\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 976,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 974,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 966,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 964,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-start-time-button\",\n            onClick: () => setIsAddingStartTime(true),\n            children: \"Add Start Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 984,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 907,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Route Stops\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 993,\n          columnNumber: 25\n        }, this), formData.stops.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No stops assigned to this route. Add stops below.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 995,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"route-stops-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Order\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1000,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Stop Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1001,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Time (minutes from start)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1002,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1003,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 999,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 998,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [...formData.stops].sort((a, b) => a.stop_order - b.stop_order).map(routeStop => {\n              const stop = getStopById(routeStop.bus_stop_id);\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: routeStop.stop_order\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1013,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: stop ? stop.name : 'Unknown Stop'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1014,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: editingStopId === routeStop.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    min: \"0\",\n                    step: \"0.1\",\n                    value: stopTimeData.time_from_start,\n                    onChange: e => setStopTimeData({\n                      ...stopTimeData,\n                      time_from_start: e.target.value\n                    }),\n                    required: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1017,\n                    columnNumber: 61\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: routeStop.time_from_start || 0\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1029,\n                    columnNumber: 61\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1015,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: editingStopId === routeStop.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: handleSaveStopTime,\n                      children: \"Save\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1035,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: handleCancelEditStopTime,\n                      children: \"Cancel\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1036,\n                      columnNumber: 65\n                    }, this)]\n                  }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleEditStopTime(routeStop.id),\n                      children: \"Edit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1040,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleRemoveStop(routeStop.id),\n                      children: \"Remove\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1043,\n                      columnNumber: 65\n                    }, this)]\n                  }, void 0, true)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1032,\n                  columnNumber: 53\n                }, this)]\n              }, `${routeStop.id}-${refreshTrigger}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1012,\n                columnNumber: 49\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1006,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 997,\n          columnNumber: 29\n        }, this), isAddingStop ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-stop-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Add New Stop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1059,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: editFormData.stop_id,\n              onChange: e => setEditFormData({\n                ...editFormData,\n                stop_id: e.target.value\n              }),\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Stop\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1069,\n                columnNumber: 41\n              }, this), stops.map(stop => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: stop.id,\n                children: stop.name\n              }, stop.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1071,\n                columnNumber: 45\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1061,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleAddStop(editFormData.stop_id),\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1077,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setIsAddingStop(false),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1078,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1076,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1060,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1058,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-stop-button\",\n          onClick: () => setIsAddingStop(true),\n          children: \"Add Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1083,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: mapCenter,\n          zoom: zoom,\n          style: {\n            height: '400px',\n            width: '100%'\n          },\n          whenCreated: mapInstance => mapRef.current = mapInstance,\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1098,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(MapUpdater, {\n            center: mapCenter,\n            zoom: zoom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1102,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(RoadBasedRoutes, {\n            stops: formData.stops\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1103,\n            columnNumber: 29\n          }, this), stops.map(stop => {\n            const appearances = formData.stops.filter(s => s.bus_stop_id === stop.id);\n            if (appearances.length > 0) {\n              return /*#__PURE__*/_jsxDEV(Marker, {\n                position: [stop.latitude, stop.longitude],\n                icon: getStopIcon(),\n                children: /*#__PURE__*/_jsxDEV(Popup, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: stop.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1112,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1113,\n                      columnNumber: 53\n                    }, this), appearances.map(a => `${a.time_from_start || 0} min`).join(', ')]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1111,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1110,\n                  columnNumber: 45\n                }, this)\n              }, stop.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1109,\n                columnNumber: 41\n              }, this);\n            }\n            return null;\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1092,\n          columnNumber: 25\n        }, this), selectedBus && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"route-status\",\n          style: {\n            textAlign: 'center',\n            marginTop: '10px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Route Status:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1128,\n              columnNumber: 37\n            }, this), \" \", formData.stops.length < 2 ? \"Add at least 2 stops to create a route\" : `Route with ${formData.stops.length} stops and ${startTimes.length} scheduled departure times`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1127,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1126,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 903,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 886,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 851,\n    columnNumber: 9\n  }, this);\n}\n_s3(RouteManagement, \"CpPPsI5uDGv958TwgGWmRvHbmg0=\");\n_c3 = RouteManagement;\nexport default RouteManagement;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MapUpdater\");\n$RefreshReg$(_c2, \"RoadBasedRoutes\");\n$RefreshReg$(_c3, \"RouteManagement\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","axios","MapContainer","TileLayer","Marker","Popup","useMap","L","api","getApiUrl","jsxDEV","_jsxDEV","Fragment","_Fragment","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","configureRoutingMachine","Routing","Itinerary","options","createGeocoderPane","timeout","ErrorControl","_routingErrorHandler","e","console","warn","Line","originalClearLines","_clearLines","_map","_route","_layers","call","removeLayer","MapUpdater","center","zoom","_s","map","setView","getZoom","_c","RoadBasedRoutes","stops","_s2","controlRef","cleanup","current","removeControl","length","log","hasMap","stopsCount","waypoints","orderedStops","sort","a","b","stop_order","routeStop","_window$stopsData","stopData","window","stopsData","find","s","id","bus_stop_id","lat","parseFloat","latitude","lng","longitude","isNaN","push","latLng","control","routeWhileDragging","showAlternatives","fitSelectedRoutes","show","lineOptions","styles","color","opacity","weight","extendToWaypoints","missingRouteTolerance","createMarker","addWaypoints","serviceUrl","on","setTimeout","addTo","error","_c2","RouteManagement","user","_s3","_getBusById","_getBusById2","buses","setBuses","setStops","loading","setLoading","setError","selectedBus","setSelectedBus","mapCenter","setMapCenter","setZoom","mapRef","refreshTrigger","setRefreshTrigger","routes","setRoutes","showMapDebug","setShowMapDebug","mapLoading","setMapLoading","startTimes","setStartTimes","editingStopId","setEditingStopId","editingTimeId","setEditingTimeId","newStartTime","setNewStartTime","isAddingStartTime","setIsAddingStartTime","formData","setFormData","bus_id","stopTimeData","setStopTimeData","time_from_start","isAddingStop","setIsAddingStop","currentStopOrder","setCurrentStopOrder","editingStopName","setEditingStopName","editFormData","setEditFormData","stop_id","enableOSRM","routeDiagnostics","logState","_window$stopsData2","routeStops","mapInitialized","fetchData","busesResponse","get","endpoints","adminBuses","headers","Authorization","token","data","err","message","name","stopsResponse","adminStops","routesResponse","adminRoutes","fetchedRoutes","handleBusSelect","busId","response","adminRouteById","busRoutes","Math","max","stop","fitRouteOnMap","startTimesResponse","adminBusStartTimes","Array","isArray","handleAddStop","stopId","Error","newRoute","post","adminAddRoute","updatedStops","prev","handleRemoveStop","routeId","confirm","delete","adminDeleteRoute","filter","route","handleEditStopTime","handleSaveStopTime","put","adminUpdateRoute","handleCancelEditStopTime","handleAddStartTime","maxRepNo","repNos","time","parseInt","rep_no","newRepNo","start_time","adminUpdateBusTotalRep","totalRep","updatedStartTimesResponse","_err$response","_err$response$data","handleDeleteStartTime","timeId","adminDeleteStartTime","_err$response2","_err$response2$data","handleEditStartTime","startTime","handleSaveStartTime","adminUpdateStartTime","_err$response3","_err$response3$data","handleCancelEditStartTime","stopPositions","Boolean","minLat","min","pos","maxLat","minLng","maxLng","latDiff","lngDiff","maxDiff","getStopById","getBusById","bus","getStopIcon","icon","iconSize","iconAnchor","popupAnchor","shadowSize","handleEditStopFull","handleSaveStopFull","_err$response4","_err$response4$data","handleCancelStopEdit","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","disabled","style","padding","backgroundColor","margin","borderRadius","join","colSpan","type","value","onChange","target","required","placeholder","step","height","width","whenCreated","mapInstance","url","attribution","appearances","position","textAlign","marginTop","_c3","$RefreshReg$"],"sources":["/home/lubesh/Desktop/DBMS/KGP_Bus/frontend/src/components/admin/RouteManagement.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-routing-machine';\r\nimport 'leaflet-routing-machine/dist/leaflet-routing-machine.css';\r\nimport '../../css/RouteManagement.css'; // Import your CSS file for styling\r\nimport api, { getApiUrl } from '../../utils/api2.js';\r\n\r\n// Fix for default marker icon in Leaflet with React\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',\r\n    iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',\r\n    shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',\r\n});\r\n\r\n\r\nfunction configureRoutingMachine() {\r\n    if (typeof L !== 'undefined' && L.Routing) {\r\n        // Modify the global routing options\r\n        L.Routing.Itinerary.prototype.options.createGeocoderPane = false;\r\n        L.Routing.timeout = 30 * 1000; // 30 seconds timeout\r\n\r\n        // Override the error handling globally\r\n        if (L.Routing.ErrorControl && L.Routing.ErrorControl.prototype) {\r\n            L.Routing.ErrorControl.prototype._routingErrorHandler = function (e) {\r\n                console.warn(\"Handled routing error:\", e);\r\n                // No UI updates or errors thrown\r\n            };\r\n        }\r\n\r\n        // Fix issues with the layer removal\r\n        if (L.Routing.Line && L.Routing.Line.prototype) {\r\n            const originalClearLines = L.Routing.Line.prototype._clearLines;\r\n            L.Routing.Line.prototype._clearLines = function () {\r\n                try {\r\n                    // Safety check before calling the original function\r\n                    if (this._map && this._route && this._route._layers) {\r\n                        originalClearLines.call(this);\r\n                    }\r\n                } catch (e) {\r\n                    console.warn(\"Protected from _clearLines error:\", e);\r\n                    // Manual cleanup as fallback\r\n                    if (this._map && this._route) {\r\n                        try {\r\n                            this._map.removeLayer(this._route);\r\n                        } catch (e) {\r\n                            console.warn(\"Also failed with manual cleanup:\", e);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Component to recenter map when needed\r\nfunction MapUpdater({ center, zoom }) {\r\n    const map = useMap();\r\n\r\n    useEffect(() => {\r\n        if (center) {\r\n            map.setView(center, zoom || map.getZoom());\r\n        }\r\n    }, [center, zoom, map]);\r\n\r\n    return null;\r\n}\r\n\r\n\r\n// Custom component to create routes that follow roads\r\nfunction RoadBasedRoutes({ stops }) { // Removed setDirections parameter\r\n    const map = useMap();\r\n    const controlRef = useRef(null);\r\n\r\n    // A safer cleanup function we can call anytime\r\n    const cleanup = useCallback(() => {\r\n        if (controlRef.current) {\r\n            try {\r\n                // Always remove from map first\r\n                if (map) map.removeControl(controlRef.current);\r\n            } catch (e) {\r\n                console.warn(\"Error removing control:\", e);\r\n            }\r\n            controlRef.current = null;\r\n        }\r\n    }, [map]);\r\n\r\n    // Set up once - clean up on unmount\r\n    useEffect(() => {\r\n        return cleanup;\r\n    }, [cleanup]);\r\n\r\n    // Handle route creation/updates\r\n    useEffect(() => {\r\n        // Skip if no map or insufficient stops\r\n        if (!map || !stops || stops.length < 2) {\r\n            console.log(\"Not enough conditions for route drawing:\", {\r\n                hasMap: !!map,\r\n                stopsCount: stops?.length || 0\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Clear any existing routes first\r\n        cleanup();\r\n\r\n        // Get waypoints from stops\r\n        const waypoints = [];\r\n        const orderedStops = [...stops].sort((a, b) => a.stop_order - b.stop_order);\r\n\r\n        console.log(\"Drawing routes for ordered stops:\", orderedStops);\r\n\r\n        // Find the actual stop data using the global stops data\r\n        for (const routeStop of orderedStops) {\r\n            const stopData = window.stopsData?.find(s => s.id === routeStop.bus_stop_id);\r\n            if (stopData) {\r\n                const lat = parseFloat(stopData.latitude);\r\n                const lng = parseFloat(stopData.longitude);\r\n                if (!isNaN(lat) && !isNaN(lng)) {\r\n                    waypoints.push(L.latLng(lat, lng));\r\n                }\r\n            }\r\n        }\r\n\r\n        // // Add the first waypoint again for circular route\r\n        // if (waypoints.length >= 2) {\r\n        //     waypoints.push(waypoints[0]);\r\n        // }\r\n\r\n        console.log(\"Generated waypoints for circular route:\", waypoints.length);\r\n\r\n        // Only create route if we have at least 2 valid waypoints\r\n        if (waypoints.length < 2) { // Now we need at least 3 (including repeat of first)\r\n            console.log(\"Not enough valid waypoints for circular route\");\r\n            return;\r\n        }\r\n\r\n        // Create the OSRM routing control\r\n        try {\r\n            const control = L.Routing.control({\r\n                waypoints,\r\n                routeWhileDragging: false,\r\n                showAlternatives: false,\r\n                fitSelectedRoutes: false,\r\n                show: false, // Don't show the routing interface\r\n                lineOptions: {\r\n                    styles: [{ color: '#3388ff', opacity: 0.7, weight: 5 }],\r\n                    extendToWaypoints: true,\r\n                    missingRouteTolerance: 10\r\n                },\r\n                createMarker: () => null, // No markers from routing\r\n                addWaypoints: false,\r\n                serviceUrl: 'https://router.project-osrm.org/route/v1'\r\n            });\r\n\r\n            // Handle errors silently\r\n            control.on('routingerror', function (e) {\r\n                console.warn(\"Routing error:\", e);\r\n            });\r\n\r\n            // Store the reference\r\n            controlRef.current = control;\r\n\r\n            // Add the control to the map\r\n            setTimeout(() => {\r\n                if (map && controlRef.current) {\r\n                    try {\r\n                        controlRef.current.addTo(map);\r\n                    } catch (e) {\r\n                        console.warn(\"Error adding route control:\", e);\r\n                    }\r\n                }\r\n            }, 200);\r\n        } catch (error) {\r\n            console.error(\"Error creating routing control:\", error);\r\n        }\r\n    }, [map, stops, cleanup]);\r\n\r\n    return null;\r\n}\r\n\r\nfunction RouteManagement({ user }) {\r\n    const [buses, setBuses] = useState([]);\r\n    const [stops, setStops] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState('');\r\n    const [selectedBus, setSelectedBus] = useState(null);\r\n    const [mapCenter, setMapCenter] = useState([22.3190, 87.3091]); // IIT KGP coordinates\r\n    const [zoom, setZoom] = useState(15);\r\n    const mapRef = useRef(null);\r\n    const [refreshTrigger, setRefreshTrigger] = useState(0);\r\n    const [routes, setRoutes] = useState([]);\r\n    const [showMapDebug, setShowMapDebug] = useState(false); // State for debugging\r\n    const [mapLoading, setMapLoading] = useState(false); // New state for map loading\r\n    const [startTimes, setStartTimes] = useState([]); // New state for bus start times\r\n    const [editingStopId, setEditingStopId] = useState(null); // State to track which stop is being edited\r\n    const [editingTimeId, setEditingTimeId] = useState(null); // State to track which start time is being edited\r\n    const [newStartTime, setNewStartTime] = useState(''); // State for new start time input\r\n    const [isAddingStartTime, setIsAddingStartTime] = useState(false); // State to track if adding new start time\r\n\r\n    const [formData, setFormData] = useState({\r\n        bus_id: '',\r\n        stops: []\r\n    });\r\n\r\n    // State for editing individual stop time\r\n    const [stopTimeData, setStopTimeData] = useState({\r\n        time_from_start: ''\r\n    });\r\n\r\n    const [isAddingStop, setIsAddingStop] = useState(false);\r\n    const [currentStopOrder, setCurrentStopOrder] = useState(1);\r\n\r\n    // Add state for edit mode for stop name\r\n    const [editingStopName, setEditingStopName] = useState(false);\r\n    const [editFormData, setEditFormData] = useState({\r\n        stop_id: '',\r\n        stop_order: '',\r\n        time_from_start: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        // Initialize window-level stopsData and configuration flag\r\n        window.enableOSRM = true; // Always use OSRM\r\n        configureRoutingMachine();\r\n\r\n        // Add a global diagnostics object to help with debugging\r\n        window.routeDiagnostics = {\r\n            stops: [],\r\n            waypoints: [],\r\n            logState: () => {\r\n                console.log(\"Current Map State:\", {\r\n                    stops: window.stopsData?.length || 0,\r\n                    selectedBus,\r\n                    routeStops: formData.stops.length,\r\n                    mapInitialized: !!mapRef.current\r\n                });\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                setLoading(true);\r\n                setError('');\r\n\r\n                // Fetch buses\r\n                try {\r\n                    const busesResponse = await axios.get(getApiUrl(api.endpoints.adminBuses), {\r\n                        headers: { Authorization: `Bearer ${user.token}` },\r\n                        timeout: 10000\r\n                    });\r\n                    setBuses(busesResponse.data);\r\n                    console.log(\"Buses loaded for routes:\", busesResponse.data.length);\r\n                } catch (err) {\r\n                    setError('Failed to fetch buses: ' + err.message);\r\n                    console.error(\"Error fetching buses for routes:\", err);\r\n                    setBuses([{ id: 'mock1', name: 'Demo Bus 1' }]); // Fallback data\r\n                }\r\n\r\n                // Fetch stops\r\n                try {\r\n                    const stopsResponse = await axios.get(getApiUrl(api.endpoints.adminStops), {\r\n                        headers: { Authorization: `Bearer ${user.token}` },\r\n                        timeout: 10000\r\n                    });\r\n                    setStops(stopsResponse.data);\r\n                    console.log(\"Stops loaded for routes:\", stopsResponse.data.length);\r\n                } catch (err) {\r\n                    setError('Failed to fetch stops: ' + err.message);\r\n                    console.error(\"Error fetching stops for routes:\", err);\r\n                    setStops([{\r\n                        id: 'mock1',\r\n                        name: 'Demo Stop',\r\n                        latitude: 22.3190,\r\n                        longitude: 87.3091\r\n                    }]); // Fallback data\r\n                }\r\n\r\n                // Fetch routes and update your state\r\n                try {\r\n                    const routesResponse = await axios.get(getApiUrl(api.endpoints.adminRoutes), {\r\n                        headers: { Authorization: `Bearer ${user.token}` },\r\n                        timeout: 10000\r\n                    });\r\n                    // Using the fetched routes data\r\n                    const fetchedRoutes = routesResponse.data;\r\n                    setRoutes(fetchedRoutes);\r\n                    console.log(\"Routes loaded:\", fetchedRoutes.length);\r\n                } catch (err) {\r\n                    setError('Failed to fetch routes: ' + err.message);\r\n                    console.error(\"Error fetching routes:\", err);\r\n                    // Using default empty array for routes\r\n                    setRoutes([]);\r\n                }\r\n            } catch (err) {\r\n                setError('Error fetching data: ' + err.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [user.token, refreshTrigger]);\r\n\r\n    useEffect(() => {\r\n        if (stops && stops.length > 0) {\r\n            window.stopsData = stops;\r\n        }\r\n    }, [stops]);\r\n\r\n\r\n    const handleBusSelect = async (busId) => {\r\n        try {\r\n            setSelectedBus(busId);\r\n            setLoading(true);\r\n            setMapLoading(true); // Start map loading\r\n            setError('');\r\n\r\n            try {\r\n                // Fetch bus routes\r\n                const response = await axios.get(\r\n                    getApiUrl(api.endpoints.adminRouteById(busId)),\r\n                    { headers: { Authorization: `Bearer ${user.token}` } }\r\n                );\r\n\r\n                const busRoutes = response.data;\r\n                console.log('Routes loaded for bus', busId, busRoutes);\r\n\r\n                setFormData({\r\n                    bus_id: busId,\r\n                    stops: busRoutes\r\n                });\r\n\r\n                // Set current stop order for adding new stops\r\n                setCurrentStopOrder(\r\n                    busRoutes && busRoutes.length > 0\r\n                        ? Math.max(...busRoutes.map(stop => stop.stop_order)) + 1\r\n                        : 1\r\n                );\r\n\r\n                // Find stop coordinates to center map\r\n                if (busRoutes && busRoutes.length > 0) {\r\n                    fitRouteOnMap(busRoutes);\r\n                }\r\n\r\n                // Fetch start times for this bus\r\n                try {\r\n                    const startTimesResponse = await axios.get(\r\n                        getApiUrl(api.endpoints.adminBusStartTimes(busId)),\r\n                        { headers: { Authorization: `Bearer ${user.token}` } }\r\n                    );\r\n\r\n                    if (startTimesResponse.data && startTimesResponse.data.data) {\r\n                        setStartTimes(startTimesResponse.data.data);\r\n                    } else if (Array.isArray(startTimesResponse.data)) {\r\n                        setStartTimes(startTimesResponse.data);\r\n                    } else {\r\n                        setStartTimes([]);\r\n                    }\r\n                } catch (err) {\r\n                    console.error(\"Error fetching start times:\", err);\r\n                    setStartTimes([]);\r\n                }\r\n\r\n                // Set a timer to ensure map loading state shows for at least a moment\r\n                setTimeout(() => {\r\n                    setMapLoading(false);\r\n                }, 1000);\r\n            } catch (err) {\r\n                setError('Error fetching route data: ' + err.message);\r\n                console.error(\"Error fetching routes for bus:\", err);\r\n                setMapLoading(false); // End map loading on error\r\n            }\r\n        } catch (err) {\r\n            setError('Error preparing bus route view: ' + err.message);\r\n            setMapLoading(false); // End map loading on error\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddStop = async (stopId) => {\r\n        try {\r\n            setError('');\r\n            setMapLoading(true); // Start map loading for route update\r\n            const stop = stops.find(s => s.id === stopId);\r\n            if (!stop) {\r\n                throw new Error(\"Stop not found\");\r\n            }\r\n\r\n            // Create new route stop entry\r\n            const newRoute = {\r\n                bus_id: selectedBus,\r\n                bus_stop_id: stopId,\r\n                stop_order: currentStopOrder,\r\n                time_from_start: 0 // Default to 0 minutes\r\n            };\r\n\r\n            const response = await axios.post(\r\n                getApiUrl(api.endpoints.adminAddRoute),\r\n                newRoute,\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            if (response.data && response.data.id) {\r\n                // Use the complete object returned from API\r\n                const updatedStops = [...formData.stops, response.data];\r\n                setFormData(prev => ({\r\n                    ...prev,\r\n                    stops: updatedStops\r\n                }));\r\n\r\n                setRoutes(prev => [...prev, response.data]);\r\n                setCurrentStopOrder(currentStopOrder + 1);\r\n\r\n                // Update the map to show the new route\r\n                fitRouteOnMap(updatedStops);\r\n            }\r\n\r\n            setIsAddingStop(false);\r\n            setTimeout(() => {\r\n                setMapLoading(false);\r\n            }, 1000);\r\n        } catch (err) {\r\n            setError('Failed to add stop to route: ' + err.message);\r\n            console.error(\"Error adding stop to route:\", err);\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleRemoveStop = async (routeId) => {\r\n        if (!window.confirm('Are you sure you want to remove this stop from the route?')) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setMapLoading(true); // Start map loading for route update\r\n            await axios.delete(\r\n                getApiUrl(api.endpoints.adminDeleteRoute(routeId)),\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            // Update local state\r\n            const updatedStops = formData.stops.filter(stop => stop.id !== routeId);\r\n\r\n            setFormData(prev => ({\r\n                ...prev,\r\n                stops: updatedStops\r\n            }));\r\n\r\n            setRoutes(prev => prev.filter(route => route.id !== routeId));\r\n\r\n            // Update the map\r\n            fitRouteOnMap(updatedStops);\r\n\r\n            setTimeout(() => {\r\n                setMapLoading(false);\r\n            }, 1000);\r\n        } catch (err) {\r\n            setError('Error removing stop: ' + err.message);\r\n            console.error(\"Error removing stop from route:\", err);\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    // Begin editing a stop's time\r\n    const handleEditStopTime = (routeId) => {\r\n        const stop = formData.stops.find(stop => stop.id === routeId);\r\n        if (stop) {\r\n            setEditingStopId(routeId);\r\n            setStopTimeData({\r\n                time_from_start: stop.time_from_start || 0\r\n            });\r\n        }\r\n    };\r\n\r\n    // Save edited stop time\r\n    const handleSaveStopTime = async () => {\r\n        if (!editingStopId) return;\r\n\r\n        try {\r\n            setMapLoading(true);\r\n\r\n            await axios.put(\r\n                getApiUrl(api.endpoints.adminUpdateRoute(editingStopId)),\r\n                {\r\n                    time_from_start: parseFloat(stopTimeData.time_from_start)\r\n                },\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            // Update local state\r\n            const updatedStops = formData.stops.map(stop => {\r\n                if (stop.id === editingStopId) {\r\n                    return {\r\n                        ...stop,\r\n                        time_from_start: parseFloat(stopTimeData.time_from_start)\r\n                    };\r\n                }\r\n                return stop;\r\n            });\r\n\r\n            setFormData(prev => ({\r\n                ...prev,\r\n                stops: updatedStops\r\n            }));\r\n\r\n            // Update routes global state\r\n            setRoutes(prev => {\r\n                return prev.map(route => {\r\n                    if (route.id === editingStopId) {\r\n                        return {\r\n                            ...route,\r\n                            time_from_start: parseFloat(stopTimeData.time_from_start)\r\n                        };\r\n                    }\r\n                    return route;\r\n                });\r\n            });\r\n\r\n            // Reset edit state\r\n            setEditingStopId(null);\r\n            setStopTimeData({ time_from_start: '' });\r\n        } catch (err) {\r\n            setError('Error updating stop time: ' + err.message);\r\n            console.error(\"Error updating stop time:\", err);\r\n        } finally {\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    // Cancel editing stop time\r\n    const handleCancelEditStopTime = () => {\r\n        setEditingStopId(null);\r\n        setStopTimeData({ time_from_start: '' });\r\n    };\r\n\r\n    // Add a new start time for the bus\r\n    const handleAddStartTime = async () => {\r\n        if (!selectedBus || !newStartTime) {\r\n            setError('Please select a bus and enter a valid start time.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setMapLoading(true);\r\n\r\n            // Get current start times to calculate next rep_no\r\n            const startTimesResponse = await axios.get(\r\n                getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)),\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n            \r\n            // Calculate next rep_no based on existing start times\r\n            let maxRepNo = 0;\r\n            if (Array.isArray(startTimesResponse.data)) {\r\n                const repNos = startTimesResponse.data.map(time => parseInt(time.rep_no) || 0);\r\n                maxRepNo = repNos.length > 0 ? Math.max(...repNos) : 0;\r\n            }\r\n            const newRepNo = maxRepNo + 1;\r\n\r\n            // Add new start time\r\n            await axios.post(\r\n                getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)),\r\n                { \r\n                    start_time: newStartTime,\r\n                    rep_no: newRepNo\r\n                },\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            // Update bus totalRep\r\n            await axios.put(\r\n                getApiUrl(api.endpoints.adminUpdateBusTotalRep(selectedBus)),\r\n                { totalRep: newRepNo },\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            // Fetch updated start times\r\n            const updatedStartTimesResponse = await axios.get(\r\n                getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)),\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            if (updatedStartTimesResponse.data && updatedStartTimesResponse.data.data) {\r\n                setStartTimes(updatedStartTimesResponse.data.data);\r\n            } else if (Array.isArray(updatedStartTimesResponse.data)) {\r\n                setStartTimes(updatedStartTimesResponse.data);\r\n            }\r\n\r\n            // Reset form\r\n            setNewStartTime('');\r\n            setIsAddingStartTime(false);\r\n        } catch (err) {\r\n            setError('Error adding start time: ' + (err.response?.data?.message || err.message));\r\n            console.error(\"Error adding start time:\", err);\r\n        } finally {\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    // Handle delete start time\r\n    const handleDeleteStartTime = async (timeId) => {\r\n        if (!window.confirm('Are you sure you want to delete this start time?')) {\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            setMapLoading(true);\r\n            \r\n            await axios.delete(\r\n                getApiUrl(api.endpoints.adminDeleteStartTime(timeId)),\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n            \r\n            // Fetch updated start times\r\n            const startTimesResponse = await axios.get(\r\n                getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)),\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n            \r\n            if (startTimesResponse.data && startTimesResponse.data.data) {\r\n                setStartTimes(startTimesResponse.data.data);\r\n            } else if (Array.isArray(startTimesResponse.data)) {\r\n                setStartTimes(startTimesResponse.data);\r\n            }\r\n            \r\n            // Update bus totalRep based on max rep_no\r\n            if (Array.isArray(startTimesResponse.data) && startTimesResponse.data.length > 0) {\r\n                const repNos = startTimesResponse.data.map(time => parseInt(time.rep_no) || 0);\r\n                const maxRepNo = repNos.length > 0 ? Math.max(...repNos) : 0;\r\n                console.log(\"Updated max rep_no:\", maxRepNo);\r\n                \r\n                await axios.put(\r\n                    getApiUrl(api.endpoints.adminUpdateBusTotalRep(selectedBus)),\r\n                    { totalRep: maxRepNo },\r\n                    { headers: { Authorization: `Bearer ${user.token}` } }\r\n                );\r\n            }\r\n        } catch (err) {\r\n            setError('Error deleting start time: ' + (err.response?.data?.message || err.message));\r\n            console.error(\"Error deleting start time:\", err);\r\n        } finally {\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleEditStartTime = (timeId) => {\r\n        const startTime = startTimes.find(time => time.id === timeId);\r\n        if (startTime) {\r\n            setEditingTimeId(timeId);\r\n            setNewStartTime(startTime.start_time);\r\n        }\r\n    };\r\n\r\n    const handleSaveStartTime = async () => {\r\n        if (!editingTimeId || !newStartTime) return;\r\n\r\n        try {\r\n            setMapLoading(true);\r\n\r\n            await axios.put(\r\n                getApiUrl(api.endpoints.adminUpdateStartTime(editingTimeId)),\r\n                { start_time: newStartTime },\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            // Fetch updated start times\r\n            const startTimesResponse = await axios.get(\r\n                getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)),\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            if (startTimesResponse.data && startTimesResponse.data.data) {\r\n                setStartTimes(startTimesResponse.data.data);\r\n            } else if (Array.isArray(startTimesResponse.data)) {\r\n                setStartTimes(startTimesResponse.data);\r\n            }\r\n\r\n            // Reset edit state\r\n            setEditingTimeId(null);\r\n            setNewStartTime('');\r\n        } catch (err) {\r\n            setError('Error updating start time: ' + (err.response?.data?.message || err.message));\r\n            console.error(\"Error updating start time:\", err);\r\n        } finally {\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    // Cancel editing start time\r\n    const handleCancelEditStartTime = () => {\r\n        setEditingTimeId(null);\r\n        setNewStartTime('');\r\n    };\r\n\r\n    const fitRouteOnMap = (routeStops) => {\r\n        if (!routeStops || routeStops.length === 0 || !mapRef.current) return;\r\n\r\n        // Get all stop coordinates, ensuring we have proper numeric values\r\n        const stopPositions = routeStops.map(routeStop => {\r\n            const stop = stops.find(s => s.id === routeStop.bus_stop_id);\r\n            if (!stop) return null;\r\n\r\n            const lat = parseFloat(stop.latitude);\r\n            const lng = parseFloat(stop.longitude);\r\n            if (isNaN(lat) || isNaN(lng)) return null;\r\n\r\n            return [lat, lng];\r\n        }).filter(Boolean);\r\n\r\n        if (stopPositions.length === 0) return;\r\n\r\n        if (stopPositions.length === 1) {\r\n            // If only one stop, center on it\r\n            setMapCenter(stopPositions[0]);\r\n            setZoom(16);\r\n        } else {\r\n            // Calculate bounds for multiple stops\r\n            const minLat = Math.min(...stopPositions.map(pos => pos[0]));\r\n            const maxLat = Math.max(...stopPositions.map(pos => pos[0]));\r\n            const minLng = Math.min(...stopPositions.map(pos => pos[1]));\r\n            const maxLng = Math.max(...stopPositions.map(pos => pos[1]));\r\n\r\n            // Center the map on the middle of the route\r\n            setMapCenter([\r\n                minLat + (maxLat - minLat) / 2,\r\n                minLng + (maxLng - minLng) / 2\r\n            ]);\r\n\r\n            // Calculate zoom level based on distance\r\n            const latDiff = maxLat - minLat;\r\n            const lngDiff = maxLng - minLng;\r\n            const maxDiff = Math.max(latDiff, lngDiff);\r\n\r\n            // Simple zoom calculation, adjust as needed\r\n            if (maxDiff < 0.005) setZoom(16);\r\n            else if (maxDiff < 0.01) setZoom(15);\r\n            else if (maxDiff < 0.02) setZoom(14);\r\n            else setZoom(13);\r\n        }\r\n    };\r\n\r\n    const getStopById = (stopId) => {\r\n        return stops.find(stop => stop.id === stopId);\r\n    };\r\n\r\n    const getBusById = (busId) => {\r\n        return buses.find(bus => bus.id === busId);\r\n    };\r\n\r\n    // Simplified version - remove the special handling for start/end stops\r\n    // since we're treating it as a circular route\r\n    const getStopIcon = () => {\r\n        // Use a single color for all stops in a circular route\r\n        return L.icon({\r\n            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',\r\n            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\r\n            iconSize: [25, 41],\r\n            iconAnchor: [12, 41],\r\n            popupAnchor: [1, -34],\r\n            shadowSize: [41, 41]\r\n        });\r\n    };\r\n\r\n    // Begin editing a stop including name\r\n    const handleEditStopFull = (routeId) => {\r\n        const routeStop = formData.stops.find(stop => stop.id === routeId);\r\n        if (routeStop) {\r\n            setEditingStopId(routeId);\r\n            setEditingStopName(true);\r\n            setEditFormData({\r\n                stop_id: routeStop.bus_stop_id,\r\n                stop_order: routeStop.stop_order,\r\n                time_from_start: routeStop.time_from_start || 0\r\n            });\r\n        }\r\n    };\r\n\r\n    // Save edited stop including name change\r\n    const handleSaveStopFull = async () => {\r\n        if (!editingStopId) return;\r\n\r\n        try {\r\n            setMapLoading(true);\r\n\r\n            // Update route with new stop_id and time_from_start\r\n            await axios.put(\r\n                getApiUrl(api.endpoints.adminUpdateRoute(editingStopId)),\r\n                {\r\n                    bus_stop_id: editFormData.stop_id,\r\n                    stop_order: parseInt(editFormData.stop_order),\r\n                    time_from_start: parseFloat(editFormData.time_from_start)\r\n                },\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            // Refresh the routes for this bus to get updated data\r\n            const response = await axios.get(\r\n                getApiUrl(api.endpoints.adminRouteById(selectedBus)),\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            const busRoutes = response.data;\r\n            setFormData({\r\n                bus_id: selectedBus,\r\n                stops: busRoutes\r\n            });\r\n\r\n            // Reset edit state\r\n            setEditingStopId(null);\r\n            setEditingStopName(false);\r\n            setEditFormData({\r\n                stop_id: '',\r\n                stop_order: '',\r\n                time_from_start: ''\r\n            });\r\n\r\n            // Update map\r\n            fitRouteOnMap(busRoutes);\r\n        } catch (err) {\r\n            setError('Error updating stop: ' + (err.response?.data?.message || err.message));\r\n            console.error(\"Error updating stop:\", err);\r\n        } finally {\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    // Cancel editing stop\r\n    const handleCancelStopEdit = () => {\r\n        setEditingStopId(null);\r\n        setEditingStopName(false);\r\n        setEditFormData({\r\n            stop_id: '',\r\n            stop_order: '',\r\n            time_from_start: ''\r\n        });\r\n    };\r\n\r\n    if (loading && !buses.length && !stops.length) {\r\n        return <div>Loading route data...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"route-management\">\r\n            <h2>Route Management</h2>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n\r\n            <div className=\"action-buttons\">\r\n                <button\r\n                    className=\"refresh-button\"\r\n                    onClick={() => setRefreshTrigger(prev => prev + 1)}\r\n                    disabled={loading}\r\n                >\r\n                    {loading ? 'Refreshing...' : 'Refresh Data'}\r\n                </button>\r\n\r\n                <button onClick={() => setShowMapDebug(!showMapDebug)}>\r\n                    {showMapDebug ? \"Hide Debug Info\" : \"Show Debug Info\"}\r\n                </button>\r\n            </div>\r\n\r\n            {showMapDebug && (\r\n                <div className=\"debug-info\" style={{ padding: '10px', backgroundColor: '#f0f0f0', margin: '10px 0', borderRadius: '5px' }}>\r\n                    <h4>Route Debug Information</h4>\r\n                    <p>Buses Loaded: {buses.length}</p>\r\n                    <p>Stops Loaded: {stops.length}</p>\r\n                    <p>Selected Bus: {selectedBus ? getBusById(selectedBus)?.name : 'None'}</p>\r\n                    <p>Route Stops: {formData.stops.length}</p>\r\n                    <p>Map Center: {mapCenter.join(', ')}</p>\r\n                    <button onClick={() => {\r\n                        window.routeDiagnostics.logState();\r\n                        console.log(\"Current formData:\", formData);\r\n                    }}>\r\n                        Log Debug Info to Console\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"route-management-content\">\r\n                <div className=\"bus-selector\">\r\n                    <h3>Select Bus to Manage Route</h3>\r\n                    <div className=\"bus-list\">\r\n                        {buses.map(bus => (\r\n                            <button \r\n                                key={bus.id} \r\n                                className={selectedBus === bus.id ? 'selected' : ''} \r\n                                onClick={() => handleBusSelect(bus.id)}\r\n                            >\r\n                                {bus.name}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                {selectedBus && (\r\n                    <div className=\"route-editor\">\r\n                        <h3>Route for {getBusById(selectedBus)?.name}</h3>\r\n\r\n                        {/* Start Times Management Section */}\r\n                        <div className=\"start-times-section\">\r\n                            <h4>Bus Start Times</h4>\r\n                            \r\n                            <table className=\"start-times-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Repetition</th>\r\n                                        <th>Start Time</th>\r\n                                        <th>Actions</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {startTimes.length === 0 ? (\r\n                                        <tr>\r\n                                            <td colSpan=\"3\">No start times defined yet.</td>\r\n                                        </tr>\r\n                                    ) : (\r\n                                        startTimes.map(time => (\r\n                                            <tr key={time.id}>\r\n                                                <td>{time.rep_no}</td>\r\n                                                <td>\r\n                                                    {editingTimeId === time.id ? (\r\n                                                        <input\r\n                                                            type=\"time\"\r\n                                                            value={newStartTime}\r\n                                                            onChange={(e) => setNewStartTime(e.target.value)}\r\n                                                            required\r\n                                                        />\r\n                                                    ) : (\r\n                                                        time.start_time\r\n                                                    )}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {editingTimeId === time.id ? (\r\n                                                        <>\r\n                                                            <button onClick={handleSaveStartTime}>Save</button>\r\n                                                            <button onClick={handleCancelEditStartTime}>Cancel</button>\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            <button onClick={() => handleEditStartTime(time.id)}>Edit</button>\r\n                                                            <button \r\n                                                                onClick={() => handleDeleteStartTime(time.id)}\r\n                                                                className=\"delete-time-button\"\r\n                                                            >\r\n                                                                Delete\r\n                                                            </button>\r\n                                                        </>\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                            \r\n                            {isAddingStartTime ? (\r\n                                <div className=\"add-start-time-form\">\r\n                                    <h5>Add New Start Time</h5>\r\n                                    <div className=\"form-group\">\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            value={newStartTime}\r\n                                            onChange={(e) => setNewStartTime(e.target.value)}\r\n                                            placeholder=\"HH:MM\"\r\n                                            required\r\n                                        />\r\n                                        <div className=\"form-buttons\">\r\n                                            <button onClick={handleAddStartTime}>Save</button>\r\n                                            <button onClick={() => {\r\n                                                setIsAddingStartTime(false);\r\n                                                setNewStartTime('');\r\n                                            }}>Cancel</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            ) : (\r\n                                <button\r\n                                    className=\"add-start-time-button\"\r\n                                    onClick={() => setIsAddingStartTime(true)}\r\n                                >\r\n                                    Add Start Time\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n\r\n                        <h4>Route Stops</h4>\r\n                        {formData.stops.length === 0 ? (\r\n                            <p>No stops assigned to this route. Add stops below.</p>\r\n                        ) : (\r\n                            <table className=\"route-stops-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Order</th>\r\n                                        <th>Stop Name</th>\r\n                                        <th>Time (minutes from start)</th>\r\n                                        <th>Actions</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {[...formData.stops]\r\n                                        .sort((a, b) => a.stop_order - b.stop_order)\r\n                                        .map(routeStop => {\r\n                                            const stop = getStopById(routeStop.bus_stop_id);\r\n                                            return (\r\n                                                <tr key={`${routeStop.id}-${refreshTrigger}`}>\r\n                                                    <td>{routeStop.stop_order}</td>\r\n                                                    <td>{stop ? stop.name : 'Unknown Stop'}</td>\r\n                                                    <td>\r\n                                                        {editingStopId === routeStop.id ? (\r\n                                                            <input\r\n                                                                type=\"number\"\r\n                                                                min=\"0\"\r\n                                                                step=\"0.1\"\r\n                                                                value={stopTimeData.time_from_start}\r\n                                                                onChange={(e) => setStopTimeData({\r\n                                                                    ...stopTimeData,\r\n                                                                    time_from_start: e.target.value\r\n                                                                })}\r\n                                                                required\r\n                                                            />\r\n                                                        ) : (\r\n                                                            <span>{routeStop.time_from_start || 0}</span>\r\n                                                        )}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {editingStopId === routeStop.id ? (\r\n                                                            <>\r\n                                                                <button onClick={handleSaveStopTime}>Save</button>\r\n                                                                <button onClick={handleCancelEditStopTime}>Cancel</button>\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <>\r\n                                                                <button onClick={() => handleEditStopTime(routeStop.id)}>\r\n                                                                    Edit\r\n                                                                </button>\r\n                                                                <button onClick={() => handleRemoveStop(routeStop.id)}>\r\n                                                                    Remove\r\n                                                                </button>\r\n                                                            </>\r\n                                                        )}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        })}\r\n                                </tbody>\r\n                            </table>\r\n                        )}\r\n\r\n                        {/* Add Stop Form */}\r\n                        {isAddingStop ? (\r\n                            <div className=\"add-stop-form\">\r\n                                <h5>Add New Stop</h5>\r\n                                <div className=\"form-group\">\r\n                                    <select\r\n                                        value={editFormData.stop_id}\r\n                                        onChange={(e) => setEditFormData({\r\n                                            ...editFormData,\r\n                                            stop_id: e.target.value\r\n                                        })}\r\n                                        required\r\n                                    >\r\n                                        <option value=\"\">Select Stop</option>\r\n                                        {stops.map(stop => (\r\n                                            <option key={stop.id} value={stop.id}>\r\n                                                {stop.name}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n                                    <div className=\"form-buttons\">\r\n                                        <button onClick={() => handleAddStop(editFormData.stop_id)}>Add</button>\r\n                                        <button onClick={() => setIsAddingStop(false)}>Cancel</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ) : (\r\n                            <button\r\n                                className=\"add-stop-button\"\r\n                                onClick={() => setIsAddingStop(true)}\r\n                            >\r\n                                Add Stop\r\n                            </button>\r\n                        )}\r\n\r\n                        {/* Map Container */}\r\n                        <MapContainer\r\n                            center={mapCenter}\r\n                            zoom={zoom}\r\n                            style={{ height: '400px', width: '100%' }}\r\n                            whenCreated={mapInstance => mapRef.current = mapInstance}\r\n                        >\r\n                            <TileLayer\r\n                                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                            />\r\n                            <MapUpdater center={mapCenter} zoom={zoom} />\r\n                            <RoadBasedRoutes stops={formData.stops} />\r\n\r\n                            {stops.map(stop => {\r\n                                const appearances = formData.stops.filter(s => s.bus_stop_id === stop.id);\r\n                                if (appearances.length > 0) {\r\n                                    return (\r\n                                        <Marker key={stop.id} position={[stop.latitude, stop.longitude]} icon={getStopIcon()}>\r\n                                            <Popup>\r\n                                                <div>\r\n                                                    <strong>{stop.name}</strong>\r\n                                                    <br />\r\n                                                    {appearances.map(a => `${a.time_from_start || 0} min`).join(', ')}\r\n                                                </div>\r\n                                            </Popup>\r\n                                        </Marker>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </MapContainer>\r\n\r\n                        {/* Route status indicator */}\r\n                        {selectedBus && (\r\n                            <div className=\"route-status\" style={{ textAlign: 'center', marginTop: '10px' }}>\r\n                                <p>\r\n                                    <strong>Route Status:</strong> {formData.stops.length < 2\r\n                                        ? \"Add at least 2 stops to create a route\"\r\n                                        : `Route with ${formData.stops.length} stops and ${startTimes.length} scheduled departure times`}\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RouteManagement;"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,eAAe;AAC9E,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AACjC,OAAO,yBAAyB;AAChC,OAAO,0DAA0D;AACjE,OAAO,+BAA+B,CAAC,CAAC;AACxC,OAAOC,GAAG,IAAIC,SAAS,QAAQ,qBAAqB;;AAEpD;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,OAAON,CAAC,CAACO,IAAI,CAACC,OAAO,CAACC,SAAS,CAACC,WAAW;AAC3CV,CAAC,CAACO,IAAI,CAACC,OAAO,CAACG,YAAY,CAAC;EACxBC,aAAa,EAAE,gEAAgE;EAC/EC,OAAO,EAAE,6DAA6D;EACtEC,SAAS,EAAE;AACf,CAAC,CAAC;AAGF,SAASC,uBAAuBA,CAAA,EAAG;EAC/B,IAAI,OAAOf,CAAC,KAAK,WAAW,IAAIA,CAAC,CAACgB,OAAO,EAAE;IACvC;IACAhB,CAAC,CAACgB,OAAO,CAACC,SAAS,CAACR,SAAS,CAACS,OAAO,CAACC,kBAAkB,GAAG,KAAK;IAChEnB,CAAC,CAACgB,OAAO,CAACI,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;IAE/B;IACA,IAAIpB,CAAC,CAACgB,OAAO,CAACK,YAAY,IAAIrB,CAAC,CAACgB,OAAO,CAACK,YAAY,CAACZ,SAAS,EAAE;MAC5DT,CAAC,CAACgB,OAAO,CAACK,YAAY,CAACZ,SAAS,CAACa,oBAAoB,GAAG,UAAUC,CAAC,EAAE;QACjEC,OAAO,CAACC,IAAI,CAAC,wBAAwB,EAAEF,CAAC,CAAC;QACzC;MACJ,CAAC;IACL;;IAEA;IACA,IAAIvB,CAAC,CAACgB,OAAO,CAACU,IAAI,IAAI1B,CAAC,CAACgB,OAAO,CAACU,IAAI,CAACjB,SAAS,EAAE;MAC5C,MAAMkB,kBAAkB,GAAG3B,CAAC,CAACgB,OAAO,CAACU,IAAI,CAACjB,SAAS,CAACmB,WAAW;MAC/D5B,CAAC,CAACgB,OAAO,CAACU,IAAI,CAACjB,SAAS,CAACmB,WAAW,GAAG,YAAY;QAC/C,IAAI;UACA;UACA,IAAI,IAAI,CAACC,IAAI,IAAI,IAAI,CAACC,MAAM,IAAI,IAAI,CAACA,MAAM,CAACC,OAAO,EAAE;YACjDJ,kBAAkB,CAACK,IAAI,CAAC,IAAI,CAAC;UACjC;QACJ,CAAC,CAAC,OAAOT,CAAC,EAAE;UACRC,OAAO,CAACC,IAAI,CAAC,mCAAmC,EAAEF,CAAC,CAAC;UACpD;UACA,IAAI,IAAI,CAACM,IAAI,IAAI,IAAI,CAACC,MAAM,EAAE;YAC1B,IAAI;cACA,IAAI,CAACD,IAAI,CAACI,WAAW,CAAC,IAAI,CAACH,MAAM,CAAC;YACtC,CAAC,CAAC,OAAOP,CAAC,EAAE;cACRC,OAAO,CAACC,IAAI,CAAC,kCAAkC,EAAEF,CAAC,CAAC;YACvD;UACJ;QACJ;MACJ,CAAC;IACL;EACJ;AACJ;;AAGA;AACA,SAASW,UAAUA,CAAC;EAAEC,MAAM;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAMC,GAAG,GAAGvC,MAAM,CAAC,CAAC;EAEpBR,SAAS,CAAC,MAAM;IACZ,IAAI4C,MAAM,EAAE;MACRG,GAAG,CAACC,OAAO,CAACJ,MAAM,EAAEC,IAAI,IAAIE,GAAG,CAACE,OAAO,CAAC,CAAC,CAAC;IAC9C;EACJ,CAAC,EAAE,CAACL,MAAM,EAAEC,IAAI,EAAEE,GAAG,CAAC,CAAC;EAEvB,OAAO,IAAI;AACf;;AAGA;AAAAD,EAAA,CAbSH,UAAU;EAAA,QACHnC,MAAM;AAAA;AAAA0C,EAAA,GADbP,UAAU;AAcnB,SAASQ,eAAeA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,GAAA;EAAE;EAClC,MAAMN,GAAG,GAAGvC,MAAM,CAAC,CAAC;EACpB,MAAM8C,UAAU,GAAGrD,MAAM,CAAC,IAAI,CAAC;;EAE/B;EACA,MAAMsD,OAAO,GAAGrD,WAAW,CAAC,MAAM;IAC9B,IAAIoD,UAAU,CAACE,OAAO,EAAE;MACpB,IAAI;QACA;QACA,IAAIT,GAAG,EAAEA,GAAG,CAACU,aAAa,CAACH,UAAU,CAACE,OAAO,CAAC;MAClD,CAAC,CAAC,OAAOxB,CAAC,EAAE;QACRC,OAAO,CAACC,IAAI,CAAC,yBAAyB,EAAEF,CAAC,CAAC;MAC9C;MACAsB,UAAU,CAACE,OAAO,GAAG,IAAI;IAC7B;EACJ,CAAC,EAAE,CAACT,GAAG,CAAC,CAAC;;EAET;EACA/C,SAAS,CAAC,MAAM;IACZ,OAAOuD,OAAO;EAClB,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;;EAEb;EACAvD,SAAS,CAAC,MAAM;IACZ;IACA,IAAI,CAAC+C,GAAG,IAAI,CAACK,KAAK,IAAIA,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;MACpCzB,OAAO,CAAC0B,GAAG,CAAC,0CAA0C,EAAE;QACpDC,MAAM,EAAE,CAAC,CAACb,GAAG;QACbc,UAAU,EAAE,CAAAT,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEM,MAAM,KAAI;MACjC,CAAC,CAAC;MACF;IACJ;;IAEA;IACAH,OAAO,CAAC,CAAC;;IAET;IACA,MAAMO,SAAS,GAAG,EAAE;IACpB,MAAMC,YAAY,GAAG,CAAC,GAAGX,KAAK,CAAC,CAACY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,UAAU,GAAGD,CAAC,CAACC,UAAU,CAAC;IAE3ElC,OAAO,CAAC0B,GAAG,CAAC,mCAAmC,EAAEI,YAAY,CAAC;;IAE9D;IACA,KAAK,MAAMK,SAAS,IAAIL,YAAY,EAAE;MAAA,IAAAM,iBAAA;MAClC,MAAMC,QAAQ,IAAAD,iBAAA,GAAGE,MAAM,CAACC,SAAS,cAAAH,iBAAA,uBAAhBA,iBAAA,CAAkBI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKP,SAAS,CAACQ,WAAW,CAAC;MAC5E,IAAIN,QAAQ,EAAE;QACV,MAAMO,GAAG,GAAGC,UAAU,CAACR,QAAQ,CAACS,QAAQ,CAAC;QACzC,MAAMC,GAAG,GAAGF,UAAU,CAACR,QAAQ,CAACW,SAAS,CAAC;QAC1C,IAAI,CAACC,KAAK,CAACL,GAAG,CAAC,IAAI,CAACK,KAAK,CAACF,GAAG,CAAC,EAAE;UAC5BlB,SAAS,CAACqB,IAAI,CAAC1E,CAAC,CAAC2E,MAAM,CAACP,GAAG,EAAEG,GAAG,CAAC,CAAC;QACtC;MACJ;IACJ;;IAEA;IACA;IACA;IACA;;IAEA/C,OAAO,CAAC0B,GAAG,CAAC,yCAAyC,EAAEG,SAAS,CAACJ,MAAM,CAAC;;IAExE;IACA,IAAII,SAAS,CAACJ,MAAM,GAAG,CAAC,EAAE;MAAE;MACxBzB,OAAO,CAAC0B,GAAG,CAAC,+CAA+C,CAAC;MAC5D;IACJ;;IAEA;IACA,IAAI;MACA,MAAM0B,OAAO,GAAG5E,CAAC,CAACgB,OAAO,CAAC4D,OAAO,CAAC;QAC9BvB,SAAS;QACTwB,kBAAkB,EAAE,KAAK;QACzBC,gBAAgB,EAAE,KAAK;QACvBC,iBAAiB,EAAE,KAAK;QACxBC,IAAI,EAAE,KAAK;QAAE;QACbC,WAAW,EAAE;UACTC,MAAM,EAAE,CAAC;YAAEC,KAAK,EAAE,SAAS;YAAEC,OAAO,EAAE,GAAG;YAAEC,MAAM,EAAE;UAAE,CAAC,CAAC;UACvDC,iBAAiB,EAAE,IAAI;UACvBC,qBAAqB,EAAE;QAC3B,CAAC;QACDC,YAAY,EAAEA,CAAA,KAAM,IAAI;QAAE;QAC1BC,YAAY,EAAE,KAAK;QACnBC,UAAU,EAAE;MAChB,CAAC,CAAC;;MAEF;MACAd,OAAO,CAACe,EAAE,CAAC,cAAc,EAAE,UAAUpE,CAAC,EAAE;QACpCC,OAAO,CAACC,IAAI,CAAC,gBAAgB,EAAEF,CAAC,CAAC;MACrC,CAAC,CAAC;;MAEF;MACAsB,UAAU,CAACE,OAAO,GAAG6B,OAAO;;MAE5B;MACAgB,UAAU,CAAC,MAAM;QACb,IAAItD,GAAG,IAAIO,UAAU,CAACE,OAAO,EAAE;UAC3B,IAAI;YACAF,UAAU,CAACE,OAAO,CAAC8C,KAAK,CAACvD,GAAG,CAAC;UACjC,CAAC,CAAC,OAAOf,CAAC,EAAE;YACRC,OAAO,CAACC,IAAI,CAAC,6BAA6B,EAAEF,CAAC,CAAC;UAClD;QACJ;MACJ,CAAC,EAAE,GAAG,CAAC;IACX,CAAC,CAAC,OAAOuE,KAAK,EAAE;MACZtE,OAAO,CAACsE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAC3D;EACJ,CAAC,EAAE,CAACxD,GAAG,EAAEK,KAAK,EAAEG,OAAO,CAAC,CAAC;EAEzB,OAAO,IAAI;AACf;AAACF,GAAA,CA7GQF,eAAe;EAAA,QACR3C,MAAM;AAAA;AAAAgG,GAAA,GADbrD,eAAe;AA+GxB,SAASsD,eAAeA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAAAC,GAAA;EAAA,IAAAC,WAAA,EAAAC,YAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhH,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACqD,KAAK,EAAE4D,QAAQ,CAAC,GAAGjH,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACkH,OAAO,EAAEC,UAAU,CAAC,GAAGnH,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACwG,KAAK,EAAEY,QAAQ,CAAC,GAAGpH,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACqH,WAAW,EAAEC,cAAc,CAAC,GAAGtH,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACuH,SAAS,EAAEC,YAAY,CAAC,GAAGxH,QAAQ,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;EAChE,MAAM,CAAC8C,IAAI,EAAE2E,OAAO,CAAC,GAAGzH,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM0H,MAAM,GAAGxH,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAACyH,cAAc,EAAEC,iBAAiB,CAAC,GAAG5H,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAAC6H,MAAM,EAAEC,SAAS,CAAC,GAAG9H,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAC+H,YAAY,EAAEC,eAAe,CAAC,GAAGhI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACzD,MAAM,CAACiI,UAAU,EAAEC,aAAa,CAAC,GAAGlI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACrD,MAAM,CAACmI,UAAU,EAAEC,aAAa,CAAC,GAAGpI,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAM,CAACqI,aAAa,EAAEC,gBAAgB,CAAC,GAAGtI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACuI,aAAa,EAAEC,gBAAgB,CAAC,GAAGxI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACyI,YAAY,EAAEC,eAAe,CAAC,GAAG1I,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD,MAAM,CAAC2I,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG5I,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnE,MAAM,CAAC6I,QAAQ,EAAEC,WAAW,CAAC,GAAG9I,QAAQ,CAAC;IACrC+I,MAAM,EAAE,EAAE;IACV1F,KAAK,EAAE;EACX,CAAC,CAAC;;EAEF;EACA,MAAM,CAAC2F,YAAY,EAAEC,eAAe,CAAC,GAAGjJ,QAAQ,CAAC;IAC7CkJ,eAAe,EAAE;EACrB,CAAC,CAAC;EAEF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGpJ,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACqJ,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtJ,QAAQ,CAAC,CAAC,CAAC;;EAE3D;EACA,MAAM,CAACuJ,eAAe,EAAEC,kBAAkB,CAAC,GAAGxJ,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACyJ,YAAY,EAAEC,eAAe,CAAC,GAAG1J,QAAQ,CAAC;IAC7C2J,OAAO,EAAE,EAAE;IACXvF,UAAU,EAAE,EAAE;IACd8E,eAAe,EAAE;EACrB,CAAC,CAAC;EAEFjJ,SAAS,CAAC,MAAM;IACZ;IACAuE,MAAM,CAACoF,UAAU,GAAG,IAAI,CAAC,CAAC;IAC1BnI,uBAAuB,CAAC,CAAC;;IAEzB;IACA+C,MAAM,CAACqF,gBAAgB,GAAG;MACtBxG,KAAK,EAAE,EAAE;MACTU,SAAS,EAAE,EAAE;MACb+F,QAAQ,EAAEA,CAAA,KAAM;QAAA,IAAAC,kBAAA;QACZ7H,OAAO,CAAC0B,GAAG,CAAC,oBAAoB,EAAE;UAC9BP,KAAK,EAAE,EAAA0G,kBAAA,GAAAvF,MAAM,CAACC,SAAS,cAAAsF,kBAAA,uBAAhBA,kBAAA,CAAkBpG,MAAM,KAAI,CAAC;UACpC0D,WAAW;UACX2C,UAAU,EAAEnB,QAAQ,CAACxF,KAAK,CAACM,MAAM;UACjCsG,cAAc,EAAE,CAAC,CAACvC,MAAM,CAACjE;QAC7B,CAAC,CAAC;MACN;IACJ,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAENxD,SAAS,CAAC,MAAM;IACZ,MAAMiK,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA/C,UAAU,CAAC,IAAI,CAAC;QAChBC,QAAQ,CAAC,EAAE,CAAC;;QAEZ;QACA,IAAI;UACA,MAAM+C,aAAa,GAAG,MAAM/J,KAAK,CAACgK,GAAG,CAACxJ,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACC,UAAU,CAAC,EAAE;YACvEC,OAAO,EAAE;cAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;YAAG,CAAC;YAClD3I,OAAO,EAAE;UACb,CAAC,CAAC;UACFkF,QAAQ,CAACmD,aAAa,CAACO,IAAI,CAAC;UAC5BxI,OAAO,CAAC0B,GAAG,CAAC,0BAA0B,EAAEuG,aAAa,CAACO,IAAI,CAAC/G,MAAM,CAAC;QACtE,CAAC,CAAC,OAAOgH,GAAG,EAAE;UACVvD,QAAQ,CAAC,yBAAyB,GAAGuD,GAAG,CAACC,OAAO,CAAC;UACjD1I,OAAO,CAACsE,KAAK,CAAC,kCAAkC,EAAEmE,GAAG,CAAC;UACtD3D,QAAQ,CAAC,CAAC;YAAEpC,EAAE,EAAE,OAAO;YAAEiG,IAAI,EAAE;UAAa,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD;;QAEA;QACA,IAAI;UACA,MAAMC,aAAa,GAAG,MAAM1K,KAAK,CAACgK,GAAG,CAACxJ,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACU,UAAU,CAAC,EAAE;YACvER,OAAO,EAAE;cAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;YAAG,CAAC;YAClD3I,OAAO,EAAE;UACb,CAAC,CAAC;UACFmF,QAAQ,CAAC6D,aAAa,CAACJ,IAAI,CAAC;UAC5BxI,OAAO,CAAC0B,GAAG,CAAC,0BAA0B,EAAEkH,aAAa,CAACJ,IAAI,CAAC/G,MAAM,CAAC;QACtE,CAAC,CAAC,OAAOgH,GAAG,EAAE;UACVvD,QAAQ,CAAC,yBAAyB,GAAGuD,GAAG,CAACC,OAAO,CAAC;UACjD1I,OAAO,CAACsE,KAAK,CAAC,kCAAkC,EAAEmE,GAAG,CAAC;UACtD1D,QAAQ,CAAC,CAAC;YACNrC,EAAE,EAAE,OAAO;YACXiG,IAAI,EAAE,WAAW;YACjB7F,QAAQ,EAAE,OAAO;YACjBE,SAAS,EAAE;UACf,CAAC,CAAC,CAAC,CAAC,CAAC;QACT;;QAEA;QACA,IAAI;UACA,MAAM8F,cAAc,GAAG,MAAM5K,KAAK,CAACgK,GAAG,CAACxJ,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACY,WAAW,CAAC,EAAE;YACzEV,OAAO,EAAE;cAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;YAAG,CAAC;YAClD3I,OAAO,EAAE;UACb,CAAC,CAAC;UACF;UACA,MAAMoJ,aAAa,GAAGF,cAAc,CAACN,IAAI;UACzC5C,SAAS,CAACoD,aAAa,CAAC;UACxBhJ,OAAO,CAAC0B,GAAG,CAAC,gBAAgB,EAAEsH,aAAa,CAACvH,MAAM,CAAC;QACvD,CAAC,CAAC,OAAOgH,GAAG,EAAE;UACVvD,QAAQ,CAAC,0BAA0B,GAAGuD,GAAG,CAACC,OAAO,CAAC;UAClD1I,OAAO,CAACsE,KAAK,CAAC,wBAAwB,EAAEmE,GAAG,CAAC;UAC5C;UACA7C,SAAS,CAAC,EAAE,CAAC;QACjB;MACJ,CAAC,CAAC,OAAO6C,GAAG,EAAE;QACVvD,QAAQ,CAAC,uBAAuB,GAAGuD,GAAG,CAACC,OAAO,CAAC;MACnD,CAAC,SAAS;QACNzD,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAED+C,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACvD,IAAI,CAAC8D,KAAK,EAAE9C,cAAc,CAAC,CAAC;EAEhC1H,SAAS,CAAC,MAAM;IACZ,IAAIoD,KAAK,IAAIA,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;MAC3Ba,MAAM,CAACC,SAAS,GAAGpB,KAAK;IAC5B;EACJ,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAGX,MAAM8H,eAAe,GAAG,MAAOC,KAAK,IAAK;IACrC,IAAI;MACA9D,cAAc,CAAC8D,KAAK,CAAC;MACrBjE,UAAU,CAAC,IAAI,CAAC;MAChBe,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACrBd,QAAQ,CAAC,EAAE,CAAC;MAEZ,IAAI;QACA;QACA,MAAMiE,QAAQ,GAAG,MAAMjL,KAAK,CAACgK,GAAG,CAC5BxJ,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACiB,cAAc,CAACF,KAAK,CAAC,CAAC,EAC9C;UAAEb,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;UAAG;QAAE,CACzD,CAAC;QAED,MAAMc,SAAS,GAAGF,QAAQ,CAACX,IAAI;QAC/BxI,OAAO,CAAC0B,GAAG,CAAC,uBAAuB,EAAEwH,KAAK,EAAEG,SAAS,CAAC;QAEtDzC,WAAW,CAAC;UACRC,MAAM,EAAEqC,KAAK;UACb/H,KAAK,EAAEkI;QACX,CAAC,CAAC;;QAEF;QACAjC,mBAAmB,CACfiC,SAAS,IAAIA,SAAS,CAAC5H,MAAM,GAAG,CAAC,GAC3B6H,IAAI,CAACC,GAAG,CAAC,GAAGF,SAAS,CAACvI,GAAG,CAAC0I,IAAI,IAAIA,IAAI,CAACtH,UAAU,CAAC,CAAC,GAAG,CAAC,GACvD,CACV,CAAC;;QAED;QACA,IAAImH,SAAS,IAAIA,SAAS,CAAC5H,MAAM,GAAG,CAAC,EAAE;UACnCgI,aAAa,CAACJ,SAAS,CAAC;QAC5B;;QAEA;QACA,IAAI;UACA,MAAMK,kBAAkB,GAAG,MAAMxL,KAAK,CAACgK,GAAG,CACtCxJ,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACwB,kBAAkB,CAACT,KAAK,CAAC,CAAC,EAClD;YAAEb,OAAO,EAAE;cAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;YAAG;UAAE,CACzD,CAAC;UAED,IAAImB,kBAAkB,CAAClB,IAAI,IAAIkB,kBAAkB,CAAClB,IAAI,CAACA,IAAI,EAAE;YACzDtC,aAAa,CAACwD,kBAAkB,CAAClB,IAAI,CAACA,IAAI,CAAC;UAC/C,CAAC,MAAM,IAAIoB,KAAK,CAACC,OAAO,CAACH,kBAAkB,CAAClB,IAAI,CAAC,EAAE;YAC/CtC,aAAa,CAACwD,kBAAkB,CAAClB,IAAI,CAAC;UAC1C,CAAC,MAAM;YACHtC,aAAa,CAAC,EAAE,CAAC;UACrB;QACJ,CAAC,CAAC,OAAOuC,GAAG,EAAE;UACVzI,OAAO,CAACsE,KAAK,CAAC,6BAA6B,EAAEmE,GAAG,CAAC;UACjDvC,aAAa,CAAC,EAAE,CAAC;QACrB;;QAEA;QACA9B,UAAU,CAAC,MAAM;UACb4B,aAAa,CAAC,KAAK,CAAC;QACxB,CAAC,EAAE,IAAI,CAAC;MACZ,CAAC,CAAC,OAAOyC,GAAG,EAAE;QACVvD,QAAQ,CAAC,6BAA6B,GAAGuD,GAAG,CAACC,OAAO,CAAC;QACrD1I,OAAO,CAACsE,KAAK,CAAC,gCAAgC,EAAEmE,GAAG,CAAC;QACpDzC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;MAC1B;IACJ,CAAC,CAAC,OAAOyC,GAAG,EAAE;MACVvD,QAAQ,CAAC,kCAAkC,GAAGuD,GAAG,CAACC,OAAO,CAAC;MAC1D1C,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1B,CAAC,SAAS;MACNf,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,MAAM6E,aAAa,GAAG,MAAOC,MAAM,IAAK;IACpC,IAAI;MACA7E,QAAQ,CAAC,EAAE,CAAC;MACZc,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACrB,MAAMwD,IAAI,GAAGrI,KAAK,CAACqB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKqH,MAAM,CAAC;MAC7C,IAAI,CAACP,IAAI,EAAE;QACP,MAAM,IAAIQ,KAAK,CAAC,gBAAgB,CAAC;MACrC;;MAEA;MACA,MAAMC,QAAQ,GAAG;QACbpD,MAAM,EAAE1B,WAAW;QACnBxC,WAAW,EAAEoH,MAAM;QACnB7H,UAAU,EAAEiF,gBAAgB;QAC5BH,eAAe,EAAE,CAAC,CAAC;MACvB,CAAC;MAED,MAAMmC,QAAQ,GAAG,MAAMjL,KAAK,CAACgM,IAAI,CAC7BxL,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACgC,aAAa,CAAC,EACtCF,QAAQ,EACR;QAAE5B,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;QAAG;MAAE,CACzD,CAAC;MAED,IAAIY,QAAQ,CAACX,IAAI,IAAIW,QAAQ,CAACX,IAAI,CAAC9F,EAAE,EAAE;QACnC;QACA,MAAM0H,YAAY,GAAG,CAAC,GAAGzD,QAAQ,CAACxF,KAAK,EAAEgI,QAAQ,CAACX,IAAI,CAAC;QACvD5B,WAAW,CAACyD,IAAI,KAAK;UACjB,GAAGA,IAAI;UACPlJ,KAAK,EAAEiJ;QACX,CAAC,CAAC,CAAC;QAEHxE,SAAS,CAACyE,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAElB,QAAQ,CAACX,IAAI,CAAC,CAAC;QAC3CpB,mBAAmB,CAACD,gBAAgB,GAAG,CAAC,CAAC;;QAEzC;QACAsC,aAAa,CAACW,YAAY,CAAC;MAC/B;MAEAlD,eAAe,CAAC,KAAK,CAAC;MACtB9C,UAAU,CAAC,MAAM;QACb4B,aAAa,CAAC,KAAK,CAAC;MACxB,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC,CAAC,OAAOyC,GAAG,EAAE;MACVvD,QAAQ,CAAC,+BAA+B,GAAGuD,GAAG,CAACC,OAAO,CAAC;MACvD1I,OAAO,CAACsE,KAAK,CAAC,6BAA6B,EAAEmE,GAAG,CAAC;MACjDzC,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ,CAAC;EAED,MAAMsE,gBAAgB,GAAG,MAAOC,OAAO,IAAK;IACxC,IAAI,CAACjI,MAAM,CAACkI,OAAO,CAAC,2DAA2D,CAAC,EAAE;MAC9E;IACJ;IAEA,IAAI;MACAxE,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACrB,MAAM9H,KAAK,CAACuM,MAAM,CACd/L,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACuC,gBAAgB,CAACH,OAAO,CAAC,CAAC,EAClD;QAAElC,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;QAAG;MAAE,CACzD,CAAC;;MAED;MACA,MAAM6B,YAAY,GAAGzD,QAAQ,CAACxF,KAAK,CAACwJ,MAAM,CAACnB,IAAI,IAAIA,IAAI,CAAC9G,EAAE,KAAK6H,OAAO,CAAC;MAEvE3D,WAAW,CAACyD,IAAI,KAAK;QACjB,GAAGA,IAAI;QACPlJ,KAAK,EAAEiJ;MACX,CAAC,CAAC,CAAC;MAEHxE,SAAS,CAACyE,IAAI,IAAIA,IAAI,CAACM,MAAM,CAACC,KAAK,IAAIA,KAAK,CAAClI,EAAE,KAAK6H,OAAO,CAAC,CAAC;;MAE7D;MACAd,aAAa,CAACW,YAAY,CAAC;MAE3BhG,UAAU,CAAC,MAAM;QACb4B,aAAa,CAAC,KAAK,CAAC;MACxB,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC,CAAC,OAAOyC,GAAG,EAAE;MACVvD,QAAQ,CAAC,uBAAuB,GAAGuD,GAAG,CAACC,OAAO,CAAC;MAC/C1I,OAAO,CAACsE,KAAK,CAAC,iCAAiC,EAAEmE,GAAG,CAAC;MACrDzC,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ,CAAC;;EAED;EACA,MAAM6E,kBAAkB,GAAIN,OAAO,IAAK;IACpC,MAAMf,IAAI,GAAG7C,QAAQ,CAACxF,KAAK,CAACqB,IAAI,CAACgH,IAAI,IAAIA,IAAI,CAAC9G,EAAE,KAAK6H,OAAO,CAAC;IAC7D,IAAIf,IAAI,EAAE;MACNpD,gBAAgB,CAACmE,OAAO,CAAC;MACzBxD,eAAe,CAAC;QACZC,eAAe,EAAEwC,IAAI,CAACxC,eAAe,IAAI;MAC7C,CAAC,CAAC;IACN;EACJ,CAAC;;EAED;EACA,MAAM8D,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAAC3E,aAAa,EAAE;IAEpB,IAAI;MACAH,aAAa,CAAC,IAAI,CAAC;MAEnB,MAAM9H,KAAK,CAAC6M,GAAG,CACXrM,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAAC6C,gBAAgB,CAAC7E,aAAa,CAAC,CAAC,EACxD;QACIa,eAAe,EAAEnE,UAAU,CAACiE,YAAY,CAACE,eAAe;MAC5D,CAAC,EACD;QAAEqB,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;QAAG;MAAE,CACzD,CAAC;;MAED;MACA,MAAM6B,YAAY,GAAGzD,QAAQ,CAACxF,KAAK,CAACL,GAAG,CAAC0I,IAAI,IAAI;QAC5C,IAAIA,IAAI,CAAC9G,EAAE,KAAKyD,aAAa,EAAE;UAC3B,OAAO;YACH,GAAGqD,IAAI;YACPxC,eAAe,EAAEnE,UAAU,CAACiE,YAAY,CAACE,eAAe;UAC5D,CAAC;QACL;QACA,OAAOwC,IAAI;MACf,CAAC,CAAC;MAEF5C,WAAW,CAACyD,IAAI,KAAK;QACjB,GAAGA,IAAI;QACPlJ,KAAK,EAAEiJ;MACX,CAAC,CAAC,CAAC;;MAEH;MACAxE,SAAS,CAACyE,IAAI,IAAI;QACd,OAAOA,IAAI,CAACvJ,GAAG,CAAC8J,KAAK,IAAI;UACrB,IAAIA,KAAK,CAAClI,EAAE,KAAKyD,aAAa,EAAE;YAC5B,OAAO;cACH,GAAGyE,KAAK;cACR5D,eAAe,EAAEnE,UAAU,CAACiE,YAAY,CAACE,eAAe;YAC5D,CAAC;UACL;UACA,OAAO4D,KAAK;QAChB,CAAC,CAAC;MACN,CAAC,CAAC;;MAEF;MACAxE,gBAAgB,CAAC,IAAI,CAAC;MACtBW,eAAe,CAAC;QAAEC,eAAe,EAAE;MAAG,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOyB,GAAG,EAAE;MACVvD,QAAQ,CAAC,4BAA4B,GAAGuD,GAAG,CAACC,OAAO,CAAC;MACpD1I,OAAO,CAACsE,KAAK,CAAC,2BAA2B,EAAEmE,GAAG,CAAC;IACnD,CAAC,SAAS;MACNzC,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ,CAAC;;EAED;EACA,MAAMiF,wBAAwB,GAAGA,CAAA,KAAM;IACnC7E,gBAAgB,CAAC,IAAI,CAAC;IACtBW,eAAe,CAAC;MAAEC,eAAe,EAAE;IAAG,CAAC,CAAC;EAC5C,CAAC;;EAED;EACA,MAAMkE,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAAC/F,WAAW,IAAI,CAACoB,YAAY,EAAE;MAC/BrB,QAAQ,CAAC,mDAAmD,CAAC;MAC7D;IACJ;IAEA,IAAI;MACAc,aAAa,CAAC,IAAI,CAAC;;MAEnB;MACA,MAAM0D,kBAAkB,GAAG,MAAMxL,KAAK,CAACgK,GAAG,CACtCxJ,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACwB,kBAAkB,CAACxE,WAAW,CAAC,CAAC,EACxD;QAAEkD,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;QAAG;MAAE,CACzD,CAAC;;MAED;MACA,IAAI4C,QAAQ,GAAG,CAAC;MAChB,IAAIvB,KAAK,CAACC,OAAO,CAACH,kBAAkB,CAAClB,IAAI,CAAC,EAAE;QACxC,MAAM4C,MAAM,GAAG1B,kBAAkB,CAAClB,IAAI,CAAC1H,GAAG,CAACuK,IAAI,IAAIC,QAAQ,CAACD,IAAI,CAACE,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9EJ,QAAQ,GAAGC,MAAM,CAAC3J,MAAM,GAAG,CAAC,GAAG6H,IAAI,CAACC,GAAG,CAAC,GAAG6B,MAAM,CAAC,GAAG,CAAC;MAC1D;MACA,MAAMI,QAAQ,GAAGL,QAAQ,GAAG,CAAC;;MAE7B;MACA,MAAMjN,KAAK,CAACgM,IAAI,CACZxL,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACwB,kBAAkB,CAACxE,WAAW,CAAC,CAAC,EACxD;QACIsG,UAAU,EAAElF,YAAY;QACxBgF,MAAM,EAAEC;MACZ,CAAC,EACD;QAAEnD,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;QAAG;MAAE,CACzD,CAAC;;MAED;MACA,MAAMrK,KAAK,CAAC6M,GAAG,CACXrM,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACuD,sBAAsB,CAACvG,WAAW,CAAC,CAAC,EAC5D;QAAEwG,QAAQ,EAAEH;MAAS,CAAC,EACtB;QAAEnD,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;QAAG;MAAE,CACzD,CAAC;;MAED;MACA,MAAMqD,yBAAyB,GAAG,MAAM1N,KAAK,CAACgK,GAAG,CAC7CxJ,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACwB,kBAAkB,CAACxE,WAAW,CAAC,CAAC,EACxD;QAAEkD,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;QAAG;MAAE,CACzD,CAAC;MAED,IAAIqD,yBAAyB,CAACpD,IAAI,IAAIoD,yBAAyB,CAACpD,IAAI,CAACA,IAAI,EAAE;QACvEtC,aAAa,CAAC0F,yBAAyB,CAACpD,IAAI,CAACA,IAAI,CAAC;MACtD,CAAC,MAAM,IAAIoB,KAAK,CAACC,OAAO,CAAC+B,yBAAyB,CAACpD,IAAI,CAAC,EAAE;QACtDtC,aAAa,CAAC0F,yBAAyB,CAACpD,IAAI,CAAC;MACjD;;MAEA;MACAhC,eAAe,CAAC,EAAE,CAAC;MACnBE,oBAAoB,CAAC,KAAK,CAAC;IAC/B,CAAC,CAAC,OAAO+B,GAAG,EAAE;MAAA,IAAAoD,aAAA,EAAAC,kBAAA;MACV5G,QAAQ,CAAC,2BAA2B,IAAI,EAAA2G,aAAA,GAAApD,GAAG,CAACU,QAAQ,cAAA0C,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcrD,IAAI,cAAAsD,kBAAA,uBAAlBA,kBAAA,CAAoBpD,OAAO,KAAID,GAAG,CAACC,OAAO,CAAC,CAAC;MACpF1I,OAAO,CAACsE,KAAK,CAAC,0BAA0B,EAAEmE,GAAG,CAAC;IAClD,CAAC,SAAS;MACNzC,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ,CAAC;;EAED;EACA,MAAM+F,qBAAqB,GAAG,MAAOC,MAAM,IAAK;IAC5C,IAAI,CAAC1J,MAAM,CAACkI,OAAO,CAAC,kDAAkD,CAAC,EAAE;MACrE;IACJ;IAEA,IAAI;MACAxE,aAAa,CAAC,IAAI,CAAC;MAEnB,MAAM9H,KAAK,CAACuM,MAAM,CACd/L,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAAC8D,oBAAoB,CAACD,MAAM,CAAC,CAAC,EACrD;QAAE3D,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;QAAG;MAAE,CACzD,CAAC;;MAED;MACA,MAAMmB,kBAAkB,GAAG,MAAMxL,KAAK,CAACgK,GAAG,CACtCxJ,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACwB,kBAAkB,CAACxE,WAAW,CAAC,CAAC,EACxD;QAAEkD,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;QAAG;MAAE,CACzD,CAAC;MAED,IAAImB,kBAAkB,CAAClB,IAAI,IAAIkB,kBAAkB,CAAClB,IAAI,CAACA,IAAI,EAAE;QACzDtC,aAAa,CAACwD,kBAAkB,CAAClB,IAAI,CAACA,IAAI,CAAC;MAC/C,CAAC,MAAM,IAAIoB,KAAK,CAACC,OAAO,CAACH,kBAAkB,CAAClB,IAAI,CAAC,EAAE;QAC/CtC,aAAa,CAACwD,kBAAkB,CAAClB,IAAI,CAAC;MAC1C;;MAEA;MACA,IAAIoB,KAAK,CAACC,OAAO,CAACH,kBAAkB,CAAClB,IAAI,CAAC,IAAIkB,kBAAkB,CAAClB,IAAI,CAAC/G,MAAM,GAAG,CAAC,EAAE;QAC9E,MAAM2J,MAAM,GAAG1B,kBAAkB,CAAClB,IAAI,CAAC1H,GAAG,CAACuK,IAAI,IAAIC,QAAQ,CAACD,IAAI,CAACE,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9E,MAAMJ,QAAQ,GAAGC,MAAM,CAAC3J,MAAM,GAAG,CAAC,GAAG6H,IAAI,CAACC,GAAG,CAAC,GAAG6B,MAAM,CAAC,GAAG,CAAC;QAC5DpL,OAAO,CAAC0B,GAAG,CAAC,qBAAqB,EAAEyJ,QAAQ,CAAC;QAE5C,MAAMjN,KAAK,CAAC6M,GAAG,CACXrM,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACuD,sBAAsB,CAACvG,WAAW,CAAC,CAAC,EAC5D;UAAEwG,QAAQ,EAAER;QAAS,CAAC,EACtB;UAAE9C,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;UAAG;QAAE,CACzD,CAAC;MACL;IACJ,CAAC,CAAC,OAAOE,GAAG,EAAE;MAAA,IAAAyD,cAAA,EAAAC,mBAAA;MACVjH,QAAQ,CAAC,6BAA6B,IAAI,EAAAgH,cAAA,GAAAzD,GAAG,CAACU,QAAQ,cAAA+C,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAc1D,IAAI,cAAA2D,mBAAA,uBAAlBA,mBAAA,CAAoBzD,OAAO,KAAID,GAAG,CAACC,OAAO,CAAC,CAAC;MACtF1I,OAAO,CAACsE,KAAK,CAAC,4BAA4B,EAAEmE,GAAG,CAAC;IACpD,CAAC,SAAS;MACNzC,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ,CAAC;EAED,MAAMoG,mBAAmB,GAAIJ,MAAM,IAAK;IACpC,MAAMK,SAAS,GAAGpG,UAAU,CAACzD,IAAI,CAAC6I,IAAI,IAAIA,IAAI,CAAC3I,EAAE,KAAKsJ,MAAM,CAAC;IAC7D,IAAIK,SAAS,EAAE;MACX/F,gBAAgB,CAAC0F,MAAM,CAAC;MACxBxF,eAAe,CAAC6F,SAAS,CAACZ,UAAU,CAAC;IACzC;EACJ,CAAC;EAED,MAAMa,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,CAACjG,aAAa,IAAI,CAACE,YAAY,EAAE;IAErC,IAAI;MACAP,aAAa,CAAC,IAAI,CAAC;MAEnB,MAAM9H,KAAK,CAAC6M,GAAG,CACXrM,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACoE,oBAAoB,CAAClG,aAAa,CAAC,CAAC,EAC5D;QAAEoF,UAAU,EAAElF;MAAa,CAAC,EAC5B;QAAE8B,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;QAAG;MAAE,CACzD,CAAC;;MAED;MACA,MAAMmB,kBAAkB,GAAG,MAAMxL,KAAK,CAACgK,GAAG,CACtCxJ,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACwB,kBAAkB,CAACxE,WAAW,CAAC,CAAC,EACxD;QAAEkD,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;QAAG;MAAE,CACzD,CAAC;MAED,IAAImB,kBAAkB,CAAClB,IAAI,IAAIkB,kBAAkB,CAAClB,IAAI,CAACA,IAAI,EAAE;QACzDtC,aAAa,CAACwD,kBAAkB,CAAClB,IAAI,CAACA,IAAI,CAAC;MAC/C,CAAC,MAAM,IAAIoB,KAAK,CAACC,OAAO,CAACH,kBAAkB,CAAClB,IAAI,CAAC,EAAE;QAC/CtC,aAAa,CAACwD,kBAAkB,CAAClB,IAAI,CAAC;MAC1C;;MAEA;MACAlC,gBAAgB,CAAC,IAAI,CAAC;MACtBE,eAAe,CAAC,EAAE,CAAC;IACvB,CAAC,CAAC,OAAOiC,GAAG,EAAE;MAAA,IAAA+D,cAAA,EAAAC,mBAAA;MACVvH,QAAQ,CAAC,6BAA6B,IAAI,EAAAsH,cAAA,GAAA/D,GAAG,CAACU,QAAQ,cAAAqD,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAchE,IAAI,cAAAiE,mBAAA,uBAAlBA,mBAAA,CAAoB/D,OAAO,KAAID,GAAG,CAACC,OAAO,CAAC,CAAC;MACtF1I,OAAO,CAACsE,KAAK,CAAC,4BAA4B,EAAEmE,GAAG,CAAC;IACpD,CAAC,SAAS;MACNzC,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ,CAAC;;EAED;EACA,MAAM0G,yBAAyB,GAAGA,CAAA,KAAM;IACpCpG,gBAAgB,CAAC,IAAI,CAAC;IACtBE,eAAe,CAAC,EAAE,CAAC;EACvB,CAAC;EAED,MAAMiD,aAAa,GAAI3B,UAAU,IAAK;IAClC,IAAI,CAACA,UAAU,IAAIA,UAAU,CAACrG,MAAM,KAAK,CAAC,IAAI,CAAC+D,MAAM,CAACjE,OAAO,EAAE;;IAE/D;IACA,MAAMoL,aAAa,GAAG7E,UAAU,CAAChH,GAAG,CAACqB,SAAS,IAAI;MAC9C,MAAMqH,IAAI,GAAGrI,KAAK,CAACqB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKP,SAAS,CAACQ,WAAW,CAAC;MAC5D,IAAI,CAAC6G,IAAI,EAAE,OAAO,IAAI;MAEtB,MAAM5G,GAAG,GAAGC,UAAU,CAAC2G,IAAI,CAAC1G,QAAQ,CAAC;MACrC,MAAMC,GAAG,GAAGF,UAAU,CAAC2G,IAAI,CAACxG,SAAS,CAAC;MACtC,IAAIC,KAAK,CAACL,GAAG,CAAC,IAAIK,KAAK,CAACF,GAAG,CAAC,EAAE,OAAO,IAAI;MAEzC,OAAO,CAACH,GAAG,EAAEG,GAAG,CAAC;IACrB,CAAC,CAAC,CAAC4H,MAAM,CAACiC,OAAO,CAAC;IAElB,IAAID,aAAa,CAAClL,MAAM,KAAK,CAAC,EAAE;IAEhC,IAAIkL,aAAa,CAAClL,MAAM,KAAK,CAAC,EAAE;MAC5B;MACA6D,YAAY,CAACqH,aAAa,CAAC,CAAC,CAAC,CAAC;MAC9BpH,OAAO,CAAC,EAAE,CAAC;IACf,CAAC,MAAM;MACH;MACA,MAAMsH,MAAM,GAAGvD,IAAI,CAACwD,GAAG,CAAC,GAAGH,aAAa,CAAC7L,GAAG,CAACiM,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5D,MAAMC,MAAM,GAAG1D,IAAI,CAACC,GAAG,CAAC,GAAGoD,aAAa,CAAC7L,GAAG,CAACiM,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5D,MAAME,MAAM,GAAG3D,IAAI,CAACwD,GAAG,CAAC,GAAGH,aAAa,CAAC7L,GAAG,CAACiM,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5D,MAAMG,MAAM,GAAG5D,IAAI,CAACC,GAAG,CAAC,GAAGoD,aAAa,CAAC7L,GAAG,CAACiM,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE5D;MACAzH,YAAY,CAAC,CACTuH,MAAM,GAAG,CAACG,MAAM,GAAGH,MAAM,IAAI,CAAC,EAC9BI,MAAM,GAAG,CAACC,MAAM,GAAGD,MAAM,IAAI,CAAC,CACjC,CAAC;;MAEF;MACA,MAAME,OAAO,GAAGH,MAAM,GAAGH,MAAM;MAC/B,MAAMO,OAAO,GAAGF,MAAM,GAAGD,MAAM;MAC/B,MAAMI,OAAO,GAAG/D,IAAI,CAACC,GAAG,CAAC4D,OAAO,EAAEC,OAAO,CAAC;;MAE1C;MACA,IAAIC,OAAO,GAAG,KAAK,EAAE9H,OAAO,CAAC,EAAE,CAAC,CAAC,KAC5B,IAAI8H,OAAO,GAAG,IAAI,EAAE9H,OAAO,CAAC,EAAE,CAAC,CAAC,KAChC,IAAI8H,OAAO,GAAG,IAAI,EAAE9H,OAAO,CAAC,EAAE,CAAC,CAAC,KAChCA,OAAO,CAAC,EAAE,CAAC;IACpB;EACJ,CAAC;EAED,MAAM+H,WAAW,GAAIvD,MAAM,IAAK;IAC5B,OAAO5I,KAAK,CAACqB,IAAI,CAACgH,IAAI,IAAIA,IAAI,CAAC9G,EAAE,KAAKqH,MAAM,CAAC;EACjD,CAAC;EAED,MAAMwD,UAAU,GAAIrE,KAAK,IAAK;IAC1B,OAAOrE,KAAK,CAACrC,IAAI,CAACgL,GAAG,IAAIA,GAAG,CAAC9K,EAAE,KAAKwG,KAAK,CAAC;EAC9C,CAAC;;EAED;EACA;EACA,MAAMuE,WAAW,GAAGA,CAAA,KAAM;IACtB;IACA,OAAOjP,CAAC,CAACkP,IAAI,CAAC;MACVrO,OAAO,EAAE,oGAAoG;MAC7GC,SAAS,EAAE,+EAA+E;MAC1FqO,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;MAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;MACpBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;MACrBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE;IACvB,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMC,kBAAkB,GAAIxD,OAAO,IAAK;IACpC,MAAMpI,SAAS,GAAGwE,QAAQ,CAACxF,KAAK,CAACqB,IAAI,CAACgH,IAAI,IAAIA,IAAI,CAAC9G,EAAE,KAAK6H,OAAO,CAAC;IAClE,IAAIpI,SAAS,EAAE;MACXiE,gBAAgB,CAACmE,OAAO,CAAC;MACzBjD,kBAAkB,CAAC,IAAI,CAAC;MACxBE,eAAe,CAAC;QACZC,OAAO,EAAEtF,SAAS,CAACQ,WAAW;QAC9BT,UAAU,EAAEC,SAAS,CAACD,UAAU;QAChC8E,eAAe,EAAE7E,SAAS,CAAC6E,eAAe,IAAI;MAClD,CAAC,CAAC;IACN;EACJ,CAAC;;EAED;EACA,MAAMgH,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAAC7H,aAAa,EAAE;IAEpB,IAAI;MACAH,aAAa,CAAC,IAAI,CAAC;;MAEnB;MACA,MAAM9H,KAAK,CAAC6M,GAAG,CACXrM,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAAC6C,gBAAgB,CAAC7E,aAAa,CAAC,CAAC,EACxD;QACIxD,WAAW,EAAE4E,YAAY,CAACE,OAAO;QACjCvF,UAAU,EAAEoJ,QAAQ,CAAC/D,YAAY,CAACrF,UAAU,CAAC;QAC7C8E,eAAe,EAAEnE,UAAU,CAAC0E,YAAY,CAACP,eAAe;MAC5D,CAAC,EACD;QAAEqB,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;QAAG;MAAE,CACzD,CAAC;;MAED;MACA,MAAMY,QAAQ,GAAG,MAAMjL,KAAK,CAACgK,GAAG,CAC5BxJ,SAAS,CAACD,GAAG,CAAC0J,SAAS,CAACiB,cAAc,CAACjE,WAAW,CAAC,CAAC,EACpD;QAAEkD,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAU7D,IAAI,CAAC8D,KAAK;QAAG;MAAE,CACzD,CAAC;MAED,MAAMc,SAAS,GAAGF,QAAQ,CAACX,IAAI;MAC/B5B,WAAW,CAAC;QACRC,MAAM,EAAE1B,WAAW;QACnBhE,KAAK,EAAEkI;MACX,CAAC,CAAC;;MAEF;MACAjD,gBAAgB,CAAC,IAAI,CAAC;MACtBkB,kBAAkB,CAAC,KAAK,CAAC;MACzBE,eAAe,CAAC;QACZC,OAAO,EAAE,EAAE;QACXvF,UAAU,EAAE,EAAE;QACd8E,eAAe,EAAE;MACrB,CAAC,CAAC;;MAEF;MACAyC,aAAa,CAACJ,SAAS,CAAC;IAC5B,CAAC,CAAC,OAAOZ,GAAG,EAAE;MAAA,IAAAwF,cAAA,EAAAC,mBAAA;MACVhJ,QAAQ,CAAC,uBAAuB,IAAI,EAAA+I,cAAA,GAAAxF,GAAG,CAACU,QAAQ,cAAA8E,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAczF,IAAI,cAAA0F,mBAAA,uBAAlBA,mBAAA,CAAoBxF,OAAO,KAAID,GAAG,CAACC,OAAO,CAAC,CAAC;MAChF1I,OAAO,CAACsE,KAAK,CAAC,sBAAsB,EAAEmE,GAAG,CAAC;IAC9C,CAAC,SAAS;MACNzC,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ,CAAC;;EAED;EACA,MAAMmI,oBAAoB,GAAGA,CAAA,KAAM;IAC/B/H,gBAAgB,CAAC,IAAI,CAAC;IACtBkB,kBAAkB,CAAC,KAAK,CAAC;IACzBE,eAAe,CAAC;MACZC,OAAO,EAAE,EAAE;MACXvF,UAAU,EAAE,EAAE;MACd8E,eAAe,EAAE;IACrB,CAAC,CAAC;EACN,CAAC;EAED,IAAIhC,OAAO,IAAI,CAACH,KAAK,CAACpD,MAAM,IAAI,CAACN,KAAK,CAACM,MAAM,EAAE;IAC3C,oBAAO7C,OAAA;MAAAwP,QAAA,EAAK;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC3C;EAEA,oBACI5P,OAAA;IAAK6P,SAAS,EAAC,kBAAkB;IAAAL,QAAA,gBAC7BxP,OAAA;MAAAwP,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACxBlK,KAAK,iBAAI1F,OAAA;MAAK6P,SAAS,EAAC,eAAe;MAAAL,QAAA,EAAE9J;IAAK;MAAA+J,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAEtD5P,OAAA;MAAK6P,SAAS,EAAC,gBAAgB;MAAAL,QAAA,gBAC3BxP,OAAA;QACI6P,SAAS,EAAC,gBAAgB;QAC1BC,OAAO,EAAEA,CAAA,KAAMhJ,iBAAiB,CAAC2E,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAE;QACnDsE,QAAQ,EAAE3J,OAAQ;QAAAoJ,QAAA,EAEjBpJ,OAAO,GAAG,eAAe,GAAG;MAAc;QAAAqJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,eAET5P,OAAA;QAAQ8P,OAAO,EAAEA,CAAA,KAAM5I,eAAe,CAAC,CAACD,YAAY,CAAE;QAAAuI,QAAA,EACjDvI,YAAY,GAAG,iBAAiB,GAAG;MAAiB;QAAAwI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,EAEL3I,YAAY,iBACTjH,OAAA;MAAK6P,SAAS,EAAC,YAAY;MAACG,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,eAAe,EAAE,SAAS;QAAEC,MAAM,EAAE,QAAQ;QAAEC,YAAY,EAAE;MAAM,CAAE;MAAAZ,QAAA,gBACtHxP,OAAA;QAAAwP,QAAA,EAAI;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChC5P,OAAA;QAAAwP,QAAA,GAAG,gBAAc,EAACvJ,KAAK,CAACpD,MAAM;MAAA;QAAA4M,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnC5P,OAAA;QAAAwP,QAAA,GAAG,gBAAc,EAACjN,KAAK,CAACM,MAAM;MAAA;QAAA4M,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnC5P,OAAA;QAAAwP,QAAA,GAAG,gBAAc,EAACjJ,WAAW,IAAAR,WAAA,GAAG4I,UAAU,CAACpI,WAAW,CAAC,cAAAR,WAAA,uBAAvBA,WAAA,CAAyBgE,IAAI,GAAG,MAAM;MAAA;QAAA0F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3E5P,OAAA;QAAAwP,QAAA,GAAG,eAAa,EAACzH,QAAQ,CAACxF,KAAK,CAACM,MAAM;MAAA;QAAA4M,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3C5P,OAAA;QAAAwP,QAAA,GAAG,cAAY,EAAC/I,SAAS,CAAC4J,IAAI,CAAC,IAAI,CAAC;MAAA;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzC5P,OAAA;QAAQ8P,OAAO,EAAEA,CAAA,KAAM;UACnBpM,MAAM,CAACqF,gBAAgB,CAACC,QAAQ,CAAC,CAAC;UAClC5H,OAAO,CAAC0B,GAAG,CAAC,mBAAmB,EAAEiF,QAAQ,CAAC;QAC9C,CAAE;QAAAyH,QAAA,EAAC;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CACR,eAED5P,OAAA;MAAK6P,SAAS,EAAC,0BAA0B;MAAAL,QAAA,gBACrCxP,OAAA;QAAK6P,SAAS,EAAC,cAAc;QAAAL,QAAA,gBACzBxP,OAAA;UAAAwP,QAAA,EAAI;QAA0B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnC5P,OAAA;UAAK6P,SAAS,EAAC,UAAU;UAAAL,QAAA,EACpBvJ,KAAK,CAAC/D,GAAG,CAAC0M,GAAG,iBACV5O,OAAA;YAEI6P,SAAS,EAAEtJ,WAAW,KAAKqI,GAAG,CAAC9K,EAAE,GAAG,UAAU,GAAG,EAAG;YACpDgM,OAAO,EAAEA,CAAA,KAAMzF,eAAe,CAACuE,GAAG,CAAC9K,EAAE,CAAE;YAAA0L,QAAA,EAEtCZ,GAAG,CAAC7E;UAAI,GAJJ6E,GAAG,CAAC9K,EAAE;YAAA2L,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKP,CACX;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,EAELrJ,WAAW,iBACRvG,OAAA;QAAK6P,SAAS,EAAC,cAAc;QAAAL,QAAA,gBACzBxP,OAAA;UAAAwP,QAAA,GAAI,YAAU,GAAAxJ,YAAA,GAAC2I,UAAU,CAACpI,WAAW,CAAC,cAAAP,YAAA,uBAAvBA,YAAA,CAAyB+D,IAAI;QAAA;UAAA0F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAGlD5P,OAAA;UAAK6P,SAAS,EAAC,qBAAqB;UAAAL,QAAA,gBAChCxP,OAAA;YAAAwP,QAAA,EAAI;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAExB5P,OAAA;YAAO6P,SAAS,EAAC,mBAAmB;YAAAL,QAAA,gBAChCxP,OAAA;cAAAwP,QAAA,eACIxP,OAAA;gBAAAwP,QAAA,gBACIxP,OAAA;kBAAAwP,QAAA,EAAI;gBAAU;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACnB5P,OAAA;kBAAAwP,QAAA,EAAI;gBAAU;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACnB5P,OAAA;kBAAAwP,QAAA,EAAI;gBAAO;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAChB;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,eACR5P,OAAA;cAAAwP,QAAA,EACKnI,UAAU,CAACxE,MAAM,KAAK,CAAC,gBACpB7C,OAAA;gBAAAwP,QAAA,eACIxP,OAAA;kBAAIsQ,OAAO,EAAC,GAAG;kBAAAd,QAAA,EAAC;gBAA2B;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAChD,CAAC,GAELvI,UAAU,CAACnF,GAAG,CAACuK,IAAI,iBACfzM,OAAA;gBAAAwP,QAAA,gBACIxP,OAAA;kBAAAwP,QAAA,EAAK/C,IAAI,CAACE;gBAAM;kBAAA8C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eACtB5P,OAAA;kBAAAwP,QAAA,EACK/H,aAAa,KAAKgF,IAAI,CAAC3I,EAAE,gBACtB9D,OAAA;oBACIuQ,IAAI,EAAC,MAAM;oBACXC,KAAK,EAAE7I,YAAa;oBACpB8I,QAAQ,EAAGtP,CAAC,IAAKyG,eAAe,CAACzG,CAAC,CAACuP,MAAM,CAACF,KAAK,CAAE;oBACjDG,QAAQ;kBAAA;oBAAAlB,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACX,CAAC,GAEFnD,IAAI,CAACI;gBACR;kBAAA4C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACD,CAAC,eACL5P,OAAA;kBAAAwP,QAAA,EACK/H,aAAa,KAAKgF,IAAI,CAAC3I,EAAE,gBACtB9D,OAAA,CAAAE,SAAA;oBAAAsP,QAAA,gBACIxP,OAAA;sBAAQ8P,OAAO,EAAEpC,mBAAoB;sBAAA8B,QAAA,EAAC;oBAAI;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC,eACnD5P,OAAA;sBAAQ8P,OAAO,EAAEhC,yBAA0B;sBAAA0B,QAAA,EAAC;oBAAM;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC;kBAAA,eAC7D,CAAC,gBAEH5P,OAAA,CAAAE,SAAA;oBAAAsP,QAAA,gBACIxP,OAAA;sBAAQ8P,OAAO,EAAEA,CAAA,KAAMtC,mBAAmB,CAACf,IAAI,CAAC3I,EAAE,CAAE;sBAAA0L,QAAA,EAAC;oBAAI;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC,eAClE5P,OAAA;sBACI8P,OAAO,EAAEA,CAAA,KAAM3C,qBAAqB,CAACV,IAAI,CAAC3I,EAAE,CAAE;sBAC9C+L,SAAS,EAAC,oBAAoB;sBAAAL,QAAA,EACjC;oBAED;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC;kBAAA,eACX;gBACL;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACD,CAAC;cAAA,GA/BAnD,IAAI,CAAC3I,EAAE;gBAAA2L,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAgCZ,CACP;YACJ;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,EAEP/H,iBAAiB,gBACd7H,OAAA;YAAK6P,SAAS,EAAC,qBAAqB;YAAAL,QAAA,gBAChCxP,OAAA;cAAAwP,QAAA,EAAI;YAAkB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC3B5P,OAAA;cAAK6P,SAAS,EAAC,YAAY;cAAAL,QAAA,gBACvBxP,OAAA;gBACIuQ,IAAI,EAAC,MAAM;gBACXC,KAAK,EAAE7I,YAAa;gBACpB8I,QAAQ,EAAGtP,CAAC,IAAKyG,eAAe,CAACzG,CAAC,CAACuP,MAAM,CAACF,KAAK,CAAE;gBACjDI,WAAW,EAAC,OAAO;gBACnBD,QAAQ;cAAA;gBAAAlB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACX,CAAC,eACF5P,OAAA;gBAAK6P,SAAS,EAAC,cAAc;gBAAAL,QAAA,gBACzBxP,OAAA;kBAAQ8P,OAAO,EAAExD,kBAAmB;kBAAAkD,QAAA,EAAC;gBAAI;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eAClD5P,OAAA;kBAAQ8P,OAAO,EAAEA,CAAA,KAAM;oBACnBhI,oBAAoB,CAAC,KAAK,CAAC;oBAC3BF,eAAe,CAAC,EAAE,CAAC;kBACvB,CAAE;kBAAA4H,QAAA,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjB,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,gBAEN5P,OAAA;YACI6P,SAAS,EAAC,uBAAuB;YACjCC,OAAO,EAAEA,CAAA,KAAMhI,oBAAoB,CAAC,IAAI,CAAE;YAAA0H,QAAA,EAC7C;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACX;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eAEN5P,OAAA;UAAAwP,QAAA,EAAI;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACnB7H,QAAQ,CAACxF,KAAK,CAACM,MAAM,KAAK,CAAC,gBACxB7C,OAAA;UAAAwP,QAAA,EAAG;QAAiD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,gBAExD5P,OAAA;UAAO6P,SAAS,EAAC,mBAAmB;UAAAL,QAAA,gBAChCxP,OAAA;YAAAwP,QAAA,eACIxP,OAAA;cAAAwP,QAAA,gBACIxP,OAAA;gBAAAwP,QAAA,EAAI;cAAK;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACd5P,OAAA;gBAAAwP,QAAA,EAAI;cAAS;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAClB5P,OAAA;gBAAAwP,QAAA,EAAI;cAAyB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAClC5P,OAAA;gBAAAwP,QAAA,EAAI;cAAO;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACR5P,OAAA;YAAAwP,QAAA,EACK,CAAC,GAAGzH,QAAQ,CAACxF,KAAK,CAAC,CACfY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,UAAU,GAAGD,CAAC,CAACC,UAAU,CAAC,CAC3CpB,GAAG,CAACqB,SAAS,IAAI;cACd,MAAMqH,IAAI,GAAG8D,WAAW,CAACnL,SAAS,CAACQ,WAAW,CAAC;cAC/C,oBACI/D,OAAA;gBAAAwP,QAAA,gBACIxP,OAAA;kBAAAwP,QAAA,EAAKjM,SAAS,CAACD;gBAAU;kBAAAmM,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eAC/B5P,OAAA;kBAAAwP,QAAA,EAAK5E,IAAI,GAAGA,IAAI,CAACb,IAAI,GAAG;gBAAc;kBAAA0F,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eAC5C5P,OAAA;kBAAAwP,QAAA,EACKjI,aAAa,KAAKhE,SAAS,CAACO,EAAE,gBAC3B9D,OAAA;oBACIuQ,IAAI,EAAC,QAAQ;oBACbrC,GAAG,EAAC,GAAG;oBACP2C,IAAI,EAAC,KAAK;oBACVL,KAAK,EAAEtI,YAAY,CAACE,eAAgB;oBACpCqI,QAAQ,EAAGtP,CAAC,IAAKgH,eAAe,CAAC;sBAC7B,GAAGD,YAAY;sBACfE,eAAe,EAAEjH,CAAC,CAACuP,MAAM,CAACF;oBAC9B,CAAC,CAAE;oBACHG,QAAQ;kBAAA;oBAAAlB,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACX,CAAC,gBAEF5P,OAAA;oBAAAwP,QAAA,EAAOjM,SAAS,CAAC6E,eAAe,IAAI;kBAAC;oBAAAqH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAO;gBAC/C;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACD,CAAC,eACL5P,OAAA;kBAAAwP,QAAA,EACKjI,aAAa,KAAKhE,SAAS,CAACO,EAAE,gBAC3B9D,OAAA,CAAAE,SAAA;oBAAAsP,QAAA,gBACIxP,OAAA;sBAAQ8P,OAAO,EAAE5D,kBAAmB;sBAAAsD,QAAA,EAAC;oBAAI;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC,eAClD5P,OAAA;sBAAQ8P,OAAO,EAAEzD,wBAAyB;sBAAAmD,QAAA,EAAC;oBAAM;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC;kBAAA,eAC5D,CAAC,gBAEH5P,OAAA,CAAAE,SAAA;oBAAAsP,QAAA,gBACIxP,OAAA;sBAAQ8P,OAAO,EAAEA,CAAA,KAAM7D,kBAAkB,CAAC1I,SAAS,CAACO,EAAE,CAAE;sBAAA0L,QAAA,EAAC;oBAEzD;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC,eACT5P,OAAA;sBAAQ8P,OAAO,EAAEA,CAAA,KAAMpE,gBAAgB,CAACnI,SAAS,CAACO,EAAE,CAAE;sBAAA0L,QAAA,EAAC;oBAEvD;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC;kBAAA,eACX;gBACL;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACD,CAAC;cAAA,GApCA,GAAGrM,SAAS,CAACO,EAAE,IAAI+C,cAAc,EAAE;gBAAA4I,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAqCxC,CAAC;YAEb,CAAC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CACV,EAGAvH,YAAY,gBACTrI,OAAA;UAAK6P,SAAS,EAAC,eAAe;UAAAL,QAAA,gBAC1BxP,OAAA;YAAAwP,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrB5P,OAAA;YAAK6P,SAAS,EAAC,YAAY;YAAAL,QAAA,gBACvBxP,OAAA;cACIwQ,KAAK,EAAE7H,YAAY,CAACE,OAAQ;cAC5B4H,QAAQ,EAAGtP,CAAC,IAAKyH,eAAe,CAAC;gBAC7B,GAAGD,YAAY;gBACfE,OAAO,EAAE1H,CAAC,CAACuP,MAAM,CAACF;cACtB,CAAC,CAAE;cACHG,QAAQ;cAAAnB,QAAA,gBAERxP,OAAA;gBAAQwQ,KAAK,EAAC,EAAE;gBAAAhB,QAAA,EAAC;cAAW;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,EACpCrN,KAAK,CAACL,GAAG,CAAC0I,IAAI,iBACX5K,OAAA;gBAAsBwQ,KAAK,EAAE5F,IAAI,CAAC9G,EAAG;gBAAA0L,QAAA,EAChC5E,IAAI,CAACb;cAAI,GADDa,IAAI,CAAC9G,EAAE;gBAAA2L,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEZ,CACX,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC,eACT5P,OAAA;cAAK6P,SAAS,EAAC,cAAc;cAAAL,QAAA,gBACzBxP,OAAA;gBAAQ8P,OAAO,EAAEA,CAAA,KAAM5E,aAAa,CAACvC,YAAY,CAACE,OAAO,CAAE;gBAAA2G,QAAA,EAAC;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACxE5P,OAAA;gBAAQ8P,OAAO,EAAEA,CAAA,KAAMxH,eAAe,CAAC,KAAK,CAAE;gBAAAkH,QAAA,EAAC;cAAM;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7D,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,gBAEN5P,OAAA;UACI6P,SAAS,EAAC,iBAAiB;UAC3BC,OAAO,EAAEA,CAAA,KAAMxH,eAAe,CAAC,IAAI,CAAE;UAAAkH,QAAA,EACxC;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACX,eAGD5P,OAAA,CAACT,YAAY;UACTwC,MAAM,EAAE0E,SAAU;UAClBzE,IAAI,EAAEA,IAAK;UACXgO,KAAK,EAAE;YAAEc,MAAM,EAAE,OAAO;YAAEC,KAAK,EAAE;UAAO,CAAE;UAC1CC,WAAW,EAAEC,WAAW,IAAIrK,MAAM,CAACjE,OAAO,GAAGsO,WAAY;UAAAzB,QAAA,gBAEzDxP,OAAA,CAACR,SAAS;YACN0R,GAAG,EAAC,oDAAoD;YACxDC,WAAW,EAAC;UAAyF;YAAA1B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxG,CAAC,eACF5P,OAAA,CAAC8B,UAAU;YAACC,MAAM,EAAE0E,SAAU;YAACzE,IAAI,EAAEA;UAAK;YAAAyN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC7C5P,OAAA,CAACsC,eAAe;YAACC,KAAK,EAAEwF,QAAQ,CAACxF;UAAM;YAAAkN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,EAEzCrN,KAAK,CAACL,GAAG,CAAC0I,IAAI,IAAI;YACf,MAAMwG,WAAW,GAAGrJ,QAAQ,CAACxF,KAAK,CAACwJ,MAAM,CAAClI,CAAC,IAAIA,CAAC,CAACE,WAAW,KAAK6G,IAAI,CAAC9G,EAAE,CAAC;YACzE,IAAIsN,WAAW,CAACvO,MAAM,GAAG,CAAC,EAAE;cACxB,oBACI7C,OAAA,CAACP,MAAM;gBAAe4R,QAAQ,EAAE,CAACzG,IAAI,CAAC1G,QAAQ,EAAE0G,IAAI,CAACxG,SAAS,CAAE;gBAAC0K,IAAI,EAAED,WAAW,CAAC,CAAE;gBAAAW,QAAA,eACjFxP,OAAA,CAACN,KAAK;kBAAA8P,QAAA,eACFxP,OAAA;oBAAAwP,QAAA,gBACIxP,OAAA;sBAAAwP,QAAA,EAAS5E,IAAI,CAACb;oBAAI;sBAAA0F,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAS,CAAC,eAC5B5P,OAAA;sBAAAyP,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAK,CAAC,EACLwB,WAAW,CAAClP,GAAG,CAACkB,CAAC,IAAI,GAAGA,CAAC,CAACgF,eAAe,IAAI,CAAC,MAAM,CAAC,CAACiI,IAAI,CAAC,IAAI,CAAC;kBAAA;oBAAAZ,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAChE;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH;cAAC,GAPChF,IAAI,CAAC9G,EAAE;gBAAA2L,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAQZ,CAAC;YAEjB;YACA,OAAO,IAAI;UACf,CAAC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACQ,CAAC,EAGdrJ,WAAW,iBACRvG,OAAA;UAAK6P,SAAS,EAAC,cAAc;UAACG,KAAK,EAAE;YAAEsB,SAAS,EAAE,QAAQ;YAAEC,SAAS,EAAE;UAAO,CAAE;UAAA/B,QAAA,eAC5ExP,OAAA;YAAAwP,QAAA,gBACIxP,OAAA;cAAAwP,QAAA,EAAQ;YAAa;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAAC7H,QAAQ,CAACxF,KAAK,CAACM,MAAM,GAAG,CAAC,GACnD,wCAAwC,GACxC,cAAckF,QAAQ,CAACxF,KAAK,CAACM,MAAM,cAAcwE,UAAU,CAACxE,MAAM,4BAA4B;UAAA;YAAA4M,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC9J,GAAA,CAz7BQF,eAAe;AAAA4L,GAAA,GAAf5L,eAAe;AA27BxB,eAAeA,eAAe;AAAC,IAAAvD,EAAA,EAAAsD,GAAA,EAAA6L,GAAA;AAAAC,YAAA,CAAApP,EAAA;AAAAoP,YAAA,CAAA9L,GAAA;AAAA8L,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}