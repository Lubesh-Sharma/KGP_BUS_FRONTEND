{"ast":null,"code":"var _jsxFileName = \"/home/lubesh/Desktop/DBMS/KGP_Bus/frontend/src/components/admin/RouteManagement.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-routing-machine';\nimport 'leaflet-routing-machine/dist/leaflet-routing-machine.css';\nimport '../../css/RouteManagement.css';\nimport '../../css/AdminStyles.css';\nimport api, { getApiUrl } from '../../utils/api2.js';\n\n// Fix for default marker icon in Leaflet with React\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',\n  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',\n  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png'\n});\nfunction configureRoutingMachine() {\n  if (typeof L !== 'undefined' && L.Routing) {\n    // Modify the global routing options\n    L.Routing.Itinerary.prototype.options.createGeocoderPane = false;\n    L.Routing.timeout = 30 * 1000; // 30 seconds timeout\n\n    // Override the error handling globally\n    if (L.Routing.ErrorControl && L.Routing.ErrorControl.prototype) {\n      L.Routing.ErrorControl.prototype._routingErrorHandler = function (e) {\n        console.warn(\"Handled routing error:\", e);\n        // No UI updates or errors thrown\n      };\n    }\n\n    // Fix issues with the layer removal\n    if (L.Routing.Line && L.Routing.Line.prototype) {\n      const originalClearLines = L.Routing.Line.prototype._clearLines;\n      L.Routing.Line.prototype._clearLines = function () {\n        try {\n          // Safety check before calling the original function\n          if (this._map && this._route && this._route._layers) {\n            originalClearLines.call(this);\n          }\n        } catch (e) {\n          console.warn(\"Protected from _clearLines error:\", e);\n          // Manual cleanup as fallback\n          if (this._map && this._route) {\n            try {\n              this._map.removeLayer(this._route);\n            } catch (e) {\n              console.warn(\"Also failed with manual cleanup:\", e);\n            }\n          }\n        }\n      };\n    }\n  }\n}\n\n// Component to recenter map when needed\nfunction MapUpdater({\n  center,\n  zoom\n}) {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (center) {\n      map.setView(center, zoom || map.getZoom());\n    }\n  }, [center, zoom, map]);\n  return null;\n}\n\n// Custom component to create routes that follow roads\n_s(MapUpdater, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapUpdater;\nfunction RoadBasedRoutes({\n  stops\n}) {\n  _s2();\n  const map = useMap();\n  const controlRef = useRef(null);\n\n  // A safer cleanup function we can call anytime\n  const cleanup = useCallback(() => {\n    if (controlRef.current) {\n      try {\n        // Always remove from map first\n        if (map) map.removeControl(controlRef.current);\n      } catch (e) {\n        console.warn(\"Error removing control:\", e);\n      }\n      controlRef.current = null;\n    }\n  }, [map]);\n\n  // Set up once - clean up on unmount\n  useEffect(() => {\n    return cleanup;\n  }, [cleanup]);\n\n  // Handle route creation/updates\n  useEffect(() => {\n    if (!map || !stops) {\n      return;\n    }\n    if (stops.length < 2) {\n      console.log(\"Not enough conditions for route drawing:\", {\n        hasMap: !!map,\n        stopsCount: stops.length\n      });\n      return;\n    }\n    cleanup();\n    const waypoints = [];\n    const orderedStops = [...stops].sort((a, b) => a.stop_order - b.stop_order);\n    console.log(\"Drawing routes for ordered stops:\", orderedStops);\n    for (const routeStop of orderedStops) {\n      const lat = parseFloat(routeStop.latitude);\n      const lng = parseFloat(routeStop.longitude);\n      if (!isNaN(lat) && !isNaN(lng)) {\n        waypoints.push(L.latLng(lat, lng));\n      }\n    }\n    if (waypoints.length < 2) {\n      console.log(\"Not enough valid waypoints for route\");\n      return;\n    }\n\n    // Create the OSRM routing control\n    try {\n      const control = L.Routing.control({\n        waypoints,\n        routeWhileDragging: false,\n        showAlternatives: false,\n        fitSelectedRoutes: false,\n        show: false,\n        lineOptions: {\n          styles: [{\n            color: '#3388ff',\n            opacity: 0.7,\n            weight: 5\n          }],\n          extendToWaypoints: true,\n          missingRouteTolerance: 10\n        },\n        createMarker: () => null,\n        // No markers from routing\n        addWaypoints: false,\n        serviceUrl: 'https://router.project-osrm.org/route/v1'\n      });\n\n      // Handle errors silently\n      control.on('routingerror', function (e) {\n        console.warn(\"Routing error:\", e);\n      });\n\n      // Store the reference\n      controlRef.current = control;\n\n      // Add the control to the map\n      setTimeout(() => {\n        if (map && controlRef.current) {\n          try {\n            controlRef.current.addTo(map);\n          } catch (e) {\n            console.warn(\"Error adding route control:\", e);\n          }\n        }\n      }, 200);\n    } catch (error) {\n      console.error(\"Error creating routing control:\", error);\n    }\n  }, [map, stops, cleanup]);\n  return null;\n}\n_s2(RoadBasedRoutes, \"F1aahUzq/yaim2/7IMfKxqW1b0I=\", false, function () {\n  return [useMap];\n});\n_c2 = RoadBasedRoutes;\nfunction RouteManagement({\n  user\n}) {\n  _s3();\n  var _getBusById, _getBusById2;\n  const [buses, setBuses] = useState([]);\n  const [stops, setStops] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [selectedBus, setSelectedBus] = useState(null);\n  const [mapCenter, setMapCenter] = useState([22.3190, 87.3091]); // IIT KGP coordinates\n  const [zoom, setZoom] = useState(15);\n  const mapRef = useRef(null);\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n  const [routes, setRoutes] = useState([]);\n  const [showMapDebug, setShowMapDebug] = useState(false); // State for debugging\n  const [mapLoading, setMapLoading] = useState(false); // New state for map loading\n  const [startTimes, setStartTimes] = useState([]); // New state for bus start times\n  const [editingStopId, setEditingStopId] = useState(null); // State to track which stop is being edited\n  const [editingTimeId, setEditingTimeId] = useState(null); // State to track which start time is being edited\n  const [newStartTime, setNewStartTime] = useState(''); // State for new start time input\n  const [isAddingStartTime, setIsAddingStartTime] = useState(false); // State to track if adding new start time\n\n  const [formData, setFormData] = useState({\n    bus_id: '',\n    stops: []\n  });\n\n  // State for editing individual stop time\n  const [stopTimeData, setStopTimeData] = useState({\n    time_from_start: ''\n  });\n  const [isAddingStop, setIsAddingStop] = useState(false);\n  const [currentStopOrder, setCurrentStopOrder] = useState(1);\n\n  // Add state for edit mode for stop name\n  const [editingStopName, setEditingStopName] = useState(false);\n  const [editFormData, setEditFormData] = useState({\n    stop_id: '',\n    stop_order: '',\n    time_from_start: ''\n  });\n  useEffect(() => {\n    // Initialize window-level stopsData and configuration flag\n    window.enableOSRM = true; // Always use OSRM\n    configureRoutingMachine();\n\n    // Add a global diagnostics object to help with debugging\n    window.routeDiagnostics = {\n      stops: [],\n      waypoints: [],\n      logState: () => {\n        var _window$stopsData;\n        console.log(\"Current Map State:\", {\n          stops: ((_window$stopsData = window.stopsData) === null || _window$stopsData === void 0 ? void 0 : _window$stopsData.length) || 0,\n          selectedBus,\n          routeStops: formData.stops.length,\n          mapInitialized: !!mapRef.current\n        });\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError('');\n\n        // Fetch buses\n        try {\n          const busesResponse = await axios.get(getApiUrl(api.endpoints.adminBuses), {\n            headers: {\n              Authorization: `Bearer ${user.token}`\n            },\n            timeout: 10000\n          });\n          setBuses(busesResponse.data);\n          console.log(\"Buses loaded for routes:\", busesResponse.data.length);\n        } catch (err) {\n          setError('Failed to fetch buses: ' + err.message);\n          console.error(\"Error fetching buses for routes:\", err);\n          setBuses([{\n            id: 'mock1',\n            name: 'Demo Bus 1'\n          }]); // Fallback data\n        }\n\n        // Fetch stops\n        try {\n          const stopsResponse = await axios.get(getApiUrl(api.endpoints.adminStops), {\n            headers: {\n              Authorization: `Bearer ${user.token}`\n            },\n            timeout: 10000\n          });\n          setStops(stopsResponse.data);\n          console.log(\"Stops loaded for routes:\", stopsResponse.data.length);\n        } catch (err) {\n          setError('Failed to fetch stops: ' + err.message);\n          console.error(\"Error fetching stops for routes:\", err);\n          setStops([{\n            id: 'mock1',\n            name: 'Demo Stop',\n            latitude: 22.3190,\n            longitude: 87.3091\n          }]); // Fallback data\n        }\n\n        // Fetch routes and update your state\n        try {\n          const routesResponse = await axios.get(getApiUrl(api.endpoints.adminRoutes), {\n            headers: {\n              Authorization: `Bearer ${user.token}`\n            },\n            timeout: 10000\n          });\n          // Using the fetched routes data\n          const fetchedRoutes = routesResponse.data;\n          setRoutes(fetchedRoutes);\n          console.log(\"Routes loaded:\", fetchedRoutes.length);\n        } catch (err) {\n          setError('Failed to fetch routes: ' + err.message);\n          console.error(\"Error fetching routes:\", err);\n          // Using default empty array for routes\n          setRoutes([]);\n        }\n      } catch (err) {\n        setError('Error fetching data: ' + err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [user.token, refreshTrigger]);\n  useEffect(() => {\n    if (stops && stops.length > 0) {\n      window.stopsData = stops;\n    }\n  }, [stops]);\n  const handleBusSelect = async busId => {\n    try {\n      setSelectedBus(busId);\n      setLoading(true);\n      setMapLoading(true);\n      setError('');\n\n      // First fetch the stops to ensure we have the latest data\n      try {\n        const stopsResponse = await axios.get(getApiUrl(api.endpoints.adminStops), {\n          headers: {\n            Authorization: `Bearer ${user.token}`\n          }\n        });\n\n        // Ensure stops are properly formatted with string IDs\n        const formattedStops = stopsResponse.data.map(stop => ({\n          ...stop,\n          id: stop.id.toString()\n        }));\n        setStops(formattedStops);\n        window.stopsData = formattedStops;\n        console.log(\"Updated stops data:\", formattedStops);\n      } catch (err) {\n        console.error(\"Error refreshing stops data:\", err);\n        setError('Error loading bus stops. Some stops might not display correctly.');\n      }\n      try {\n        // Fetch bus routes\n        const response = await axios.get(getApiUrl(api.endpoints.adminRouteById(busId)), {\n          headers: {\n            Authorization: `Bearer ${user.token}`\n          }\n        });\n\n        // Ensure route data is properly formatted with string IDs\n        const formattedRoutes = response.data.map(route => ({\n          ...route,\n          bus_stop_id: route.bus_stop_id.toString(),\n          id: route.id.toString()\n        }));\n        console.log('Formatted routes for bus:', formattedRoutes);\n\n        // Verify all stops exist before setting state\n        const missingStops = formattedRoutes.filter(route => !stops.some(stop => stop.id.toString() === route.bus_stop_id.toString()));\n        if (missingStops.length > 0) {\n          console.warn('Missing stops for routes:', missingStops);\n          setError('Some bus stops are missing. Please refresh the page or contact administrator.');\n        }\n        setFormData({\n          bus_id: busId,\n          stops: formattedRoutes\n        });\n\n        // Update current stop order\n        const maxOrder = Math.max(...formattedRoutes.map(stop => stop.stop_order), 0);\n        setCurrentStopOrder(maxOrder + 1);\n\n        // Update map if we have valid routes\n        if (formattedRoutes.length > 0) {\n          fitRouteOnMap(formattedRoutes);\n        }\n\n        // Fetch start times for this bus\n        try {\n          console.log(\"Fetching start times for bus:\", busId);\n          const startTimesUrl = getApiUrl(api.endpoints.adminBusStartTimes(busId));\n          console.log(\"Start times URL:\", startTimesUrl);\n          const startTimesResponse = await axios.get(startTimesUrl, {\n            headers: {\n              Authorization: `Bearer ${user.token}`\n            }\n          });\n          console.log(\"Start times response:\", startTimesResponse.data);\n          if (startTimesResponse.data && Array.isArray(startTimesResponse.data)) {\n            setStartTimes(startTimesResponse.data);\n          } else if (startTimesResponse.data && Array.isArray(startTimesResponse.data.data)) {\n            setStartTimes(startTimesResponse.data.data);\n          } else {\n            console.warn(\"Unexpected format for start times:\", startTimesResponse.data);\n            setStartTimes([]);\n          }\n        } catch (err) {\n          var _err$response, _err$response$data;\n          console.error(\"Error fetching start times:\", err);\n          setError('Error fetching start times: ' + (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message));\n          setStartTimes([]);\n        }\n\n        // Set a timer to ensure map loading state shows for at least a moment\n        setTimeout(() => {\n          setMapLoading(false);\n        }, 1000);\n      } catch (err) {\n        setError('Error fetching route data: ' + err.message);\n        console.error(\"Error fetching routes for bus:\", err);\n        setMapLoading(false); // End map loading on error\n      }\n    } catch (err) {\n      setError('Error preparing bus route view: ' + err.message);\n      setMapLoading(false); // End map loading on error\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAddStop = async stopId => {\n    try {\n      setError('');\n      setMapLoading(true); // Start map loading for route update\n\n      // Ensure we have a valid stopId\n      if (!stopId || stopId === '') {\n        setError('Please select a stop to add');\n        setMapLoading(false);\n        return;\n      }\n      const stop = stops.find(s => s.id === stopId);\n      if (!stop) {\n        console.error(`Stop with ID ${stopId} not found in loaded stops:`, stops);\n        setError(`Stop with ID ${stopId} not found. Try refreshing the page.`);\n        setMapLoading(false);\n        return;\n      }\n      console.log(`Adding stop ${stopId} (${stop.name}) to bus ${selectedBus} at order ${currentStopOrder}`);\n\n      // Create new route stop entry\n      const newRoute = {\n        bus_id: selectedBus,\n        bus_stop_id: stopId,\n        stop_order: currentStopOrder,\n        time_from_start: 0 // Default to 0 minutes\n      };\n      const response = await axios.post(getApiUrl(api.endpoints.adminAddRoute), newRoute, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      if (response.data && response.data.id) {\n        // Use the complete object returned from API\n        const updatedStops = [...formData.stops, response.data];\n        setFormData(prev => ({\n          ...prev,\n          stops: updatedStops\n        }));\n        setRoutes(prev => [...prev, response.data]);\n        setCurrentStopOrder(currentStopOrder + 1);\n\n        // Update the map to show the new route\n        fitRouteOnMap(updatedStops);\n      }\n      setIsAddingStop(false);\n      setTimeout(() => {\n        setMapLoading(false);\n      }, 1000);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError('Failed to add stop to route: ' + (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message));\n      console.error(\"Error adding stop to route:\", err);\n      setMapLoading(false);\n    }\n  };\n  const handleRemoveStop = async routeId => {\n    if (!window.confirm('Are you sure you want to remove this stop from the route?')) {\n      return;\n    }\n    try {\n      setMapLoading(true); // Start map loading for route update\n      await axios.delete(getApiUrl(api.endpoints.adminDeleteRoute(routeId)), {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Update local state\n      const updatedStops = formData.stops.filter(stop => stop.id !== routeId);\n\n      // Remove the old data to prevent stale references\n      setFormData(prevData => ({\n        ...prevData,\n        stops: []\n      }));\n      setTimeout(async () => {\n        const response = await axios.get(getApiUrl(api.endpoints.adminRouteById(selectedBus)), {\n          headers: {\n            Authorization: `Bearer ${user.token}`\n          }\n        });\n        const newStops = response.data;\n        setFormData({\n          bus_id: selectedBus,\n          stops: newStops\n        });\n        fitRouteOnMap(newStops);\n      }, 0);\n      setTimeout(() => {\n        setMapLoading(false);\n      }, 1000);\n    } catch (err) {\n      setError('Error removing stop: ' + err.message);\n      console.error(\"Error removing stop from route:\", err);\n      setMapLoading(false);\n    }\n  };\n\n  // Begin editing a stop's time\n  const handleEditStopTime = routeId => {\n    const stop = formData.stops.find(stop => stop.id === routeId);\n    if (stop) {\n      setEditingStopId(routeId);\n      setStopTimeData({\n        time_from_start: stop.time_from_start || 0\n      });\n    }\n  };\n\n  // Save edited stop time\n  const handleSaveStopTime = async () => {\n    if (!editingStopId) return;\n    try {\n      setMapLoading(true);\n      await axios.put(getApiUrl(api.endpoints.adminUpdateRoute(editingStopId)), {\n        time_from_start: parseFloat(stopTimeData.time_from_start)\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Update local state\n      const updatedStops = formData.stops.map(stop => {\n        if (stop.id === editingStopId) {\n          return {\n            ...stop,\n            time_from_start: parseFloat(stopTimeData.time_from_start)\n          };\n        }\n        return stop;\n      });\n      setFormData(prev => ({\n        ...prev,\n        stops: updatedStops\n      }));\n\n      // Update routes global state\n      setRoutes(prev => {\n        return prev.map(route => {\n          if (route.id === editingStopId) {\n            return {\n              ...route,\n              time_from_start: parseFloat(stopTimeData.time_from_start)\n            };\n          }\n          return route;\n        });\n      });\n\n      // Reset edit state\n      setEditingStopId(null);\n      setStopTimeData({\n        time_from_start: ''\n      });\n    } catch (err) {\n      setError('Error updating stop time: ' + err.message);\n      console.error(\"Error updating stop time:\", err);\n    } finally {\n      setMapLoading(false);\n    }\n  };\n\n  // Cancel editing stop time\n  const handleCancelEditStopTime = () => {\n    setEditingStopId(null);\n    setStopTimeData({\n      time_from_start: ''\n    });\n  };\n\n  // Add a new start time for the bus\n  const handleAddStartTime = async () => {\n    if (!selectedBus || !newStartTime) {\n      setError('Please select a bus and enter a valid start time.');\n      return;\n    }\n    try {\n      setMapLoading(true);\n      console.log(\"Adding start time:\", newStartTime, \"for bus:\", selectedBus);\n\n      // Get current start times to calculate next rep_no\n      const currentStartTimesUrl = getApiUrl(api.endpoints.adminBusStartTimes(selectedBus));\n      console.log(\"Fetching current start times from:\", currentStartTimesUrl);\n      const startTimesResponse = await axios.get(currentStartTimesUrl, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      console.log(\"Current start times response:\", startTimesResponse.data);\n\n      // Calculate next rep_no based on existing start times\n      let maxRepNo = 0;\n      if (Array.isArray(startTimesResponse.data)) {\n        const repNos = startTimesResponse.data.map(time => parseInt(time.rep_no) || 0);\n        maxRepNo = repNos.length > 0 ? Math.max(...repNos) : 0;\n      }\n      const newRepNo = maxRepNo + 1;\n      console.log(\"Using rep_no:\", newRepNo);\n\n      // Construct the API endpoint for adding a start time\n      const addStartTimeUrl = getApiUrl(api.endpoints.adminBusStartTimes(selectedBus));\n      console.log(\"POST URL for adding start time:\", addStartTimeUrl);\n\n      // Add new start time\n      const addResponse = await axios.post(addStartTimeUrl, {\n        start_time: newStartTime,\n        rep_no: newRepNo\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      console.log(\"Add start time response:\", addResponse.data);\n\n      // Update bus totalRep \n      const updateBusUrl = getApiUrl(api.endpoints.adminUpdateBusTotalRep(selectedBus));\n      console.log(\"Updating bus totalRep at:\", updateBusUrl);\n      await axios.put(updateBusUrl, {\n        totalRep: newRepNo\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Fetch updated start times\n      console.log(\"Fetching updated start times\");\n      const updatedStartTimesResponse = await axios.get(getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)), {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      console.log(\"Updated start times:\", updatedStartTimesResponse.data);\n      if (Array.isArray(updatedStartTimesResponse.data)) {\n        setStartTimes(updatedStartTimesResponse.data);\n      } else if (updatedStartTimesResponse.data && Array.isArray(updatedStartTimesResponse.data.data)) {\n        setStartTimes(updatedStartTimesResponse.data.data);\n      }\n\n      // Reset form\n      setNewStartTime('');\n      setIsAddingStartTime(false);\n    } catch (err) {\n      var _err$response3, _err$response4, _err$response4$data;\n      console.error(\"Error adding start time:\", err);\n      console.error(\"Error response:\", (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data);\n      setError('Error adding start time: ' + (((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || err.message));\n    } finally {\n      setMapLoading(false);\n    }\n  };\n\n  // Handle delete start time\n  const handleDeleteStartTime = async timeId => {\n    if (!window.confirm('Are you sure you want to delete this start time?')) {\n      return;\n    }\n    try {\n      setMapLoading(true);\n      await axios.delete(getApiUrl(api.endpoints.adminDeleteStartTime(timeId)), {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Fetch updated start times\n      const startTimesResponse = await axios.get(getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)), {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      if (startTimesResponse.data && startTimesResponse.data.data) {\n        setStartTimes(startTimesResponse.data.data);\n      } else if (Array.isArray(startTimesResponse.data)) {\n        setStartTimes(startTimesResponse.data);\n      }\n\n      // Update bus totalRep based on max rep_no\n      if (Array.isArray(startTimesResponse.data) && startTimesResponse.data.length > 0) {\n        const repNos = startTimesResponse.data.map(time => parseInt(time.rep_no) || 0);\n        const maxRepNo = repNos.length > 0 ? Math.max(...repNos) : 0;\n        console.log(\"Updated max rep_no:\", maxRepNo);\n        await axios.put(getApiUrl(api.endpoints.adminUpdateBusTotalRep(selectedBus)), {\n          totalRep: maxRepNo\n        }, {\n          headers: {\n            Authorization: `Bearer ${user.token}`\n          }\n        });\n      }\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      setError('Error deleting start time: ' + (((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || err.message));\n      console.error(\"Error deleting start time:\", err);\n    } finally {\n      setMapLoading(false);\n    }\n  };\n  const handleEditStartTime = timeId => {\n    const startTime = startTimes.find(time => time.id === timeId);\n    if (startTime) {\n      setEditingTimeId(timeId);\n      setNewStartTime(startTime.start_time);\n    }\n  };\n  const handleSaveStartTime = async () => {\n    if (!editingTimeId || !newStartTime) return;\n    try {\n      setMapLoading(true);\n      await axios.put(getApiUrl(api.endpoints.adminUpdateStartTime(editingTimeId)), {\n        start_time: newStartTime\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Fetch updated start times\n      const startTimesResponse = await axios.get(getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)), {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      if (startTimesResponse.data && startTimesResponse.data.data) {\n        setStartTimes(startTimesResponse.data.data);\n      } else if (Array.isArray(startTimesResponse.data)) {\n        setStartTimes(startTimesResponse.data);\n      }\n\n      // Reset edit state\n      setEditingTimeId(null);\n      setNewStartTime('');\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      setError('Error updating start time: ' + (((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.message) || err.message));\n      console.error(\"Error updating start time:\", err);\n    } finally {\n      setMapLoading(false);\n    }\n  };\n\n  // Cancel editing start time\n  const handleCancelEditStartTime = () => {\n    setEditingTimeId(null);\n    setNewStartTime('');\n  };\n  const fitRouteOnMap = routeStops => {\n    if (!routeStops || routeStops.length === 0 || !mapRef.current) return;\n\n    // Get all stop coordinates, ensuring we have proper numeric values\n    const stopPositions = routeStops.map(routeStop => {\n      const stop = stops.find(s => s.id === routeStop.bus_stop_id);\n      if (!stop) return null;\n      const lat = parseFloat(stop.latitude);\n      const lng = parseFloat(stop.longitude);\n      if (isNaN(lat) || isNaN(lng)) return null;\n      return [lat, lng];\n    }).filter(Boolean);\n    if (stopPositions.length === 0) return;\n    if (stopPositions.length === 1) {\n      // If only one stop, center on it\n      setMapCenter(stopPositions[0]);\n      setZoom(16);\n    } else {\n      // Calculate bounds for multiple stops\n      const minLat = Math.min(...stopPositions.map(pos => pos[0]));\n      const maxLat = Math.max(...stopPositions.map(pos => pos[0]));\n      const minLng = Math.min(...stopPositions.map(pos => pos[1]));\n      const maxLng = Math.max(...stopPositions.map(pos => pos[1]));\n\n      // Center the map on the middle of the route\n      setMapCenter([minLat + (maxLat - minLat) / 2, minLng + (maxLng - minLng) / 2]);\n\n      // Calculate zoom level based on distance\n      const latDiff = maxLat - minLat;\n      const lngDiff = maxLng - minLng;\n      const maxDiff = Math.max(latDiff, lngDiff);\n\n      // Simple zoom calculation, adjust as needed\n      if (maxDiff < 0.005) setZoom(16);else if (maxDiff < 0.01) setZoom(15);else if (maxDiff < 0.02) setZoom(14);else setZoom(13);\n    }\n  };\n  const getStopById = stopId => {\n    if (!stopId) return null;\n    const searchId = stopId.toString();\n    const stop = stops.find(stop => stop.id.toString() === searchId);\n    if (!stop) {\n      console.warn(`Stop with ID ${stopId} not found in loaded stops:`, stops);\n    }\n    return stop;\n  };\n  const getBusById = busId => {\n    return buses.find(bus => bus.id === busId);\n  };\n\n  // Simplified version - remove the special handling for start/end stops\n  // since we're treating it as a circular route\n  const getStopIcon = () => {\n    // Use a single color for all stops in a circular route\n    return L.icon({\n      iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n      popupAnchor: [1, -34],\n      shadowSize: [41, 41]\n    });\n  };\n\n  // Begin editing a stop including name\n  const handleEditStopFull = routeId => {\n    const routeStop = formData.stops.find(stop => stop.id === routeId);\n    if (routeStop) {\n      setEditingStopId(routeId);\n      setEditingStopName(true);\n      setEditFormData({\n        stop_id: routeStop.bus_stop_id,\n        stop_order: routeStop.stop_order,\n        time_from_start: routeStop.time_from_start || 0\n      });\n    }\n  };\n\n  // Save edited stop including name change\n  const handleSaveStopFull = async () => {\n    if (!editingStopId) return;\n    try {\n      setMapLoading(true);\n      await axios.put(getApiUrl(api.endpoints.adminUpdateRoute(editingStopId)), {\n        bus_stop_id: Number(editFormData.stop_id),\n        // Ensure proper numeric conversion\n        stop_order: parseInt(editFormData.stop_order),\n        time_from_start: parseFloat(editFormData.time_from_start)\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n\n      // Refresh routes after update\n      const response = await axios.get(getApiUrl(api.endpoints.adminRouteById(selectedBus)), {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      const busRoutes = response.data;\n\n      // First erase old data\n      setFormData(prevData => ({\n        ...prevData,\n        stops: []\n      }));\n\n      // Then, redraw after a short delay\n      setTimeout(() => {\n        setFormData({\n          bus_id: selectedBus,\n          stops: busRoutes\n        });\n        fitRouteOnMap(busRoutes);\n      }, 0);\n\n      // Reset edit state\n      setEditingStopId(null);\n      setEditingStopName(false);\n      setEditFormData({\n        stop_id: '',\n        stop_order: '',\n        time_from_start: ''\n      });\n\n      // Update map\n      fitRouteOnMap(busRoutes);\n    } catch (err) {\n      var _err$response7, _err$response7$data;\n      setError('Error updating stop: ' + (((_err$response7 = err.response) === null || _err$response7 === void 0 ? void 0 : (_err$response7$data = _err$response7.data) === null || _err$response7$data === void 0 ? void 0 : _err$response7$data.message) || err.message));\n      console.error(\"Error updating stop:\", err);\n    } finally {\n      setMapLoading(false);\n    }\n  };\n\n  // Cancel editing stop\n  const handleCancelStopEdit = () => {\n    setEditingStopId(null);\n    setEditingStopName(false);\n    setEditFormData({\n      stop_id: '',\n      stop_order: '',\n      time_from_start: ''\n    });\n  };\n  if (loading && !buses.length && !stops.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading route data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 929,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"route-management\",\n    children: [mapLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fullpage-loading-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading routes...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 937,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 936,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Route Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 940,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 941,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"refresh-button\",\n        onClick: () => setRefreshTrigger(prev => prev + 1),\n        disabled: loading,\n        children: loading ? 'Refreshing...' : 'Refresh Data'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 944,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowMapDebug(!showMapDebug),\n        children: showMapDebug ? \"Hide Debug Info\" : \"Show Debug Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 952,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 943,\n      columnNumber: 13\n    }, this), showMapDebug && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-info\",\n      style: {\n        padding: '10px',\n        backgroundColor: '#f0f0f0',\n        margin: '10px 0',\n        borderRadius: '5px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Route Debug Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 959,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Buses Loaded: \", buses.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 960,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Stops Loaded: \", stops.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 961,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected Bus: \", selectedBus ? (_getBusById = getBusById(selectedBus)) === null || _getBusById === void 0 ? void 0 : _getBusById.name : 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 962,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Route Stops: \", formData.stops.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 963,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Map Center: \", mapCenter.join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 964,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          window.routeDiagnostics.logState();\n          console.log(\"Current formData:\", formData);\n        },\n        children: \"Log Debug Info to Console\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 958,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"route-management-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bus-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select Bus to Manage Route\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 976,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bus-list\",\n          children: buses.map(bus => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: selectedBus === bus.id ? 'selected' : '',\n            onClick: () => handleBusSelect(bus.id),\n            children: bus.name\n          }, bus.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 979,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 977,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 975,\n        columnNumber: 17\n      }, this), selectedBus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"route-editor\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Route for \", (_getBusById2 = getBusById(selectedBus)) === null || _getBusById2 === void 0 ? void 0 : _getBusById2.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 992,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"start-times-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Bus Start Times\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 996,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"start-times-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Repetition\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1001,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Start Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1002,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Actions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1003,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1000,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 999,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: startTimes.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  colSpan: \"3\",\n                  children: \"No start times defined yet.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1009,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1008,\n                columnNumber: 41\n              }, this) : startTimes.map(time => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: time.rep_no\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1014,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: editingTimeId === time.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"time\",\n                    value: newStartTime,\n                    onChange: e => setNewStartTime(e.target.value),\n                    required: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1017,\n                    columnNumber: 57\n                  }, this) : time.start_time\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1015,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: editingTimeId === time.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: handleSaveStartTime,\n                      children: \"Save\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1030,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: handleCancelEditStartTime,\n                      children: \"Cancel\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1031,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleEditStartTime(time.id),\n                      children: \"Edit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1035,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleDeleteStartTime(time.id),\n                      className: \"delete-time-button\",\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1036,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1027,\n                  columnNumber: 49\n                }, this)]\n              }, time.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1013,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1006,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 998,\n            columnNumber: 29\n          }, this), isAddingStartTime ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"add-start-time-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Add New Start Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1053,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                value: newStartTime,\n                onChange: e => setNewStartTime(e.target.value),\n                placeholder: \"HH:MM\",\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1055,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleAddStartTime,\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1063,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    setIsAddingStartTime(false);\n                    setNewStartTime('');\n                  },\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1064,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1062,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1054,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1052,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-start-time-button\",\n            onClick: () => setIsAddingStartTime(true),\n            children: \"Add Start Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1072,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 995,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Route Stops\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1081,\n          columnNumber: 25\n        }, this), formData.stops.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No stops assigned to this route. Add stops below.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1083,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"route-stops-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Order\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1088,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Stop Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1089,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Time (minutes from start)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1090,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1091,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1087,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1086,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [...formData.stops].sort((a, b) => a.stop_order - b.stop_order).map(routeStop => {\n              const stop = getStopById(routeStop.bus_stop_id);\n              const stopName = stop ? stop.name : `Unknown Stop (ID: ${routeStop.bus_stop_id})`;\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: routeStop.stop_order\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1102,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: editingStopId === routeStop.id && editingStopName ? /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: editFormData.stop_id,\n                    onChange: e => setEditFormData({\n                      ...editFormData,\n                      stop_id: e.target.value\n                    }),\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"Select Stop\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1114,\n                      columnNumber: 65\n                    }, this), stops.map(s => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: s.id,\n                      children: s.name\n                    }, s.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1116,\n                      columnNumber: 69\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1105,\n                    columnNumber: 61\n                  }, this) : stopName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1103,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: editingStopId === routeStop.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    min: \"0\",\n                    step: \"0.1\",\n                    value: editFormData.time_from_start,\n                    onChange: e => setEditFormData({\n                      ...editFormData,\n                      time_from_start: e.target.value\n                    }),\n                    required: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1127,\n                    columnNumber: 61\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: routeStop.time_from_start || 0\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1141,\n                    columnNumber: 61\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1125,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: editingStopId === routeStop.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: handleSaveStopFull,\n                      children: \"Save\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1147,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: handleCancelStopEdit,\n                      children: \"Cancel\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1148,\n                      columnNumber: 65\n                    }, this)]\n                  }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleEditStopFull(routeStop.id),\n                      children: \"Edit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1152,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleRemoveStop(routeStop.id),\n                      children: \"Remove\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1155,\n                      columnNumber: 65\n                    }, this)]\n                  }, void 0, true)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1144,\n                  columnNumber: 53\n                }, this)]\n              }, `${routeStop.id}-${refreshTrigger}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1101,\n                columnNumber: 49\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1094,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1085,\n          columnNumber: 29\n        }, this), isAddingStop ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-stop-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Add New Stop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1171,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: editFormData.stop_id,\n              onChange: e => setEditFormData({\n                ...editFormData,\n                stop_id: e.target.value\n              }),\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Stop\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1181,\n                columnNumber: 41\n              }, this), stops.map(stop => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: stop.id,\n                children: stop.name\n              }, stop.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1183,\n                columnNumber: 45\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1173,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleAddStop(editFormData.stop_id),\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1189,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setIsAddingStop(false),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1190,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1188,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1172,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1170,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-stop-button\",\n          onClick: () => setIsAddingStop(true),\n          children: \"Add Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1195,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"route-map-container\",\n          children: /*#__PURE__*/_jsxDEV(MapContainer, {\n            center: mapCenter,\n            zoom: zoom,\n            style: {\n              height: '400px',\n              width: '100%'\n            },\n            whenCreated: mapInstance => mapRef.current = mapInstance,\n            children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n              url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n              attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1211,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(MapUpdater, {\n              center: mapCenter,\n              zoom: zoom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1215,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(RoadBasedRoutes, {\n              stops: formData.stops\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1216,\n              columnNumber: 33\n            }, this), stops.map(stop => {\n              const appearances = formData.stops.filter(s => {\n                var _s$bus_stop_id, _stop$id;\n                return ((_s$bus_stop_id = s.bus_stop_id) === null || _s$bus_stop_id === void 0 ? void 0 : _s$bus_stop_id.toString()) === ((_stop$id = stop.id) === null || _stop$id === void 0 ? void 0 : _stop$id.toString());\n              });\n              if (appearances.length > 0) {\n                return /*#__PURE__*/_jsxDEV(Marker, {\n                  position: [parseFloat(stop.latitude), parseFloat(stop.longitude)],\n                  icon: getStopIcon(),\n                  children: /*#__PURE__*/_jsxDEV(Popup, {\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: stop.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1227,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1228,\n                        columnNumber: 57\n                      }, this), appearances.map((a, idx) => `Stop ${a.stop_order}: ${a.time_from_start || 0} min`).join(', ')]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1226,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1225,\n                    columnNumber: 49\n                  }, this)\n                }, stop.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1224,\n                  columnNumber: 45\n                }, this);\n              }\n              return null;\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1205,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1204,\n          columnNumber: 25\n        }, this), selectedBus && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"route-status\",\n          style: {\n            textAlign: 'center',\n            marginTop: '10px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Route Status:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1246,\n              columnNumber: 37\n            }, this), \" \", formData.stops.length < 2 ? \"Add at least 2 stops to create a route\" : `Route with ${formData.stops.length} stops and ${startTimes.length} scheduled departure times`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1245,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1244,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 991,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 974,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 933,\n    columnNumber: 9\n  }, this);\n}\n_s3(RouteManagement, \"CpPPsI5uDGv958TwgGWmRvHbmg0=\");\n_c3 = RouteManagement;\nexport default RouteManagement;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MapUpdater\");\n$RefreshReg$(_c2, \"RoadBasedRoutes\");\n$RefreshReg$(_c3, \"RouteManagement\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","axios","MapContainer","TileLayer","Marker","Popup","useMap","L","api","getApiUrl","jsxDEV","_jsxDEV","Fragment","_Fragment","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","configureRoutingMachine","Routing","Itinerary","options","createGeocoderPane","timeout","ErrorControl","_routingErrorHandler","e","console","warn","Line","originalClearLines","_clearLines","_map","_route","_layers","call","removeLayer","MapUpdater","center","zoom","_s","map","setView","getZoom","_c","RoadBasedRoutes","stops","_s2","controlRef","cleanup","current","removeControl","length","log","hasMap","stopsCount","waypoints","orderedStops","sort","a","b","stop_order","routeStop","lat","parseFloat","latitude","lng","longitude","isNaN","push","latLng","control","routeWhileDragging","showAlternatives","fitSelectedRoutes","show","lineOptions","styles","color","opacity","weight","extendToWaypoints","missingRouteTolerance","createMarker","addWaypoints","serviceUrl","on","setTimeout","addTo","error","_c2","RouteManagement","user","_s3","_getBusById","_getBusById2","buses","setBuses","setStops","loading","setLoading","setError","selectedBus","setSelectedBus","mapCenter","setMapCenter","setZoom","mapRef","refreshTrigger","setRefreshTrigger","routes","setRoutes","showMapDebug","setShowMapDebug","mapLoading","setMapLoading","startTimes","setStartTimes","editingStopId","setEditingStopId","editingTimeId","setEditingTimeId","newStartTime","setNewStartTime","isAddingStartTime","setIsAddingStartTime","formData","setFormData","bus_id","stopTimeData","setStopTimeData","time_from_start","isAddingStop","setIsAddingStop","currentStopOrder","setCurrentStopOrder","editingStopName","setEditingStopName","editFormData","setEditFormData","stop_id","window","enableOSRM","routeDiagnostics","logState","_window$stopsData","stopsData","routeStops","mapInitialized","fetchData","busesResponse","get","endpoints","adminBuses","headers","Authorization","token","data","err","message","id","name","stopsResponse","adminStops","routesResponse","adminRoutes","fetchedRoutes","handleBusSelect","busId","formattedStops","stop","toString","response","adminRouteById","formattedRoutes","route","bus_stop_id","missingStops","filter","some","maxOrder","Math","max","fitRouteOnMap","startTimesUrl","adminBusStartTimes","startTimesResponse","Array","isArray","_err$response","_err$response$data","handleAddStop","stopId","find","s","newRoute","post","adminAddRoute","updatedStops","prev","_err$response2","_err$response2$data","handleRemoveStop","routeId","confirm","delete","adminDeleteRoute","prevData","newStops","handleEditStopTime","handleSaveStopTime","put","adminUpdateRoute","handleCancelEditStopTime","handleAddStartTime","currentStartTimesUrl","maxRepNo","repNos","time","parseInt","rep_no","newRepNo","addStartTimeUrl","addResponse","start_time","updateBusUrl","adminUpdateBusTotalRep","totalRep","updatedStartTimesResponse","_err$response3","_err$response4","_err$response4$data","handleDeleteStartTime","timeId","adminDeleteStartTime","_err$response5","_err$response5$data","handleEditStartTime","startTime","handleSaveStartTime","adminUpdateStartTime","_err$response6","_err$response6$data","handleCancelEditStartTime","stopPositions","Boolean","minLat","min","pos","maxLat","minLng","maxLng","latDiff","lngDiff","maxDiff","getStopById","searchId","getBusById","bus","getStopIcon","icon","iconSize","iconAnchor","popupAnchor","shadowSize","handleEditStopFull","handleSaveStopFull","Number","busRoutes","_err$response7","_err$response7$data","handleCancelStopEdit","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","disabled","style","padding","backgroundColor","margin","borderRadius","join","colSpan","type","value","onChange","target","required","placeholder","stopName","step","height","width","whenCreated","mapInstance","url","attribution","appearances","_s$bus_stop_id","_stop$id","position","idx","textAlign","marginTop","_c3","$RefreshReg$"],"sources":["/home/lubesh/Desktop/DBMS/KGP_Bus/frontend/src/components/admin/RouteManagement.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-routing-machine';\r\nimport 'leaflet-routing-machine/dist/leaflet-routing-machine.css';\r\nimport '../../css/RouteManagement.css';\r\nimport '../../css/AdminStyles.css';\r\nimport api, { getApiUrl } from '../../utils/api2.js';\r\n\r\n// Fix for default marker icon in Leaflet with React\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',\r\n    iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',\r\n    shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',\r\n});\r\n\r\n\r\nfunction configureRoutingMachine() {\r\n    if (typeof L !== 'undefined' && L.Routing) {\r\n        // Modify the global routing options\r\n        L.Routing.Itinerary.prototype.options.createGeocoderPane = false;\r\n        L.Routing.timeout = 30 * 1000; // 30 seconds timeout\r\n\r\n        // Override the error handling globally\r\n        if (L.Routing.ErrorControl && L.Routing.ErrorControl.prototype) {\r\n            L.Routing.ErrorControl.prototype._routingErrorHandler = function (e) {\r\n                console.warn(\"Handled routing error:\", e);\r\n                // No UI updates or errors thrown\r\n            };\r\n        }\r\n\r\n        // Fix issues with the layer removal\r\n        if (L.Routing.Line && L.Routing.Line.prototype) {\r\n            const originalClearLines = L.Routing.Line.prototype._clearLines;\r\n            L.Routing.Line.prototype._clearLines = function () {\r\n                try {\r\n                    // Safety check before calling the original function\r\n                    if (this._map && this._route && this._route._layers) {\r\n                        originalClearLines.call(this);\r\n                    }\r\n                } catch (e) {\r\n                    console.warn(\"Protected from _clearLines error:\", e);\r\n                    // Manual cleanup as fallback\r\n                    if (this._map && this._route) {\r\n                        try {\r\n                            this._map.removeLayer(this._route);\r\n                        } catch (e) {\r\n                            console.warn(\"Also failed with manual cleanup:\", e);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Component to recenter map when needed\r\nfunction MapUpdater({ center, zoom }) {\r\n    const map = useMap();\r\n\r\n    useEffect(() => {\r\n        if (center) {\r\n            map.setView(center, zoom || map.getZoom());\r\n        }\r\n    }, [center, zoom, map]);\r\n\r\n    return null;\r\n}\r\n\r\n\r\n// Custom component to create routes that follow roads\r\nfunction RoadBasedRoutes({ stops }) {\r\n    const map = useMap();\r\n    const controlRef = useRef(null);\r\n\r\n    // A safer cleanup function we can call anytime\r\n    const cleanup = useCallback(() => {\r\n        if (controlRef.current) {\r\n            try {\r\n                // Always remove from map first\r\n                if (map) map.removeControl(controlRef.current);\r\n            } catch (e) {\r\n                console.warn(\"Error removing control:\", e);\r\n            }\r\n            controlRef.current = null;\r\n        }\r\n    }, [map]);\r\n\r\n    // Set up once - clean up on unmount\r\n    useEffect(() => {\r\n        return cleanup;\r\n    }, [cleanup]);\r\n\r\n    // Handle route creation/updates\r\n    useEffect(() => {\r\n        if (!map || !stops) { \r\n            return; \r\n        }\r\n        if (stops.length < 2) {\r\n            console.log(\"Not enough conditions for route drawing:\", {\r\n                hasMap: !!map,\r\n                stopsCount: stops.length\r\n            });\r\n            return;\r\n        }\r\n\r\n        cleanup();\r\n\r\n        const waypoints = [];\r\n        const orderedStops = [...stops].sort((a, b) => a.stop_order - b.stop_order);\r\n\r\n        console.log(\"Drawing routes for ordered stops:\", orderedStops);\r\n\r\n        for (const routeStop of orderedStops) {\r\n            const lat = parseFloat(routeStop.latitude);\r\n            const lng = parseFloat(routeStop.longitude);\r\n            if (!isNaN(lat) && !isNaN(lng)) {\r\n                waypoints.push(L.latLng(lat, lng));\r\n            }\r\n        }\r\n\r\n        if (waypoints.length < 2) {\r\n            console.log(\"Not enough valid waypoints for route\");\r\n            return;\r\n        }\r\n\r\n        // Create the OSRM routing control\r\n        try {\r\n            const control = L.Routing.control({\r\n                waypoints,\r\n                routeWhileDragging: false,\r\n                showAlternatives: false,\r\n                fitSelectedRoutes: false,\r\n                show: false,\r\n                lineOptions: {\r\n                    styles: [{ color: '#3388ff', opacity: 0.7, weight: 5 }],\r\n                    extendToWaypoints: true,\r\n                    missingRouteTolerance: 10\r\n                },\r\n                createMarker: () => null, // No markers from routing\r\n                addWaypoints: false,\r\n                serviceUrl: 'https://router.project-osrm.org/route/v1'\r\n            });\r\n\r\n            // Handle errors silently\r\n            control.on('routingerror', function (e) {\r\n                console.warn(\"Routing error:\", e);\r\n            });\r\n\r\n            // Store the reference\r\n            controlRef.current = control;\r\n\r\n            // Add the control to the map\r\n            setTimeout(() => {\r\n                if (map && controlRef.current) {\r\n                    try {\r\n                        controlRef.current.addTo(map);\r\n                    } catch (e) {\r\n                        console.warn(\"Error adding route control:\", e);\r\n                    }\r\n                }\r\n            }, 200);\r\n        } catch (error) {\r\n            console.error(\"Error creating routing control:\", error);\r\n        }\r\n    }, [map, stops, cleanup]);\r\n\r\n    return null;\r\n}\r\n\r\nfunction RouteManagement({ user }) {\r\n    const [buses, setBuses] = useState([]);\r\n    const [stops, setStops] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState('');\r\n    const [selectedBus, setSelectedBus] = useState(null);\r\n    const [mapCenter, setMapCenter] = useState([22.3190, 87.3091]); // IIT KGP coordinates\r\n    const [zoom, setZoom] = useState(15);\r\n    const mapRef = useRef(null);\r\n    const [refreshTrigger, setRefreshTrigger] = useState(0);\r\n    const [routes, setRoutes] = useState([]);\r\n    const [showMapDebug, setShowMapDebug] = useState(false); // State for debugging\r\n    const [mapLoading, setMapLoading] = useState(false); // New state for map loading\r\n    const [startTimes, setStartTimes] = useState([]); // New state for bus start times\r\n    const [editingStopId, setEditingStopId] = useState(null); // State to track which stop is being edited\r\n    const [editingTimeId, setEditingTimeId] = useState(null); // State to track which start time is being edited\r\n    const [newStartTime, setNewStartTime] = useState(''); // State for new start time input\r\n    const [isAddingStartTime, setIsAddingStartTime] = useState(false); // State to track if adding new start time\r\n\r\n    const [formData, setFormData] = useState({\r\n        bus_id: '',\r\n        stops: []\r\n    });\r\n\r\n    // State for editing individual stop time\r\n    const [stopTimeData, setStopTimeData] = useState({\r\n        time_from_start: ''\r\n    });\r\n\r\n    const [isAddingStop, setIsAddingStop] = useState(false);\r\n    const [currentStopOrder, setCurrentStopOrder] = useState(1);\r\n\r\n    // Add state for edit mode for stop name\r\n    const [editingStopName, setEditingStopName] = useState(false);\r\n    const [editFormData, setEditFormData] = useState({\r\n        stop_id: '',\r\n        stop_order: '',\r\n        time_from_start: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        // Initialize window-level stopsData and configuration flag\r\n        window.enableOSRM = true; // Always use OSRM\r\n        configureRoutingMachine();\r\n\r\n        // Add a global diagnostics object to help with debugging\r\n        window.routeDiagnostics = {\r\n            stops: [],\r\n            waypoints: [],\r\n            logState: () => {\r\n                console.log(\"Current Map State:\", {\r\n                    stops: window.stopsData?.length || 0,\r\n                    selectedBus,\r\n                    routeStops: formData.stops.length,\r\n                    mapInitialized: !!mapRef.current\r\n                });\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                setLoading(true);\r\n                setError('');\r\n\r\n                // Fetch buses\r\n                try {\r\n                    const busesResponse = await axios.get(getApiUrl(api.endpoints.adminBuses), {\r\n                        headers: { Authorization: `Bearer ${user.token}` },\r\n                        timeout: 10000\r\n                    });\r\n                    setBuses(busesResponse.data);\r\n                    console.log(\"Buses loaded for routes:\", busesResponse.data.length);\r\n                } catch (err) {\r\n                    setError('Failed to fetch buses: ' + err.message);\r\n                    console.error(\"Error fetching buses for routes:\", err);\r\n                    setBuses([{ id: 'mock1', name: 'Demo Bus 1' }]); // Fallback data\r\n                }\r\n\r\n                // Fetch stops\r\n                try {\r\n                    const stopsResponse = await axios.get(getApiUrl(api.endpoints.adminStops), {\r\n                        headers: { Authorization: `Bearer ${user.token}` },\r\n                        timeout: 10000\r\n                    });\r\n                    setStops(stopsResponse.data);\r\n                    console.log(\"Stops loaded for routes:\", stopsResponse.data.length);\r\n                } catch (err) {\r\n                    setError('Failed to fetch stops: ' + err.message);\r\n                    console.error(\"Error fetching stops for routes:\", err);\r\n                    setStops([{\r\n                        id: 'mock1',\r\n                        name: 'Demo Stop',\r\n                        latitude: 22.3190,\r\n                        longitude: 87.3091\r\n                    }]); // Fallback data\r\n                }\r\n\r\n                // Fetch routes and update your state\r\n                try {\r\n                    const routesResponse = await axios.get(getApiUrl(api.endpoints.adminRoutes), {\r\n                        headers: { Authorization: `Bearer ${user.token}` },\r\n                        timeout: 10000\r\n                    });\r\n                    // Using the fetched routes data\r\n                    const fetchedRoutes = routesResponse.data;\r\n                    setRoutes(fetchedRoutes);\r\n                    console.log(\"Routes loaded:\", fetchedRoutes.length);\r\n                } catch (err) {\r\n                    setError('Failed to fetch routes: ' + err.message);\r\n                    console.error(\"Error fetching routes:\", err);\r\n                    // Using default empty array for routes\r\n                    setRoutes([]);\r\n                }\r\n            } catch (err) {\r\n                setError('Error fetching data: ' + err.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [user.token, refreshTrigger]);\r\n\r\n    useEffect(() => {\r\n        if (stops && stops.length > 0) {\r\n            window.stopsData = stops;\r\n        }\r\n    }, [stops]);\r\n\r\n\r\n    const handleBusSelect = async (busId) => {\r\n        try {\r\n            setSelectedBus(busId);\r\n            setLoading(true);\r\n            setMapLoading(true);\r\n            setError('');\r\n\r\n            // First fetch the stops to ensure we have the latest data\r\n            try {\r\n                const stopsResponse = await axios.get(\r\n                    getApiUrl(api.endpoints.adminStops),\r\n                    { headers: { Authorization: `Bearer ${user.token}` } }\r\n                );\r\n                \r\n                // Ensure stops are properly formatted with string IDs\r\n                const formattedStops = stopsResponse.data.map(stop => ({\r\n                    ...stop,\r\n                    id: stop.id.toString()\r\n                }));\r\n                \r\n                setStops(formattedStops);\r\n                window.stopsData = formattedStops;\r\n                console.log(\"Updated stops data:\", formattedStops);\r\n            } catch (err) {\r\n                console.error(\"Error refreshing stops data:\", err);\r\n                setError('Error loading bus stops. Some stops might not display correctly.');\r\n            }\r\n\r\n            try {\r\n                // Fetch bus routes\r\n                const response = await axios.get(\r\n                    getApiUrl(api.endpoints.adminRouteById(busId)),\r\n                    { headers: { Authorization: `Bearer ${user.token}` } }\r\n                );\r\n\r\n                // Ensure route data is properly formatted with string IDs\r\n                const formattedRoutes = response.data.map(route => ({\r\n                    ...route,\r\n                    bus_stop_id: route.bus_stop_id.toString(),\r\n                    id: route.id.toString()\r\n                }));\r\n\r\n                console.log('Formatted routes for bus:', formattedRoutes);\r\n\r\n                // Verify all stops exist before setting state\r\n                const missingStops = formattedRoutes.filter(route => \r\n                    !stops.some(stop => stop.id.toString() === route.bus_stop_id.toString())\r\n                );\r\n\r\n                if (missingStops.length > 0) {\r\n                    console.warn('Missing stops for routes:', missingStops);\r\n                    setError('Some bus stops are missing. Please refresh the page or contact administrator.');\r\n                }\r\n\r\n                setFormData({\r\n                    bus_id: busId,\r\n                    stops: formattedRoutes\r\n                });\r\n\r\n                // Update current stop order\r\n                const maxOrder = Math.max(...formattedRoutes.map(stop => stop.stop_order), 0);\r\n                setCurrentStopOrder(maxOrder + 1);\r\n\r\n                // Update map if we have valid routes\r\n                if (formattedRoutes.length > 0) {\r\n                    fitRouteOnMap(formattedRoutes);\r\n                }\r\n\r\n                // Fetch start times for this bus\r\n                try {\r\n                    console.log(\"Fetching start times for bus:\", busId);\r\n                    const startTimesUrl = getApiUrl(api.endpoints.adminBusStartTimes(busId));\r\n                    console.log(\"Start times URL:\", startTimesUrl);\r\n                    \r\n                    const startTimesResponse = await axios.get(\r\n                        startTimesUrl,\r\n                        { headers: { Authorization: `Bearer ${user.token}` } }\r\n                    );\r\n                    \r\n                    console.log(\"Start times response:\", startTimesResponse.data);\r\n\r\n                    if (startTimesResponse.data && Array.isArray(startTimesResponse.data)) {\r\n                        setStartTimes(startTimesResponse.data);\r\n                    } else if (startTimesResponse.data && Array.isArray(startTimesResponse.data.data)) {\r\n                        setStartTimes(startTimesResponse.data.data);\r\n                    } else {\r\n                        console.warn(\"Unexpected format for start times:\", startTimesResponse.data);\r\n                        setStartTimes([]);\r\n                    }\r\n                } catch (err) {\r\n                    console.error(\"Error fetching start times:\", err);\r\n                    setError('Error fetching start times: ' + (err.response?.data?.message || err.message));\r\n                    setStartTimes([]);\r\n                }\r\n\r\n                // Set a timer to ensure map loading state shows for at least a moment\r\n                setTimeout(() => {\r\n                    setMapLoading(false);\r\n                }, 1000);\r\n            } catch (err) {\r\n                setError('Error fetching route data: ' + err.message);\r\n                console.error(\"Error fetching routes for bus:\", err);\r\n                setMapLoading(false); // End map loading on error\r\n            }\r\n        } catch (err) {\r\n            setError('Error preparing bus route view: ' + err.message);\r\n            setMapLoading(false); // End map loading on error\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddStop = async (stopId) => {\r\n        try {\r\n            setError('');\r\n            setMapLoading(true); // Start map loading for route update\r\n            \r\n            // Ensure we have a valid stopId\r\n            if (!stopId || stopId === '') {\r\n                setError('Please select a stop to add');\r\n                setMapLoading(false);\r\n                return;\r\n            }\r\n            \r\n            const stop = stops.find(s => s.id === stopId);\r\n            if (!stop) {\r\n                console.error(`Stop with ID ${stopId} not found in loaded stops:`, stops);\r\n                setError(`Stop with ID ${stopId} not found. Try refreshing the page.`);\r\n                setMapLoading(false);\r\n                return;\r\n            }\r\n\r\n            console.log(`Adding stop ${stopId} (${stop.name}) to bus ${selectedBus} at order ${currentStopOrder}`);\r\n\r\n            // Create new route stop entry\r\n            const newRoute = {\r\n                bus_id: selectedBus,\r\n                bus_stop_id: stopId,\r\n                stop_order: currentStopOrder,\r\n                time_from_start: 0 // Default to 0 minutes\r\n            };\r\n\r\n            const response = await axios.post(\r\n                getApiUrl(api.endpoints.adminAddRoute),\r\n                newRoute,\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            if (response.data && response.data.id) {\r\n                // Use the complete object returned from API\r\n                const updatedStops = [...formData.stops, response.data];\r\n                setFormData(prev => ({\r\n                    ...prev,\r\n                    stops: updatedStops\r\n                }));\r\n\r\n                setRoutes(prev => [...prev, response.data]);\r\n                setCurrentStopOrder(currentStopOrder + 1);\r\n\r\n                // Update the map to show the new route\r\n                fitRouteOnMap(updatedStops);\r\n            }\r\n\r\n            setIsAddingStop(false);\r\n            setTimeout(() => {\r\n                setMapLoading(false);\r\n            }, 1000);\r\n        } catch (err) {\r\n            setError('Failed to add stop to route: ' + (err.response?.data?.message || err.message));\r\n            console.error(\"Error adding stop to route:\", err);\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleRemoveStop = async (routeId) => {\r\n        if (!window.confirm('Are you sure you want to remove this stop from the route?')) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setMapLoading(true); // Start map loading for route update\r\n            await axios.delete(\r\n                getApiUrl(api.endpoints.adminDeleteRoute(routeId)),\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            // Update local state\r\n            const updatedStops = formData.stops.filter(stop => stop.id !== routeId);\r\n\r\n            // Remove the old data to prevent stale references\r\n            setFormData(prevData => ({ ...prevData, stops: [] }));\r\n            setTimeout(async () => {\r\n                const response = await axios.get(\r\n                    getApiUrl(api.endpoints.adminRouteById(selectedBus)),\r\n                    { headers: { Authorization: `Bearer ${user.token}` } }\r\n                );\r\n                const newStops = response.data;\r\n                setFormData({ bus_id: selectedBus, stops: newStops });\r\n                fitRouteOnMap(newStops);\r\n            }, 0);\r\n\r\n            setTimeout(() => {\r\n                setMapLoading(false);\r\n            }, 1000);\r\n        } catch (err) {\r\n            setError('Error removing stop: ' + err.message);\r\n            console.error(\"Error removing stop from route:\", err);\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    // Begin editing a stop's time\r\n    const handleEditStopTime = (routeId) => {\r\n        const stop = formData.stops.find(stop => stop.id === routeId);\r\n        if (stop) {\r\n            setEditingStopId(routeId);\r\n            setStopTimeData({\r\n                time_from_start: stop.time_from_start || 0\r\n            });\r\n        }\r\n    };\r\n\r\n    // Save edited stop time\r\n    const handleSaveStopTime = async () => {\r\n        if (!editingStopId) return;\r\n\r\n        try {\r\n            setMapLoading(true);\r\n\r\n            await axios.put(\r\n                getApiUrl(api.endpoints.adminUpdateRoute(editingStopId)),\r\n                {\r\n                    time_from_start: parseFloat(stopTimeData.time_from_start)\r\n                },\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            // Update local state\r\n            const updatedStops = formData.stops.map(stop => {\r\n                if (stop.id === editingStopId) {\r\n                    return {\r\n                        ...stop,\r\n                        time_from_start: parseFloat(stopTimeData.time_from_start)\r\n                    };\r\n                }\r\n                return stop;\r\n            });\r\n\r\n            setFormData(prev => ({\r\n                ...prev,\r\n                stops: updatedStops\r\n            }));\r\n\r\n            // Update routes global state\r\n            setRoutes(prev => {\r\n                return prev.map(route => {\r\n                    if (route.id === editingStopId) {\r\n                        return {\r\n                            ...route,\r\n                            time_from_start: parseFloat(stopTimeData.time_from_start)\r\n                        };\r\n                    }\r\n                    return route;\r\n                });\r\n            });\r\n\r\n            // Reset edit state\r\n            setEditingStopId(null);\r\n            setStopTimeData({ time_from_start: '' });\r\n        } catch (err) {\r\n            setError('Error updating stop time: ' + err.message);\r\n            console.error(\"Error updating stop time:\", err);\r\n        } finally {\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    // Cancel editing stop time\r\n    const handleCancelEditStopTime = () => {\r\n        setEditingStopId(null);\r\n        setStopTimeData({ time_from_start: '' });\r\n    };\r\n\r\n    // Add a new start time for the bus\r\n    const handleAddStartTime = async () => {\r\n        if (!selectedBus || !newStartTime) {\r\n            setError('Please select a bus and enter a valid start time.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setMapLoading(true);\r\n            console.log(\"Adding start time:\", newStartTime, \"for bus:\", selectedBus);\r\n\r\n            // Get current start times to calculate next rep_no\r\n            const currentStartTimesUrl = getApiUrl(api.endpoints.adminBusStartTimes(selectedBus));\r\n            console.log(\"Fetching current start times from:\", currentStartTimesUrl);\r\n            \r\n            const startTimesResponse = await axios.get(\r\n                currentStartTimesUrl,\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n            \r\n            console.log(\"Current start times response:\", startTimesResponse.data);\r\n            \r\n            // Calculate next rep_no based on existing start times\r\n            let maxRepNo = 0;\r\n            if (Array.isArray(startTimesResponse.data)) {\r\n                const repNos = startTimesResponse.data\r\n                    .map(time => parseInt(time.rep_no) || 0);\r\n                maxRepNo = repNos.length > 0 ? Math.max(...repNos) : 0;\r\n            }\r\n            const newRepNo = maxRepNo + 1;\r\n            console.log(\"Using rep_no:\", newRepNo);\r\n\r\n            // Construct the API endpoint for adding a start time\r\n            const addStartTimeUrl = getApiUrl(api.endpoints.adminBusStartTimes(selectedBus));\r\n            console.log(\"POST URL for adding start time:\", addStartTimeUrl);\r\n            \r\n            // Add new start time\r\n            const addResponse = await axios.post(\r\n                addStartTimeUrl,\r\n                { \r\n                    start_time: newStartTime,\r\n                    rep_no: newRepNo\r\n                },\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n            \r\n            console.log(\"Add start time response:\", addResponse.data);\r\n\r\n            // Update bus totalRep \r\n            const updateBusUrl = getApiUrl(api.endpoints.adminUpdateBusTotalRep(selectedBus));\r\n            console.log(\"Updating bus totalRep at:\", updateBusUrl);\r\n            \r\n            await axios.put(\r\n                updateBusUrl,\r\n                { totalRep: newRepNo },\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            // Fetch updated start times\r\n            console.log(\"Fetching updated start times\");\r\n            const updatedStartTimesResponse = await axios.get(\r\n                getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)),\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            console.log(\"Updated start times:\", updatedStartTimesResponse.data);\r\n            \r\n            if (Array.isArray(updatedStartTimesResponse.data)) {\r\n                setStartTimes(updatedStartTimesResponse.data);\r\n            } else if (updatedStartTimesResponse.data && Array.isArray(updatedStartTimesResponse.data.data)) {\r\n                setStartTimes(updatedStartTimesResponse.data.data);\r\n            }\r\n\r\n            // Reset form\r\n            setNewStartTime('');\r\n            setIsAddingStartTime(false);\r\n            \r\n        } catch (err) {\r\n            console.error(\"Error adding start time:\", err);\r\n            console.error(\"Error response:\", err.response?.data);\r\n            setError('Error adding start time: ' + (err.response?.data?.message || err.message));\r\n        } finally {\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    // Handle delete start time\r\n    const handleDeleteStartTime = async (timeId) => {\r\n        if (!window.confirm('Are you sure you want to delete this start time?')) {\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            setMapLoading(true);\r\n            \r\n            await axios.delete(\r\n                getApiUrl(api.endpoints.adminDeleteStartTime(timeId)),\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n            \r\n            // Fetch updated start times\r\n            const startTimesResponse = await axios.get(\r\n                getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)),\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n            \r\n            if (startTimesResponse.data && startTimesResponse.data.data) {\r\n                setStartTimes(startTimesResponse.data.data);\r\n            } else if (Array.isArray(startTimesResponse.data)) {\r\n                setStartTimes(startTimesResponse.data);\r\n            }\r\n            \r\n            // Update bus totalRep based on max rep_no\r\n            if (Array.isArray(startTimesResponse.data) && startTimesResponse.data.length > 0) {\r\n                const repNos = startTimesResponse.data.map(time => parseInt(time.rep_no) || 0);\r\n                const maxRepNo = repNos.length > 0 ? Math.max(...repNos) : 0;\r\n                console.log(\"Updated max rep_no:\", maxRepNo);\r\n                \r\n                await axios.put(\r\n                    getApiUrl(api.endpoints.adminUpdateBusTotalRep(selectedBus)),\r\n                    { totalRep: maxRepNo },\r\n                    { headers: { Authorization: `Bearer ${user.token}` } }\r\n                );\r\n            }\r\n        } catch (err) {\r\n            setError('Error deleting start time: ' + (err.response?.data?.message || err.message));\r\n            console.error(\"Error deleting start time:\", err);\r\n        } finally {\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleEditStartTime = (timeId) => {\r\n        const startTime = startTimes.find(time => time.id === timeId);\r\n        if (startTime) {\r\n            setEditingTimeId(timeId);\r\n            setNewStartTime(startTime.start_time);\r\n        }\r\n    };\r\n\r\n    const handleSaveStartTime = async () => {\r\n        if (!editingTimeId || !newStartTime) return;\r\n\r\n        try {\r\n            setMapLoading(true);\r\n\r\n            await axios.put(\r\n                getApiUrl(api.endpoints.adminUpdateStartTime(editingTimeId)),\r\n                { start_time: newStartTime },\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            // Fetch updated start times\r\n            const startTimesResponse = await axios.get(\r\n                getApiUrl(api.endpoints.adminBusStartTimes(selectedBus)),\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            if (startTimesResponse.data && startTimesResponse.data.data) {\r\n                setStartTimes(startTimesResponse.data.data);\r\n            } else if (Array.isArray(startTimesResponse.data)) {\r\n                setStartTimes(startTimesResponse.data);\r\n            }\r\n\r\n            // Reset edit state\r\n            setEditingTimeId(null);\r\n            setNewStartTime('');\r\n        } catch (err) {\r\n            setError('Error updating start time: ' + (err.response?.data?.message || err.message));\r\n            console.error(\"Error updating start time:\", err);\r\n        } finally {\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    // Cancel editing start time\r\n    const handleCancelEditStartTime = () => {\r\n        setEditingTimeId(null);\r\n        setNewStartTime('');\r\n    };\r\n\r\n    const fitRouteOnMap = (routeStops) => {\r\n        if (!routeStops || routeStops.length === 0 || !mapRef.current) return;\r\n\r\n        // Get all stop coordinates, ensuring we have proper numeric values\r\n        const stopPositions = routeStops.map(routeStop => {\r\n            const stop = stops.find(s => s.id === routeStop.bus_stop_id);\r\n            if (!stop) return null;\r\n\r\n            const lat = parseFloat(stop.latitude);\r\n            const lng = parseFloat(stop.longitude);\r\n            if (isNaN(lat) || isNaN(lng)) return null;\r\n\r\n            return [lat, lng];\r\n        }).filter(Boolean);\r\n\r\n        if (stopPositions.length === 0) return;\r\n\r\n        if (stopPositions.length === 1) {\r\n            // If only one stop, center on it\r\n            setMapCenter(stopPositions[0]);\r\n            setZoom(16);\r\n        } else {\r\n            // Calculate bounds for multiple stops\r\n            const minLat = Math.min(...stopPositions.map(pos => pos[0]));\r\n            const maxLat = Math.max(...stopPositions.map(pos => pos[0]));\r\n            const minLng = Math.min(...stopPositions.map(pos => pos[1]));\r\n            const maxLng = Math.max(...stopPositions.map(pos => pos[1]));\r\n\r\n            // Center the map on the middle of the route\r\n            setMapCenter([\r\n                minLat + (maxLat - minLat) / 2,\r\n                minLng + (maxLng - minLng) / 2\r\n            ]);\r\n\r\n            // Calculate zoom level based on distance\r\n            const latDiff = maxLat - minLat;\r\n            const lngDiff = maxLng - minLng;\r\n            const maxDiff = Math.max(latDiff, lngDiff);\r\n\r\n            // Simple zoom calculation, adjust as needed\r\n            if (maxDiff < 0.005) setZoom(16);\r\n            else if (maxDiff < 0.01) setZoom(15);\r\n            else if (maxDiff < 0.02) setZoom(14);\r\n            else setZoom(13);\r\n        }\r\n    };\r\n\r\n    const getStopById = (stopId) => {\r\n        if (!stopId) return null;\r\n        const searchId = stopId.toString();\r\n        const stop = stops.find(stop => stop.id.toString() === searchId);\r\n        if (!stop) {\r\n            console.warn(`Stop with ID ${stopId} not found in loaded stops:`, stops);\r\n        }\r\n        return stop;\r\n    };\r\n\r\n    const getBusById = (busId) => {\r\n        return buses.find(bus => bus.id === busId);\r\n    };\r\n\r\n    // Simplified version - remove the special handling for start/end stops\r\n    // since we're treating it as a circular route\r\n    const getStopIcon = () => {\r\n        // Use a single color for all stops in a circular route\r\n        return L.icon({\r\n            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',\r\n            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\r\n            iconSize: [25, 41],\r\n            iconAnchor: [12, 41],\r\n            popupAnchor: [1, -34],\r\n            shadowSize: [41, 41]\r\n        });\r\n    };\r\n\r\n    // Begin editing a stop including name\r\n    const handleEditStopFull = (routeId) => {\r\n        const routeStop = formData.stops.find(stop => stop.id === routeId);\r\n        if (routeStop) {\r\n            setEditingStopId(routeId);\r\n            setEditingStopName(true);\r\n            setEditFormData({\r\n                stop_id: routeStop.bus_stop_id,\r\n                stop_order: routeStop.stop_order,\r\n                time_from_start: routeStop.time_from_start || 0\r\n            });\r\n        }\r\n    };\r\n\r\n    // Save edited stop including name change\r\n    const handleSaveStopFull = async () => {\r\n        if (!editingStopId) return;\r\n\r\n        try {\r\n            setMapLoading(true);\r\n            await axios.put(\r\n                getApiUrl(api.endpoints.adminUpdateRoute(editingStopId)),\r\n                {\r\n                    bus_stop_id: Number(editFormData.stop_id), // Ensure proper numeric conversion\r\n                    stop_order: parseInt(editFormData.stop_order),\r\n                    time_from_start: parseFloat(editFormData.time_from_start)\r\n                },\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n\r\n            // Refresh routes after update\r\n            const response = await axios.get(\r\n                getApiUrl(api.endpoints.adminRouteById(selectedBus)),\r\n                { headers: { Authorization: `Bearer ${user.token}` } }\r\n            );\r\n            const busRoutes = response.data;\r\n\r\n            // First erase old data\r\n            setFormData((prevData) => ({\r\n                ...prevData,\r\n                stops: []\r\n            }));\r\n\r\n            // Then, redraw after a short delay\r\n            setTimeout(() => {\r\n                setFormData({\r\n                    bus_id: selectedBus,\r\n                    stops: busRoutes\r\n                });\r\n                fitRouteOnMap(busRoutes);\r\n            }, 0);\r\n\r\n            // Reset edit state\r\n            setEditingStopId(null);\r\n            setEditingStopName(false);\r\n            setEditFormData({\r\n                stop_id: '',\r\n                stop_order: '',\r\n                time_from_start: ''\r\n            });\r\n\r\n            // Update map\r\n            fitRouteOnMap(busRoutes);\r\n        } catch (err) {\r\n            setError('Error updating stop: ' + (err.response?.data?.message || err.message));\r\n            console.error(\"Error updating stop:\", err);\r\n        } finally {\r\n            setMapLoading(false);\r\n        }\r\n    };\r\n\r\n    // Cancel editing stop\r\n    const handleCancelStopEdit = () => {\r\n        setEditingStopId(null);\r\n        setEditingStopName(false);\r\n        setEditFormData({\r\n            stop_id: '',\r\n            stop_order: '',\r\n            time_from_start: ''\r\n        });\r\n    };\r\n\r\n    if (loading && !buses.length && !stops.length) {\r\n        return <div>Loading route data...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"route-management\">\r\n            {/* Full-page loading overlay */}\r\n            {mapLoading && (\r\n                <div className=\"fullpage-loading-overlay\">\r\n                    <p>Loading routes...</p>\r\n                </div>\r\n            )}\r\n            <h2>Route Management</h2>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n\r\n            <div className=\"action-buttons\">\r\n                <button\r\n                    className=\"refresh-button\"\r\n                    onClick={() => setRefreshTrigger(prev => prev + 1)}\r\n                    disabled={loading}\r\n                >\r\n                    {loading ? 'Refreshing...' : 'Refresh Data'}\r\n                </button>\r\n\r\n                <button onClick={() => setShowMapDebug(!showMapDebug)}>\r\n                    {showMapDebug ? \"Hide Debug Info\" : \"Show Debug Info\"}\r\n                </button>\r\n            </div>\r\n\r\n            {showMapDebug && (\r\n                <div className=\"debug-info\" style={{ padding: '10px', backgroundColor: '#f0f0f0', margin: '10px 0', borderRadius: '5px' }}>\r\n                    <h4>Route Debug Information</h4>\r\n                    <p>Buses Loaded: {buses.length}</p>\r\n                    <p>Stops Loaded: {stops.length}</p>\r\n                    <p>Selected Bus: {selectedBus ? getBusById(selectedBus)?.name : 'None'}</p>\r\n                    <p>Route Stops: {formData.stops.length}</p>\r\n                    <p>Map Center: {mapCenter.join(', ')}</p>\r\n                    <button onClick={() => {\r\n                        window.routeDiagnostics.logState();\r\n                        console.log(\"Current formData:\", formData);\r\n                    }}>\r\n                        Log Debug Info to Console\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"route-management-content\">\r\n                <div className=\"bus-selector\">\r\n                    <h3>Select Bus to Manage Route</h3>\r\n                    <div className=\"bus-list\">\r\n                        {buses.map(bus => (\r\n                            <button \r\n                                key={bus.id} \r\n                                className={selectedBus === bus.id ? 'selected' : ''} \r\n                                onClick={() => handleBusSelect(bus.id)}\r\n                            >\r\n                                {bus.name}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                {selectedBus && (\r\n                    <div className=\"route-editor\">\r\n                        <h3>Route for {getBusById(selectedBus)?.name}</h3>\r\n\r\n                        {/* Start Times Management Section */}\r\n                        <div className=\"start-times-section\">\r\n                            <h4>Bus Start Times</h4>\r\n                            \r\n                            <table className=\"start-times-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Repetition</th>\r\n                                        <th>Start Time</th>\r\n                                        <th>Actions</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {startTimes.length === 0 ? (\r\n                                        <tr>\r\n                                            <td colSpan=\"3\">No start times defined yet.</td>\r\n                                        </tr>\r\n                                    ) : (\r\n                                        startTimes.map(time => (\r\n                                            <tr key={time.id}>\r\n                                                <td>{time.rep_no}</td>\r\n                                                <td>\r\n                                                    {editingTimeId === time.id ? (\r\n                                                        <input\r\n                                                            type=\"time\"\r\n                                                            value={newStartTime}\r\n                                                            onChange={(e) => setNewStartTime(e.target.value)}\r\n                                                            required\r\n                                                        />\r\n                                                    ) : (\r\n                                                        time.start_time\r\n                                                    )}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {editingTimeId === time.id ? (\r\n                                                        <>\r\n                                                            <button onClick={handleSaveStartTime}>Save</button>\r\n                                                            <button onClick={handleCancelEditStartTime}>Cancel</button>\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            <button onClick={() => handleEditStartTime(time.id)}>Edit</button>\r\n                                                            <button \r\n                                                                onClick={() => handleDeleteStartTime(time.id)}\r\n                                                                className=\"delete-time-button\"\r\n                                                            >\r\n                                                                Delete\r\n                                                            </button>\r\n                                                        </>\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                            \r\n                            {isAddingStartTime ? (\r\n                                <div className=\"add-start-time-form\">\r\n                                    <h5>Add New Start Time</h5>\r\n                                    <div className=\"form-group\">\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            value={newStartTime}\r\n                                            onChange={(e) => setNewStartTime(e.target.value)}\r\n                                            placeholder=\"HH:MM\"\r\n                                            required\r\n                                        />\r\n                                        <div className=\"form-buttons\">\r\n                                            <button onClick={handleAddStartTime}>Save</button>\r\n                                            <button onClick={() => {\r\n                                                setIsAddingStartTime(false);\r\n                                                setNewStartTime('');\r\n                                            }}>Cancel</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            ) : (\r\n                                <button\r\n                                    className=\"add-start-time-button\"\r\n                                    onClick={() => setIsAddingStartTime(true)}\r\n                                >\r\n                                    Add Start Time\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n\r\n                        <h4>Route Stops</h4>\r\n                        {formData.stops.length === 0 ? (\r\n                            <p>No stops assigned to this route. Add stops below.</p>\r\n                        ) : (\r\n                            <table className=\"route-stops-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Order</th>\r\n                                        <th>Stop Name</th>\r\n                                        <th>Time (minutes from start)</th>\r\n                                        <th>Actions</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {[...formData.stops]\r\n                                        .sort((a, b) => a.stop_order - b.stop_order)\r\n                                        .map(routeStop => {\r\n                                            const stop = getStopById(routeStop.bus_stop_id);\r\n                                            const stopName = stop ? stop.name : `Unknown Stop (ID: ${routeStop.bus_stop_id})`;\r\n                                            return (\r\n                                                <tr key={`${routeStop.id}-${refreshTrigger}`}>\r\n                                                    <td>{routeStop.stop_order}</td>\r\n                                                    <td>\r\n                                                        {editingStopId === routeStop.id && editingStopName ? (\r\n                                                            <select\r\n                                                                value={editFormData.stop_id}\r\n                                                                onChange={(e) =>\r\n                                                                    setEditFormData({\r\n                                                                        ...editFormData,\r\n                                                                        stop_id: e.target.value\r\n                                                                    })\r\n                                                                }\r\n                                                            >\r\n                                                                <option value=\"\">Select Stop</option>\r\n                                                                {stops.map(s => (\r\n                                                                    <option key={s.id} value={s.id}>\r\n                                                                        {s.name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </select>\r\n                                                        ) : (\r\n                                                            stopName\r\n                                                        )}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {editingStopId === routeStop.id ? (\r\n                                                            <input\r\n                                                                type=\"number\"\r\n                                                                min=\"0\"\r\n                                                                step=\"0.1\"\r\n                                                                value={editFormData.time_from_start}\r\n                                                                onChange={(e) =>\r\n                                                                    setEditFormData({\r\n                                                                        ...editFormData,\r\n                                                                        time_from_start: e.target.value\r\n                                                                    })\r\n                                                                }\r\n                                                                required\r\n                                                            />\r\n                                                        ) : (\r\n                                                            <span>{routeStop.time_from_start || 0}</span>\r\n                                                        )}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {editingStopId === routeStop.id ? (\r\n                                                            <>\r\n                                                                <button onClick={handleSaveStopFull}>Save</button>\r\n                                                                <button onClick={handleCancelStopEdit}>Cancel</button>\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <>\r\n                                                                <button onClick={() => handleEditStopFull(routeStop.id)}>\r\n                                                                    Edit\r\n                                                                </button>\r\n                                                                <button onClick={() => handleRemoveStop(routeStop.id)}>\r\n                                                                    Remove\r\n                                                                </button>\r\n                                                            </>\r\n                                                        )}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        })}\r\n                                </tbody>\r\n                            </table>\r\n                        )}\r\n\r\n                        {/* Add Stop Form */}\r\n                        {isAddingStop ? (\r\n                            <div className=\"add-stop-form\">\r\n                                <h5>Add New Stop</h5>\r\n                                <div className=\"form-group\">\r\n                                    <select\r\n                                        value={editFormData.stop_id}\r\n                                        onChange={(e) => setEditFormData({\r\n                                            ...editFormData,\r\n                                            stop_id: e.target.value\r\n                                        })}\r\n                                        required\r\n                                    >\r\n                                        <option value=\"\">Select Stop</option>\r\n                                        {stops.map(stop => (\r\n                                            <option key={stop.id} value={stop.id}>\r\n                                                {stop.name}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n                                    <div className=\"form-buttons\">\r\n                                        <button onClick={() => handleAddStop(editFormData.stop_id)}>Add</button>\r\n                                        <button onClick={() => setIsAddingStop(false)}>Cancel</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ) : (\r\n                            <button\r\n                                className=\"add-stop-button\"\r\n                                onClick={() => setIsAddingStop(true)}\r\n                            >\r\n                                Add Stop\r\n                            </button>\r\n                        )}\r\n\r\n                        {/* Wrap the map in a container so that it appears on the right half */}\r\n                        <div className=\"route-map-container\">\r\n                            <MapContainer\r\n                                center={mapCenter}\r\n                                zoom={zoom}\r\n                                style={{ height: '400px', width: '100%' }}\r\n                                whenCreated={mapInstance => mapRef.current = mapInstance}\r\n                            >\r\n                                <TileLayer\r\n                                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                                />\r\n                                <MapUpdater center={mapCenter} zoom={zoom} />\r\n                                <RoadBasedRoutes stops={formData.stops} />\r\n\r\n                                {stops.map(stop => {\r\n                                    const appearances = formData.stops.filter(s => \r\n                                        s.bus_stop_id?.toString() === stop.id?.toString()\r\n                                    );\r\n                                    if (appearances.length > 0) {\r\n                                        return (\r\n                                            <Marker key={stop.id} position={[parseFloat(stop.latitude), parseFloat(stop.longitude)]} icon={getStopIcon()}>\r\n                                                <Popup>\r\n                                                    <div>\r\n                                                        <strong>{stop.name}</strong>\r\n                                                        <br />\r\n                                                        {appearances.map((a, idx) => \r\n                                                            `Stop ${a.stop_order}: ${a.time_from_start || 0} min`\r\n                                                        ).join(', ')}\r\n                                                    </div>\r\n                                                </Popup>\r\n                                            </Marker>\r\n                                        );\r\n                                    }\r\n                                    return null;\r\n                                })}\r\n                            </MapContainer>\r\n                        </div>\r\n\r\n                        {/* Route status indicator */}\r\n                        {selectedBus && (\r\n                            <div className=\"route-status\" style={{ textAlign: 'center', marginTop: '10px' }}>\r\n                                <p>\r\n                                    <strong>Route Status:</strong> {formData.stops.length < 2\r\n                                        ? \"Add at least 2 stops to create a route\"\r\n                                        : `Route with ${formData.stops.length} stops and ${startTimes.length} scheduled departure times`}\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RouteManagement;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}