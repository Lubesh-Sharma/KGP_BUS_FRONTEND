{"ast":null,"code":"var _jsxFileName = \"/home/lubesh/Desktop/DBMS/KGP_Bus/frontend/src/components/driver_pages/driver.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport DriverMap from './DriverMap';\nimport api from '../../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Driver() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const verifyDriverAccess = async () => {\n      try {\n        setLoading(true);\n        // First try to get user from localStorage\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          const parsedUser = JSON.parse(storedUser);\n          if (parsedUser.role === 'driver' && parsedUser.id.toString() === id) {\n            setUser(parsedUser);\n            setLoading(false);\n            return;\n          }\n        }\n\n        // If no stored user or not matching, fetch from API\n        const token = localStorage.getItem('jwtToken');\n        if (!token) {\n          throw new Error(\"No authentication token found\");\n        }\n        const response = await api.get(`/logged_in/${id}/driver`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (response.data && response.data.user) {\n          const userData = response.data.user;\n          setUser(userData);\n          // Store updated user data\n          localStorage.setItem('user', JSON.stringify(userData));\n        } else {\n          throw new Error(\"Invalid user data received\");\n        }\n      } catch (err) {\n        console.error(\"Error verifying driver access:\", err);\n        setError(\"You don't have permission to access this page or your session has expired.\");\n\n        // Redirect to login after 2 seconds if there's an auth error\n        setTimeout(() => navigate('/login'), 2000);\n      } finally {\n        setLoading(false);\n      }\n    };\n    verifyDriverAccess();\n  }, [id, navigate]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: \"Loading driver dashboard...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Access Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/login'),\n        children: \"Go to Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"driver-dashboard\",\n    children: /*#__PURE__*/_jsxDEV(DriverMap, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(Driver, \"UsiMuesEQHqzECPEsPNTMkiwIjE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Driver;\nexport default Driver;\nvar _c;\n$RefreshReg$(_c, \"Driver\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","DriverMap","api","jsxDEV","_jsxDEV","Driver","_s","user","setUser","loading","setLoading","error","setError","id","navigate","verifyDriverAccess","storedUser","localStorage","getItem","parsedUser","JSON","parse","role","toString","token","Error","response","get","headers","data","userData","setItem","stringify","err","console","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/lubesh/Desktop/DBMS/KGP_Bus/frontend/src/components/driver_pages/driver.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport DriverMap from './DriverMap';\nimport api from '../../utils/api';\n\nfunction Driver() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const verifyDriverAccess = async () => {\n      try {\n        setLoading(true);\n        // First try to get user from localStorage\n        const storedUser = localStorage.getItem('user');\n        \n        if (storedUser) {\n          const parsedUser = JSON.parse(storedUser);\n          if (parsedUser.role === 'driver' && parsedUser.id.toString() === id) {\n            setUser(parsedUser);\n            setLoading(false);\n            return;\n          }\n        }\n\n        // If no stored user or not matching, fetch from API\n        const token = localStorage.getItem('jwtToken');\n        if (!token) {\n          throw new Error(\"No authentication token found\");\n        }\n\n        const response = await api.get(`/logged_in/${id}/driver`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        if (response.data && response.data.user) {\n          const userData = response.data.user;\n          setUser(userData);\n          // Store updated user data\n          localStorage.setItem('user', JSON.stringify(userData));\n        } else {\n          throw new Error(\"Invalid user data received\");\n        }\n      } catch (err) {\n        console.error(\"Error verifying driver access:\", err);\n        setError(\"You don't have permission to access this page or your session has expired.\");\n        \n        // Redirect to login after 2 seconds if there's an auth error\n        setTimeout(() => navigate('/login'), 2000);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    verifyDriverAccess();\n  }, [id, navigate]);\n\n  if (loading) {\n    return <div className=\"loading-container\">Loading driver dashboard...</div>;\n  }\n\n  if (error) {\n    return (\n      <div className=\"error-container\">\n        <h2>Access Error</h2>\n        <p>{error}</p>\n        <button onClick={() => navigate('/login')}>Go to Login</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"driver-dashboard\">\n      <DriverMap user={user} />\n    </div>\n  );\n}\n\nexport default Driver;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}