{"ast":null,"code":"var _jsxFileName = \"/home/lubesh/Desktop/DBMS/KGP_Bus/frontend/src/components/driver_pages/DriverMapScreen.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$(),\n  _s9 = $RefreshSig$(),\n  _s10 = $RefreshSig$(),\n  _s11 = $RefreshSig$(),\n  _s12 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMap, useMapEvents } from 'react-leaflet';\nimport L from 'leaflet';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { getApiUrl } from '../../utils/api2.js';\nimport '../../css/DriverMapScreen.css';\n\n// Fix for default marker icon in Leaflet with React\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',\n  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',\n  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png'\n});\n\n// Custom bus icon\nconst busIcon = new L.Icon({\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/30/30979.png',\n  iconSize: [40, 40],\n  iconAnchor: [20, 40],\n  popupAnchor: [0, -40]\n});\n\n// Bus stop icon\nconst busStopIcon = new L.Icon({\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/1165/1165895.png',\n  iconSize: [24, 24],\n  iconAnchor: [12, 24],\n  popupAnchor: [0, -24]\n});\n\n// Next stop icon (highlighted)\nconst nextStopIcon = new L.Icon({\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/1165/1165895.png',\n  iconSize: [36, 36],\n  iconAnchor: [18, 36],\n  popupAnchor: [0, -36],\n  className: 'next-stop-icon' // CSS class for styling\n});\n\n// Component to handle map centering\nconst MapController = ({\n  center,\n  zoom\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (center) {\n      map.setView(center, zoom || map.getZoom());\n    }\n  }, [center, zoom, map]);\n  return null;\n};\n\n// Component to update driver's location in the database\n_s(MapController, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapController;\nconst LocationUpdater = ({\n  driverId,\n  busId,\n  position\n}) => {\n  _s2();\n  useEffect(() => {\n    if (!position || !busId) return;\n    const updateLocation = async () => {\n      try {\n        await axios.post(getApiUrl('/driver/update-location'), {\n          busId,\n          latitude: position[0],\n          longitude: position[1]\n        }, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n          }\n        });\n        console.log('Location updated successfully');\n      } catch (error) {\n        console.error('Error updating location:', error);\n      }\n    };\n    updateLocation();\n\n    // Update location every 10 seconds (changed from 5 seconds)\n    const interval = setInterval(updateLocation, 10000);\n    return () => clearInterval(interval);\n  }, [position, busId, driverId]);\n  return null;\n};\n\n// Component to detect proximity to next bus stop\n_s2(LocationUpdater, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = LocationUpdater;\nconst ProximityDetector = ({\n  busId,\n  position,\n  nextStop,\n  onStopReached\n}) => {\n  _s3();\n  useEffect(() => {\n    if (!position || !nextStop || !busId) return;\n    const checkProximity = () => {\n      const nextStopPosition = [parseFloat(nextStop.latitude), parseFloat(nextStop.longitude)];\n\n      // Calculate distance between driver and next stop (in meters)\n      const distance = L.latLng(position).distanceTo(L.latLng(nextStopPosition));\n\n      // If within 30 meters, mark the stop as cleared\n      if (distance <= 30) {\n        console.log(`Within 30m of next stop (${distance.toFixed(2)}m). Auto-clearing stop.`);\n        onStopReached(busId, nextStop.stop_id);\n      }\n    };\n\n    // Check proximity every second\n    const interval = setInterval(checkProximity, 1000);\n    return () => clearInterval(interval);\n  }, [position, nextStop, busId, onStopReached]);\n  return null;\n};\n\n// Component to draw OSRM route between stops\n_s3(ProximityDetector, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c3 = ProximityDetector;\nconst OsrmRoutes = ({\n  stops,\n  currentPosition,\n  lastClearedStopIndex,\n  nextStopIndex\n}) => {\n  _s4();\n  const map = useMap();\n  const routeRef = useRef(null);\n  const nextSegmentRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stops || stops.length < 2 || !map) return;\n    const fetchAndDrawFullRoute = async () => {\n      try {\n        setIsLoading(true);\n\n        // Clear previous route\n        if (routeRef.current) {\n          map.removeLayer(routeRef.current);\n          routeRef.current = null;\n        }\n\n        // Build waypoints for the complete route\n        const waypoints = stops.map(stop => [parseFloat(stop.longitude), parseFloat(stop.latitude)]);\n\n        // Close the loop for circular route\n        waypoints.push(waypoints[0]);\n\n        // Convert waypoints to the format expected by OSRM API\n        const waypointsString = waypoints.map(wp => wp.join(',')).join(';');\n        const response = await axios.get(`https://router.project-osrm.org/route/v1/driving/${waypointsString}?overview=full&geometries=geojson`);\n        if (response.data.code === 'Ok' && response.data.routes.length > 0) {\n          const routeGeometry = response.data.routes[0].geometry.coordinates;\n          // OSRM returns coordinates as [lng, lat], we need to flip for Leaflet\n          const coordinates = routeGeometry.map(coord => [coord[1], coord[0]]);\n\n          // Create a polyline for the full route\n          const polyline = L.polyline(coordinates, {\n            color: '#3388ff',\n            weight: 4,\n            opacity: 0.6,\n            lineJoin: 'round'\n          }).addTo(map);\n          routeRef.current = polyline;\n        }\n      } catch (error) {\n        console.error('Error fetching full route:', error);\n      }\n    };\n    const fetchAndDrawNextSegment = async () => {\n      try {\n        // Clear previous next segment route\n        if (nextSegmentRef.current) {\n          map.removeLayer(nextSegmentRef.current);\n          nextSegmentRef.current = null;\n        }\n\n        // Only draw if we have a last cleared stop and next stop\n        if (lastClearedStopIndex !== null && nextStopIndex !== null) {\n          const lastClearedStop = stops[lastClearedStopIndex];\n          const nextStop = stops[nextStopIndex];\n\n          // Build waypoints from last cleared stop to next stop\n          const waypoints = [[parseFloat(lastClearedStop.longitude), parseFloat(lastClearedStop.latitude)],\n          // Last cleared stop [lng, lat]\n          [parseFloat(nextStop.longitude), parseFloat(nextStop.latitude)] // Next stop [lng, lat]\n          ];\n\n          // Convert waypoints to the format expected by OSRM API\n          const waypointsString = waypoints.map(wp => wp.join(',')).join(';');\n          const response = await axios.get(`https://router.project-osrm.org/route/v1/driving/${waypointsString}?overview=full&geometries=geojson`);\n          if (response.data.code === 'Ok' && response.data.routes.length > 0) {\n            const routeGeometry = response.data.routes[0].geometry.coordinates;\n            // OSRM returns coordinates as [lng, lat], we need to flip for Leaflet\n            const coordinates = routeGeometry.map(coord => [coord[1], coord[0]]);\n\n            // Create a highlighted polyline for the next segment\n            const polyline = L.polyline(coordinates, {\n              color: '#FF0000',\n              // Red color for the highlighted segment\n              weight: 6,\n              opacity: 0.9,\n              lineJoin: 'round'\n            }).addTo(map);\n            nextSegmentRef.current = polyline;\n          }\n        }\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching next segment route:', error);\n        setIsLoading(false);\n      }\n    };\n    setIsLoading(true);\n    fetchAndDrawFullRoute().then(() => fetchAndDrawNextSegment());\n\n    // Clean up function\n    return () => {\n      if (routeRef.current && map) {\n        map.removeLayer(routeRef.current);\n      }\n      if (nextSegmentRef.current && map) {\n        map.removeLayer(nextSegmentRef.current);\n      }\n    };\n  }, [map, stops, lastClearedStopIndex, nextStopIndex]); // Add currentPosition back to dependency array\n\n  // Return the loading overlay if routes are being fetched\n  return isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"osrm-loading-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"osrm-loading-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"osrm-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Updating route...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this) : null;\n};\n\n// Component for tracking driver location with geolocation API\n_s4(OsrmRoutes, \"GALYDOelLX6PysKIPVgChX8s6T0=\", false, function () {\n  return [useMap];\n});\n_c4 = OsrmRoutes;\nconst DriverLocationTracker = ({\n  setPosition\n}) => {\n  _s5();\n  const map = useMapEvents({\n    locationfound(e) {\n      setPosition([e.latlng.lat, e.latlng.lng]);\n    },\n    locationerror(e) {\n      console.error('Location error:', e.message);\n      alert('Could not get your location. Please enable location services.');\n    }\n  });\n  useEffect(() => {\n    // Start tracking location when component mounts\n    map.locate({\n      watch: true,\n      enableHighAccuracy: true\n    });\n    return () => {\n      map.stopLocate();\n    };\n  }, [map]);\n  return null;\n};\n\n// Button to center map on driver's location\n_s5(DriverLocationTracker, \"gWh149/DLPuF22WgXAndVVlzhL4=\", false, function () {\n  return [useMapEvents];\n});\n_c5 = DriverLocationTracker;\nconst LocationButton = ({\n  position,\n  setCenter,\n  busInfo\n}) => {\n  _s6();\n  // Remove mapZoom and setMapZoom that are causing unused variable warnings\n  const map = useRef(null); // Use a ref instead of useMap() hook\n\n  const handleClick = () => {\n    if (position) {\n      // If we have the driver's position, center on that with maximum zoom\n      setCenter(position);\n      // We'll now handle the zoom in the MapController component\n      console.log('Centering map on driver position with maximum zoom:', position);\n    } else if (busInfo && busInfo.nextStop) {\n      // Fall back to the next bus stop if driver position isn't available\n      const nextStopPosition = [parseFloat(busInfo.nextStop.latitude), parseFloat(busInfo.nextStop.longitude)];\n      setCenter(nextStopPosition);\n      console.log('Centering map on next stop:', nextStopPosition);\n    } else if (busInfo && busInfo.route && busInfo.route.length > 0) {\n      // Fall back to the first stop in the route\n      const firstStopPosition = [parseFloat(busInfo.route[0].latitude), parseFloat(busInfo.route[0].longitude)];\n      setCenter(firstStopPosition);\n      console.log('Centering map on first stop in route:', firstStopPosition);\n    } else {\n      // Default to IIT KGP location\n      const defaultPosition = [22.3190, 87.3091];\n      setCenter(defaultPosition);\n      console.log('Centering map on default location:', defaultPosition);\n    }\n  };\n\n  // Always make the button clickable\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"location-button\",\n    onClick: handleClick,\n    title: position ? \"Center map on your location\" : \"Center map on route\",\n    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas fa-location-arrow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), \" \", position ? \"Your Location\" : \"Center Map\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 5\n  }, this);\n};\n\n// Rename these components to indicate they're unused or add eslint-disable comments\n// eslint-disable-next-line no-unused-vars\n_s6(LocationButton, \"MeRFS63g5R81qydl2773qdsa2PI=\");\n_c6 = LocationButton;\nconst UnusedClearStopButton = ({\n  busId,\n  stopId,\n  onStopCleared,\n  isNextStop\n}) => {\n  _s7();\n  const [loading, setLoading] = useState(false);\n  const handleClearStop = async () => {\n    if (!busId || !stopId) return;\n    try {\n      setLoading(true);\n      const response = await axios.post(getApiUrl('/driver/clear-stop'), {\n        busId,\n        stopId\n      }, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n        }\n      });\n      if (response.data) {\n        console.log('Stop cleared successfully');\n        if (onStopCleared) onStopCleared(response.data.data);\n      }\n    } catch (error) {\n      console.error('Error clearing stop:', error);\n      alert('Failed to mark stop as cleared. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (!isNextStop) return null;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"clear-stop-button\",\n    onClick: handleClearStop,\n    disabled: loading,\n    children: loading ? 'Marking...' : 'Mark as Cleared'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 357,\n    columnNumber: 5\n  }, this);\n};\n\n// eslint-disable-next-line no-unused-vars\n_s7(UnusedClearStopButton, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\n_c7 = UnusedClearStopButton;\nconst UnusedTurnNotification = ({\n  stops,\n  currentPosition,\n  lastClearedStopIndex,\n  nextStopIndex\n}) => {\n  _s8();\n  const [showNotification, setShowNotification] = useState(false);\n  const [turnDirection, setTurnDirection] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const notificationRef = useRef(null);\n  useEffect(() => {\n    if (!stops || !currentPosition || lastClearedStopIndex === null || nextStopIndex === null) return;\n    const lastStop = stops[lastClearedStopIndex];\n    const nextStop = stops[nextStopIndex];\n\n    // Calculate upcoming turns by comparing bearings\n    const calculateTurn = () => {\n      const currentPos = L.latLng(currentPosition);\n      const lastStopPos = L.latLng(parseFloat(lastStop.latitude), parseFloat(lastStop.longitude));\n      const nextStopPos = L.latLng(parseFloat(nextStop.latitude), parseFloat(nextStop.longitude));\n\n      // Calculate bearings\n      const bearingToNext = calculateBearing(currentPos, nextStopPos);\n\n      // Calculate distance to next stop\n      const distanceToNext = currentPos.distanceTo(nextStopPos);\n      setDistance(distanceToNext);\n\n      // Determine if there's a turn coming up (within 100m)\n      if (distanceToNext <= 100) {\n        // Calculate current heading based on last few positions\n        // This is simplified - ideally, you'd track recent positions to determine heading\n        const currentHeading = calculateBearing(lastStopPos, currentPos);\n\n        // Calculate angle between current heading and bearing to next stop\n        const angle = Math.abs(bearingToNext - currentHeading);\n        const normalizedAngle = angle > 180 ? 360 - angle : angle;\n\n        // Determine turn direction based on angle\n        if (normalizedAngle > 30 && normalizedAngle < 150) {\n          if (bearingToNext > currentHeading && bearingToNext - currentHeading < 180 || currentHeading > bearingToNext && currentHeading - bearingToNext > 180) {\n            setTurnDirection('right');\n          } else {\n            setTurnDirection('left');\n          }\n\n          // Show notification 5 seconds before turn (assume average speed of 5m/s)\n          if (distanceToNext <= 25) {\n            setShowNotification(true);\n\n            // Hide notification 5 seconds after passing the turn\n            const hideTimeout = setTimeout(() => {\n              setShowNotification(false);\n            }, 10000); // 5 seconds before + 5 seconds after = 10 seconds total\n\n            return () => clearTimeout(hideTimeout);\n          }\n        } else {\n          setTurnDirection('straight');\n        }\n      } else {\n        setTurnDirection(null);\n        setShowNotification(false);\n      }\n    };\n\n    // Calculate turn every 1 second\n    const interval = setInterval(calculateTurn, 1000);\n    return () => clearInterval(interval);\n  }, [stops, currentPosition, lastClearedStopIndex, nextStopIndex]);\n\n  // Helper function to calculate bearing between two points\n  const calculateBearing = (start, end) => {\n    const startLat = start.lat * Math.PI / 180;\n    const startLng = start.lng * Math.PI / 180;\n    const endLat = end.lat * Math.PI / 180;\n    const endLng = end.lng * Math.PI / 180;\n    const y = Math.sin(endLng - startLng) * Math.cos(endLat);\n    const x = Math.cos(startLat) * Math.sin(endLat) - Math.sin(startLat) * Math.cos(endLat) * Math.cos(endLng - startLng);\n    let bearing = Math.atan2(y, x) * 180 / Math.PI;\n    if (bearing < 0) bearing += 360;\n    return bearing;\n  };\n  if (!showNotification) return null;\n\n  // Render turn notification\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"turn-notification\",\n    ref: notificationRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"turn-icon\",\n      children: [turnDirection === 'left' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 38\n      }, this), turnDirection === 'right' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 39\n      }, this), turnDirection === 'straight' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"turn-text\",\n      children: [turnDirection === 'left' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Turn left in \", Math.round(distance), \" meters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 38\n      }, this), turnDirection === 'right' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Turn right in \", Math.round(distance), \" meters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 39\n      }, this), turnDirection === 'straight' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Continue straight for \", Math.round(distance), \" meters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 465,\n    columnNumber: 5\n  }, this);\n};\n\n// Component to update next stop distance in the UI\n_s8(UnusedTurnNotification, \"uLacB8YG+OyfTtGa+mjBcznmiBo=\");\n_c8 = UnusedTurnNotification;\nconst NextStopDistanceUpdater = ({\n  position,\n  nextStop\n}) => {\n  _s9();\n  useEffect(() => {\n    if (!position || !nextStop) return;\n    const updateDistance = () => {\n      const nextStopPosition = [parseFloat(nextStop.latitude), parseFloat(nextStop.longitude)];\n\n      // Calculate distance between driver and next stop (in meters)\n      const distance = L.latLng(position).distanceTo(L.latLng(nextStopPosition));\n\n      // Update the distance display in the UI\n      const distanceElement = document.getElementById('next-stop-distance');\n      if (distanceElement) {\n        distanceElement.textContent = `${Math.round(distance)} meters`;\n      }\n    };\n\n    // Update immediately and then every second\n    updateDistance();\n    const interval = setInterval(updateDistance, 1000);\n    return () => clearInterval(interval);\n  }, [position, nextStop]);\n  return null;\n};\n\n// Simplified permanent directions component\n_s9(NextStopDistanceUpdater, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c9 = NextStopDistanceUpdater;\nconst PermanentDirections = ({\n  stops,\n  currentPosition,\n  lastClearedStopIndex,\n  nextStopIndex\n}) => {\n  _s10();\n  const [direction, setDirection] = useState(null);\n  const [distance, setDistance] = useState(null);\n  useEffect(() => {\n    if (!stops || !currentPosition || lastClearedStopIndex === null || nextStopIndex === null) return;\n\n    // Use nextStop directly and remove reference to lastStop that isn't used\n    const nextStop = stops[nextStopIndex];\n\n    // Calculate heading and distance continuously\n    const calculateDirections = () => {\n      const currentPos = L.latLng(currentPosition);\n      const nextStopPos = L.latLng(parseFloat(nextStop.latitude), parseFloat(nextStop.longitude));\n\n      // Calculate distance to next stop\n      const distanceToNext = currentPos.distanceTo(nextStopPos);\n      setDistance(Math.round(distanceToNext));\n\n      // Get route from current position to next stop using Leaflet routing\n      // (This is a simplification - in a real app we'd use the OSRM route data)\n      const bearing = calculateBearing(currentPos, nextStopPos);\n\n      // Determine direction based on bearing\n      if (bearing >= 337.5 || bearing < 22.5) {\n        setDirection('north');\n      } else if (bearing >= 22.5 && bearing < 67.5) {\n        setDirection('northeast');\n      } else if (bearing >= 67.5 && bearing < 112.5) {\n        setDirection('east');\n      } else if (bearing >= 112.5 && bearing < 157.5) {\n        setDirection('southeast');\n      } else if (bearing >= 157.5 && bearing < 202.5) {\n        setDirection('south');\n      } else if (bearing >= 202.5 && bearing < 247.5) {\n        setDirection('southwest');\n      } else if (bearing >= 247.5 && bearing < 292.5) {\n        setDirection('west');\n      } else {\n        setDirection('northwest');\n      }\n    };\n\n    // Calculate initially and then every second\n    calculateDirections();\n    const interval = setInterval(calculateDirections, 1000);\n    return () => clearInterval(interval);\n  }, [stops, currentPosition, lastClearedStopIndex, nextStopIndex]);\n\n  // Helper function to calculate bearing between two points\n  const calculateBearing = (start, end) => {\n    const startLat = start.lat * Math.PI / 180;\n    const startLng = start.lng * Math.PI / 180;\n    const endLat = end.lat * Math.PI / 180;\n    const endLng = end.lng * Math.PI / 180;\n    const y = Math.sin(endLng - startLng) * Math.cos(endLat);\n    const x = Math.cos(startLat) * Math.sin(endLat) - Math.sin(startLat) * Math.cos(endLat) * Math.cos(endLng - startLng);\n    let bearing = Math.atan2(y, x) * 180 / Math.PI;\n    if (bearing < 0) bearing += 360;\n    return bearing;\n  };\n\n  // Always render the directions panel\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"permanent-directions\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"direction-icon\",\n      children: [direction === 'north' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 35\n      }, this), direction === 'northeast' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-up\",\n        style: {\n          transform: 'rotate(45deg)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 39\n      }, this), direction === 'east' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 34\n      }, this), direction === 'southeast' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-down\",\n        style: {\n          transform: 'rotate(-45deg)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 39\n      }, this), direction === 'south' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-down\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 35\n      }, this), direction === 'southwest' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-down\",\n        style: {\n          transform: 'rotate(45deg)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 39\n      }, this), direction === 'west' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 34\n      }, this), direction === 'northwest' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-up\",\n        style: {\n          transform: 'rotate(-45deg)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"direction-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Head \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: direction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 17\n        }, this), \" for \", distance, \" meters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Next stop: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: stops[nextStopIndex].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 584,\n    columnNumber: 5\n  }, this);\n};\n\n// Button to center map on driver's location that is now placed inside MapContainer\n_s10(PermanentDirections, \"W0cCA7sXMQtYIEyIdF68JfflV4U=\");\n_c10 = PermanentDirections;\nconst MapControlButtons = () => {\n  _s11();\n  const map = useMap();\n  const {\n    position,\n    busInfo\n  } = React.useContext(DriverMapContext);\n  const handleCenterMap = () => {\n    if (!map) return;\n    try {\n      if (position) {\n        // If we have the driver's position, center on that with maximum zoom\n        map.setView(position, 19); // Set to maximum zoom\n        console.log('Centering map on driver position with maximum zoom:', position);\n      } else if (busInfo && busInfo.nextStop) {\n        // Fall back to the next bus stop if driver position isn't available\n        const nextStopPosition = [parseFloat(busInfo.nextStop.latitude), parseFloat(busInfo.nextStop.longitude)];\n        map.setView(nextStopPosition, 15);\n        console.log('Centering map on next stop:', nextStopPosition);\n      } else if (busInfo && busInfo.route && busInfo.route.length > 0) {\n        // Fall back to the first stop in the route\n        const firstStopPosition = [parseFloat(busInfo.route[0].latitude), parseFloat(busInfo.route[0].longitude)];\n        map.setView(firstStopPosition, 15);\n        console.log('Centering map on first stop in route:', firstStopPosition);\n      }\n    } catch (error) {\n      console.error('Error centering map:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-control-buttons leaflet-bottom leaflet-right\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leaflet-control leaflet-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"center-map-button\",\n        onClick: handleCenterMap,\n        title: position ? \"Center map on your location\" : \"Center map on route\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-location-arrow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 639,\n    columnNumber: 5\n  }, this);\n};\n\n// Create a context to share state between components\n_s11(MapControlButtons, \"gKR/0WN7yStLM9ESFPv3I4akn9A=\", false, function () {\n  return [useMap];\n});\n_c11 = MapControlButtons;\nconst DriverMapContext = /*#__PURE__*/React.createContext({\n  position: null,\n  busInfo: null,\n  zoom: 15,\n  setPosition: () => {},\n  setZoom: () => {}\n});\nfunction DriverMapScreen() {\n  _s12();\n  const [position, setPosition] = useState(null);\n  const [center, setCenter] = useState(null);\n  const [zoom, setZoom] = useState(15); // Add zoom state\n  const [busInfo, setBusInfo] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [mapReady, setMapReady] = useState(false);\n  const navigate = useNavigate();\n\n  // For the map\n  const mapRef = useRef(null);\n\n  // Function to handle map ready state\n  const handleMapReady = () => {\n    setMapReady(true);\n  };\n\n  // Set up axios interceptor for JWT expiration\n  useEffect(() => {\n    const interceptor = axios.interceptors.response.use(response => response, error => {\n      var _error$response$data;\n      if (error.response && (error.response.status === 401 || (_error$response$data = error.response.data) !== null && _error$response$data !== void 0 && _error$response$data.expired)) {\n        console.log('Authentication token expired or invalid. Redirecting to login.');\n        localStorage.removeItem('jwtToken');\n        localStorage.removeItem('user');\n        navigate('/login');\n      }\n      return Promise.reject(error);\n    });\n    return () => {\n      axios.interceptors.response.eject(interceptor);\n    };\n  }, [navigate]);\n\n  // Fetch driver's bus info and route\n  useEffect(() => {\n    const fetchDriverBus = async () => {\n      try {\n        setLoading(true);\n        const response = await axios.get(getApiUrl('/driver/my-bus'), {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n          }\n        });\n        if (response.data && response.data.data) {\n          setBusInfo(response.data.data);\n          console.log('Driver bus info loaded:', response.data.data);\n        } else {\n          setError('No bus assigned to you');\n        }\n      } catch (error) {\n        console.error('Error fetching driver bus:', error);\n        setError('Failed to load your bus information');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDriverBus();\n\n    // Refresh bus info every 60 seconds\n    const interval = setInterval(fetchDriverBus, 60000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Center map when position is first determined\n  useEffect(() => {\n    if (position && !center) {\n      setCenter(position);\n    }\n  }, [position, center]);\n\n  // Handle stop reached automatically (replaces manual clearing)\n  const handleStopReached = async (busId, stopId) => {\n    try {\n      const response = await axios.post(getApiUrl('/driver/clear-stop'), {\n        busId,\n        stopId\n      }, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n        }\n      });\n      if (response.data) {\n        console.log('Stop cleared automatically');\n\n        // Update the local state with the new stops_cleared value\n        setBusInfo(prev => ({\n          ...prev,\n          bus: response.data.data,\n          stopsCleared: parseInt(response.data.data.stops_cleared)\n        }));\n\n        // Refresh the bus info to get updated last/next stop\n        const fetchDriverBus = async () => {\n          try {\n            const response = await axios.get(getApiUrl('/driver/my-bus'), {\n              headers: {\n                Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n              }\n            });\n            if (response.data && response.data.data) {\n              setBusInfo(response.data.data);\n            }\n          } catch (error) {\n            console.error('Error refreshing driver bus info:', error);\n          }\n        };\n        fetchDriverBus();\n      }\n    } catch (error) {\n      console.error('Error auto-clearing stop:', error);\n    }\n  };\n\n  // Find indices for last cleared stop and next stop\n  const getStopIndices = () => {\n    if (!busInfo || !busInfo.route || busInfo.route.length === 0) {\n      return {\n        lastClearedStopIndex: null,\n        nextStopIndex: null\n      };\n    }\n    const stops = busInfo.route;\n    const stopsCleared = busInfo.stopsCleared || 0;\n\n    // If stopsCleared is 0, the last cleared stop is the last one in the route (circular)\n    // and the next stop is the first in the route\n    if (stopsCleared === 0) {\n      return {\n        lastClearedStopIndex: stops.length - 1,\n        nextStopIndex: 0\n      };\n    }\n\n    // Normalize stopsCleared to be within the route length (for circular routes)\n    const normalizedStopsCleared = stopsCleared % stops.length;\n    return {\n      lastClearedStopIndex: normalizedStopsCleared - 1,\n      nextStopIndex: normalizedStopsCleared % stops.length\n    };\n  };\n  const {\n    lastClearedStopIndex,\n    nextStopIndex\n  } = getStopIndices();\n\n  // If still loading, show a spinner\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"driver-map-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 827,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading your bus information...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 828,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 826,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If there's an error, show error message\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"driver-map-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 837,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 838,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 839,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 836,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If no bus assigned, show message\n  if (!busInfo || !busInfo.bus) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"driver-map-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No Bus Assigned\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 848,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You do not have a bus assigned to you. Please contact an administrator.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 849,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 847,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Function to set both center and zoom at the same time\n  const handleCenterMap = newCenter => {\n    if (!mapReady) return;\n    setCenter(newCenter);\n    setZoom(19); // Set maximum zoom when centering\n  };\n\n  // Context value\n  const contextValue = {\n    position,\n    busInfo,\n    zoom,\n    setPosition,\n    setZoom\n  };\n  return /*#__PURE__*/_jsxDEV(DriverMapContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"driver-map-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"driver-map-container\",\n        children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n          center: center || [22.3190, 87.3091] // Default to IIT KGP if no position yet\n          ,\n          zoom: zoom // Use zoom state instead of hard-coded value\n          ,\n          className: \"driver-map\",\n          whenCreated: map => {\n            mapRef.current = map;\n            handleMapReady();\n          },\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 884,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MapController, {\n            center: center,\n            zoom: zoom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DriverLocationTracker, {\n            setPosition: setPosition\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 893,\n            columnNumber: 13\n          }, this), position && busInfo && /*#__PURE__*/_jsxDEV(LocationUpdater, {\n            driverId: localStorage.getItem('userId'),\n            busId: busInfo.bus.id,\n            position: position\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 897,\n            columnNumber: 15\n          }, this), position && busInfo && busInfo.nextStop && /*#__PURE__*/_jsxDEV(ProximityDetector, {\n            busId: busInfo.bus.id,\n            position: position,\n            nextStop: busInfo.nextStop,\n            onStopReached: handleStopReached\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 906,\n            columnNumber: 15\n          }, this), position && /*#__PURE__*/_jsxDEV(Marker, {\n            position: position,\n            icon: busIcon,\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"driver-popup\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [\"Your Location (Bus \", busInfo.bus.name, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 919,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"You are here.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 920,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 918,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 917,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 916,\n            columnNumber: 15\n          }, this), busInfo && busInfo.route && busInfo.route.map((stop, index) => /*#__PURE__*/_jsxDEV(Marker, {\n            position: [parseFloat(stop.latitude), parseFloat(stop.longitude)],\n            icon: index === nextStopIndex ? nextStopIcon : busStopIcon,\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stop-popup\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: stop.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 935,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Stop #\", index + 1, \" in route\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 936,\n                  columnNumber: 21\n                }, this), index === nextStopIndex && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"next-stop-label\",\n                  children: \"This is your next stop\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 938,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 934,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 933,\n              columnNumber: 17\n            }, this)\n          }, stop.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 928,\n            columnNumber: 15\n          }, this)), busInfo && busInfo.route && position && mapReady && /*#__PURE__*/_jsxDEV(OsrmRoutes, {\n            stops: busInfo.route,\n            currentPosition: position,\n            lastClearedStopIndex: lastClearedStopIndex,\n            nextStopIndex: nextStopIndex\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 947,\n            columnNumber: 15\n          }, this), position && busInfo && busInfo.nextStop && /*#__PURE__*/_jsxDEV(NextStopDistanceUpdater, {\n            position: position,\n            nextStop: busInfo.nextStop\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 957,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MapControlButtons, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 964,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 875,\n          columnNumber: 11\n        }, this), busInfo && busInfo.route && position && /*#__PURE__*/_jsxDEV(PermanentDirections, {\n          stops: busInfo.route,\n          currentPosition: position,\n          lastClearedStopIndex: lastClearedStopIndex,\n          nextStopIndex: nextStopIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 969,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location-button-container fallback\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"location-button\",\n            onClick: () => handleCenterMap(position || (busInfo && busInfo.nextStop ? [parseFloat(busInfo.nextStop.latitude), parseFloat(busInfo.nextStop.longitude)] : busInfo && busInfo.route && busInfo.route.length > 0 ? [parseFloat(busInfo.route[0].latitude), parseFloat(busInfo.route[0].longitude)] : [22.3190, 87.3091])),\n            title: position ? \"Center map on your location\" : \"Center map on route\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-location-arrow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 989,\n              columnNumber: 15\n            }, this), \" \", position ? \"Your Location\" : \"Center Map\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 979,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 978,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bus-info-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Bus: \", busInfo.bus.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 995,\n            columnNumber: 13\n          }, this), busInfo.nextStop && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"next-stop-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Next Stop:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 998,\n                columnNumber: 20\n              }, this), \" \", busInfo.nextStop.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 998,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Distance:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 999,\n                columnNumber: 20\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                id: \"next-stop-distance\",\n                children: \"Calculating...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 999,\n                columnNumber: 47\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 999,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 997,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 994,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 874,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 873,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 872,\n    columnNumber: 5\n  }, this);\n}\n_s12(DriverMapScreen, \"TyWTu5DWEddNBouP0Hg2Aujp7+M=\", false, function () {\n  return [useNavigate];\n});\n_c12 = DriverMapScreen;\nexport default DriverMapScreen;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"MapController\");\n$RefreshReg$(_c2, \"LocationUpdater\");\n$RefreshReg$(_c3, \"ProximityDetector\");\n$RefreshReg$(_c4, \"OsrmRoutes\");\n$RefreshReg$(_c5, \"DriverLocationTracker\");\n$RefreshReg$(_c6, \"LocationButton\");\n$RefreshReg$(_c7, \"UnusedClearStopButton\");\n$RefreshReg$(_c8, \"UnusedTurnNotification\");\n$RefreshReg$(_c9, \"NextStopDistanceUpdater\");\n$RefreshReg$(_c10, \"PermanentDirections\");\n$RefreshReg$(_c11, \"MapControlButtons\");\n$RefreshReg$(_c12, \"DriverMapScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MapContainer","TileLayer","Marker","Popup","useMap","useMapEvents","L","axios","useNavigate","getApiUrl","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","busIcon","iconSize","iconAnchor","popupAnchor","busStopIcon","nextStopIcon","className","MapController","center","zoom","_s","map","setView","getZoom","_c","LocationUpdater","driverId","busId","position","_s2","updateLocation","post","latitude","longitude","headers","Authorization","localStorage","getItem","console","log","error","interval","setInterval","clearInterval","_c2","ProximityDetector","nextStop","onStopReached","_s3","checkProximity","nextStopPosition","parseFloat","distance","latLng","distanceTo","toFixed","stop_id","_c3","OsrmRoutes","stops","currentPosition","lastClearedStopIndex","nextStopIndex","_s4","routeRef","nextSegmentRef","isLoading","setIsLoading","length","fetchAndDrawFullRoute","current","removeLayer","waypoints","stop","push","waypointsString","wp","join","response","get","data","code","routes","routeGeometry","geometry","coordinates","coord","polyline","color","weight","opacity","lineJoin","addTo","fetchAndDrawNextSegment","lastClearedStop","then","children","fileName","_jsxFileName","lineNumber","columnNumber","_c4","DriverLocationTracker","setPosition","_s5","locationfound","e","latlng","lat","lng","locationerror","message","alert","locate","watch","enableHighAccuracy","stopLocate","_c5","LocationButton","setCenter","busInfo","_s6","handleClick","route","firstStopPosition","defaultPosition","onClick","title","_c6","UnusedClearStopButton","stopId","onStopCleared","isNextStop","_s7","loading","setLoading","handleClearStop","disabled","_c7","UnusedTurnNotification","_s8","showNotification","setShowNotification","turnDirection","setTurnDirection","setDistance","notificationRef","lastStop","calculateTurn","currentPos","lastStopPos","nextStopPos","bearingToNext","calculateBearing","distanceToNext","currentHeading","angle","Math","abs","normalizedAngle","hideTimeout","setTimeout","clearTimeout","start","end","startLat","PI","startLng","endLat","endLng","y","sin","cos","x","bearing","atan2","ref","round","_c8","NextStopDistanceUpdater","_s9","updateDistance","distanceElement","document","getElementById","textContent","_c9","PermanentDirections","_s10","direction","setDirection","calculateDirections","style","transform","name","_c10","MapControlButtons","_s11","useContext","DriverMapContext","handleCenterMap","_c11","createContext","setZoom","DriverMapScreen","_s12","setBusInfo","setError","mapReady","setMapReady","navigate","mapRef","handleMapReady","interceptor","interceptors","use","_error$response$data","status","expired","removeItem","Promise","reject","eject","fetchDriverBus","handleStopReached","prev","bus","stopsCleared","parseInt","stops_cleared","getStopIndices","normalizedStopsCleared","window","location","reload","newCenter","contextValue","Provider","value","whenCreated","attribution","url","id","icon","index","_c12","$RefreshReg$"],"sources":["/home/lubesh/Desktop/DBMS/KGP_Bus/frontend/src/components/driver_pages/DriverMapScreen.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMap, useMapEvents } from 'react-leaflet';\nimport L from 'leaflet';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { getApiUrl } from '../../utils/api2.js';\nimport '../../css/DriverMapScreen.css';\n\n// Fix for default marker icon in Leaflet with React\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',\n  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',\n  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',\n});\n\n// Custom bus icon\nconst busIcon = new L.Icon({\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/30/30979.png',\n  iconSize: [40, 40],\n  iconAnchor: [20, 40],\n  popupAnchor: [0, -40]\n});\n\n// Bus stop icon\nconst busStopIcon = new L.Icon({\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/1165/1165895.png',\n  iconSize: [24, 24],\n  iconAnchor: [12, 24],\n  popupAnchor: [0, -24]\n});\n\n// Next stop icon (highlighted)\nconst nextStopIcon = new L.Icon({\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/1165/1165895.png',\n  iconSize: [36, 36],\n  iconAnchor: [18, 36],\n  popupAnchor: [0, -36],\n  className: 'next-stop-icon' // CSS class for styling\n});\n\n// Component to handle map centering\nconst MapController = ({ center, zoom }) => {\n  const map = useMap();\n  \n  useEffect(() => {\n    if (center) {\n      map.setView(center, zoom || map.getZoom());\n    }\n  }, [center, zoom, map]);\n  \n  return null;\n};\n\n// Component to update driver's location in the database\nconst LocationUpdater = ({ driverId, busId, position }) => {\n  useEffect(() => {\n    if (!position || !busId) return;\n\n    const updateLocation = async () => {\n      try {\n        await axios.post(\n          getApiUrl('/driver/update-location'),\n          {\n            busId,\n            latitude: position[0],\n            longitude: position[1]\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n            }\n          }\n        );\n        console.log('Location updated successfully');\n      } catch (error) {\n        console.error('Error updating location:', error);\n      }\n    };\n\n    updateLocation();\n    \n    // Update location every 10 seconds (changed from 5 seconds)\n    const interval = setInterval(updateLocation, 10000);\n    \n    return () => clearInterval(interval);\n  }, [position, busId, driverId]);\n  \n  return null;\n};\n\n// Component to detect proximity to next bus stop\nconst ProximityDetector = ({ busId, position, nextStop, onStopReached }) => {\n  useEffect(() => {\n    if (!position || !nextStop || !busId) return;\n\n    const checkProximity = () => {\n      const nextStopPosition = [\n        parseFloat(nextStop.latitude),\n        parseFloat(nextStop.longitude)\n      ];\n      \n      // Calculate distance between driver and next stop (in meters)\n      const distance = L.latLng(position).distanceTo(L.latLng(nextStopPosition));\n      \n      // If within 30 meters, mark the stop as cleared\n      if (distance <= 30) {\n        console.log(`Within 30m of next stop (${distance.toFixed(2)}m). Auto-clearing stop.`);\n        onStopReached(busId, nextStop.stop_id);\n      }\n    };\n    \n    // Check proximity every second\n    const interval = setInterval(checkProximity, 1000);\n    \n    return () => clearInterval(interval);\n  }, [position, nextStop, busId, onStopReached]);\n  \n  return null;\n};\n\n// Component to draw OSRM route between stops\nconst OsrmRoutes = ({ stops, currentPosition, lastClearedStopIndex, nextStopIndex }) => {\n  const map = useMap();\n  const routeRef = useRef(null);\n  const nextSegmentRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  useEffect(() => {\n    if (!stops || stops.length < 2 || !map) return;\n    \n    const fetchAndDrawFullRoute = async () => {\n      try {\n        setIsLoading(true);\n        \n        // Clear previous route\n        if (routeRef.current) {\n          map.removeLayer(routeRef.current);\n          routeRef.current = null;\n        }\n        \n        // Build waypoints for the complete route\n        const waypoints = stops.map(stop => [\n          parseFloat(stop.longitude), \n          parseFloat(stop.latitude)\n        ]);\n        \n        // Close the loop for circular route\n        waypoints.push(waypoints[0]);\n        \n        // Convert waypoints to the format expected by OSRM API\n        const waypointsString = waypoints.map(wp => wp.join(',')).join(';');\n        \n        const response = await axios.get(\n          `https://router.project-osrm.org/route/v1/driving/${waypointsString}?overview=full&geometries=geojson`\n        );\n        \n        if (response.data.code === 'Ok' && response.data.routes.length > 0) {\n          const routeGeometry = response.data.routes[0].geometry.coordinates;\n          // OSRM returns coordinates as [lng, lat], we need to flip for Leaflet\n          const coordinates = routeGeometry.map(coord => [coord[1], coord[0]]);\n          \n          // Create a polyline for the full route\n          const polyline = L.polyline(coordinates, {\n            color: '#3388ff',\n            weight: 4,\n            opacity: 0.6,\n            lineJoin: 'round'\n          }).addTo(map);\n          \n          routeRef.current = polyline;\n        }\n      } catch (error) {\n        console.error('Error fetching full route:', error);\n      }\n    };\n    \n    const fetchAndDrawNextSegment = async () => {\n      try {\n        // Clear previous next segment route\n        if (nextSegmentRef.current) {\n          map.removeLayer(nextSegmentRef.current);\n          nextSegmentRef.current = null;\n        }\n        \n        // Only draw if we have a last cleared stop and next stop\n        if (lastClearedStopIndex !== null && nextStopIndex !== null) {\n          const lastClearedStop = stops[lastClearedStopIndex];\n          const nextStop = stops[nextStopIndex];\n          \n          // Build waypoints from last cleared stop to next stop\n          const waypoints = [\n            [parseFloat(lastClearedStop.longitude), parseFloat(lastClearedStop.latitude)], // Last cleared stop [lng, lat]\n            [parseFloat(nextStop.longitude), parseFloat(nextStop.latitude)] // Next stop [lng, lat]\n          ];\n          \n          // Convert waypoints to the format expected by OSRM API\n          const waypointsString = waypoints.map(wp => wp.join(',')).join(';');\n          \n          const response = await axios.get(\n            `https://router.project-osrm.org/route/v1/driving/${waypointsString}?overview=full&geometries=geojson`\n          );\n          \n          if (response.data.code === 'Ok' && response.data.routes.length > 0) {\n            const routeGeometry = response.data.routes[0].geometry.coordinates;\n            // OSRM returns coordinates as [lng, lat], we need to flip for Leaflet\n            const coordinates = routeGeometry.map(coord => [coord[1], coord[0]]);\n            \n            // Create a highlighted polyline for the next segment\n            const polyline = L.polyline(coordinates, {\n              color: '#FF0000', // Red color for the highlighted segment\n              weight: 6,\n              opacity: 0.9,\n              lineJoin: 'round'\n            }).addTo(map);\n            \n            nextSegmentRef.current = polyline;\n          }\n        }\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching next segment route:', error);\n        setIsLoading(false);\n      }\n    };\n    \n    setIsLoading(true);\n    fetchAndDrawFullRoute().then(() => fetchAndDrawNextSegment());\n    \n    // Clean up function\n    return () => {\n      if (routeRef.current && map) {\n        map.removeLayer(routeRef.current);\n      }\n      if (nextSegmentRef.current && map) {\n        map.removeLayer(nextSegmentRef.current);\n      }\n    };\n  }, [map, stops, lastClearedStopIndex, nextStopIndex]); // Add currentPosition back to dependency array\n  \n  // Return the loading overlay if routes are being fetched\n  return isLoading ? \n    <div className=\"osrm-loading-overlay\">\n      <div className=\"osrm-loading-content\">\n        <div className=\"osrm-spinner\"></div>\n        <p>Updating route...</p>\n      </div>\n    </div> : null;\n};\n\n// Component for tracking driver location with geolocation API\nconst DriverLocationTracker = ({ setPosition }) => {\n  const map = useMapEvents({\n    locationfound(e) {\n      setPosition([e.latlng.lat, e.latlng.lng]);\n    },\n    locationerror(e) {\n      console.error('Location error:', e.message);\n      alert('Could not get your location. Please enable location services.');\n    }\n  });\n  \n  useEffect(() => {\n    // Start tracking location when component mounts\n    map.locate({ watch: true, enableHighAccuracy: true });\n    \n    return () => {\n      map.stopLocate();\n    };\n  }, [map]);\n  \n  return null;\n};\n\n// Button to center map on driver's location\nconst LocationButton = ({ position, setCenter, busInfo }) => {\n  // Remove mapZoom and setMapZoom that are causing unused variable warnings\n  const map = useRef(null); // Use a ref instead of useMap() hook\n\n  const handleClick = () => {\n    if (position) {\n      // If we have the driver's position, center on that with maximum zoom\n      setCenter(position);\n      // We'll now handle the zoom in the MapController component\n      console.log('Centering map on driver position with maximum zoom:', position);\n    } else if (busInfo && busInfo.nextStop) {\n      // Fall back to the next bus stop if driver position isn't available\n      const nextStopPosition = [\n        parseFloat(busInfo.nextStop.latitude),\n        parseFloat(busInfo.nextStop.longitude)\n      ];\n      setCenter(nextStopPosition);\n      console.log('Centering map on next stop:', nextStopPosition);\n    } else if (busInfo && busInfo.route && busInfo.route.length > 0) {\n      // Fall back to the first stop in the route\n      const firstStopPosition = [\n        parseFloat(busInfo.route[0].latitude),\n        parseFloat(busInfo.route[0].longitude)\n      ];\n      setCenter(firstStopPosition);\n      console.log('Centering map on first stop in route:', firstStopPosition);\n    } else {\n      // Default to IIT KGP location\n      const defaultPosition = [22.3190, 87.3091];\n      setCenter(defaultPosition);\n      console.log('Centering map on default location:', defaultPosition);\n    }\n  };\n  \n  // Always make the button clickable\n  return (\n    <button \n      className=\"location-button\" \n      onClick={handleClick} \n      title={position ? \"Center map on your location\" : \"Center map on route\"}\n    >\n      <i className=\"fas fa-location-arrow\"></i> {position ? \"Your Location\" : \"Center Map\"}\n    </button>\n  );\n};\n\n// Rename these components to indicate they're unused or add eslint-disable comments\n// eslint-disable-next-line no-unused-vars\nconst UnusedClearStopButton = ({ busId, stopId, onStopCleared, isNextStop }) => {\n  const [loading, setLoading] = useState(false);\n  \n  const handleClearStop = async () => {\n    if (!busId || !stopId) return;\n    \n    try {\n      setLoading(true);\n      const response = await axios.post(\n        getApiUrl('/driver/clear-stop'),\n        { busId, stopId },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n          }\n        }\n      );\n      \n      if (response.data) {\n        console.log('Stop cleared successfully');\n        if (onStopCleared) onStopCleared(response.data.data);\n      }\n    } catch (error) {\n      console.error('Error clearing stop:', error);\n      alert('Failed to mark stop as cleared. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  if (!isNextStop) return null;\n  \n  return (\n    <button \n      className=\"clear-stop-button\" \n      onClick={handleClearStop} \n      disabled={loading}\n    >\n      {loading ? 'Marking...' : 'Mark as Cleared'}\n    </button>\n  );\n};\n\n// eslint-disable-next-line no-unused-vars\nconst UnusedTurnNotification = ({ stops, currentPosition, lastClearedStopIndex, nextStopIndex }) => {\n  const [showNotification, setShowNotification] = useState(false);\n  const [turnDirection, setTurnDirection] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const notificationRef = useRef(null);\n  \n  useEffect(() => {\n    if (!stops || !currentPosition || lastClearedStopIndex === null || nextStopIndex === null) return;\n    \n    const lastStop = stops[lastClearedStopIndex];\n    const nextStop = stops[nextStopIndex];\n    \n    // Calculate upcoming turns by comparing bearings\n    const calculateTurn = () => {\n      const currentPos = L.latLng(currentPosition);\n      const lastStopPos = L.latLng(\n        parseFloat(lastStop.latitude),\n        parseFloat(lastStop.longitude)\n      );\n      const nextStopPos = L.latLng(\n        parseFloat(nextStop.latitude),\n        parseFloat(nextStop.longitude)\n      );\n      \n      // Calculate bearings\n      const bearingToNext = calculateBearing(currentPos, nextStopPos);\n      \n      // Calculate distance to next stop\n      const distanceToNext = currentPos.distanceTo(nextStopPos);\n      setDistance(distanceToNext);\n      \n      // Determine if there's a turn coming up (within 100m)\n      if (distanceToNext <= 100) {\n        // Calculate current heading based on last few positions\n        // This is simplified - ideally, you'd track recent positions to determine heading\n        const currentHeading = calculateBearing(lastStopPos, currentPos);\n        \n        // Calculate angle between current heading and bearing to next stop\n        const angle = Math.abs(bearingToNext - currentHeading);\n        const normalizedAngle = angle > 180 ? 360 - angle : angle;\n        \n        // Determine turn direction based on angle\n        if (normalizedAngle > 30 && normalizedAngle < 150) {\n          if ((bearingToNext > currentHeading && bearingToNext - currentHeading < 180) || \n              (currentHeading > bearingToNext && currentHeading - bearingToNext > 180)) {\n            setTurnDirection('right');\n          } else {\n            setTurnDirection('left');\n          }\n          \n          // Show notification 5 seconds before turn (assume average speed of 5m/s)\n          if (distanceToNext <= 25) {\n            setShowNotification(true);\n            \n            // Hide notification 5 seconds after passing the turn\n            const hideTimeout = setTimeout(() => {\n              setShowNotification(false);\n            }, 10000); // 5 seconds before + 5 seconds after = 10 seconds total\n            \n            return () => clearTimeout(hideTimeout);\n          }\n        } else {\n          setTurnDirection('straight');\n        }\n      } else {\n        setTurnDirection(null);\n        setShowNotification(false);\n      }\n    };\n    \n    // Calculate turn every 1 second\n    const interval = setInterval(calculateTurn, 1000);\n    \n    return () => clearInterval(interval);\n  }, [stops, currentPosition, lastClearedStopIndex, nextStopIndex]);\n  \n  // Helper function to calculate bearing between two points\n  const calculateBearing = (start, end) => {\n    const startLat = start.lat * Math.PI / 180;\n    const startLng = start.lng * Math.PI / 180;\n    const endLat = end.lat * Math.PI / 180;\n    const endLng = end.lng * Math.PI / 180;\n    \n    const y = Math.sin(endLng - startLng) * Math.cos(endLat);\n    const x = Math.cos(startLat) * Math.sin(endLat) -\n              Math.sin(startLat) * Math.cos(endLat) * Math.cos(endLng - startLng);\n    \n    let bearing = Math.atan2(y, x) * 180 / Math.PI;\n    if (bearing < 0) bearing += 360;\n    \n    return bearing;\n  };\n  \n  if (!showNotification) return null;\n  \n  // Render turn notification\n  return (\n    <div className=\"turn-notification\" ref={notificationRef}>\n      <div className=\"turn-icon\">\n        {turnDirection === 'left' && <i className=\"fas fa-arrow-left\"></i>}\n        {turnDirection === 'right' && <i className=\"fas fa-arrow-right\"></i>}\n        {turnDirection === 'straight' && <i className=\"fas fa-arrow-up\"></i>}\n      </div>\n      <div className=\"turn-text\">\n        {turnDirection === 'left' && <p>Turn left in {Math.round(distance)} meters</p>}\n        {turnDirection === 'right' && <p>Turn right in {Math.round(distance)} meters</p>}\n        {turnDirection === 'straight' && <p>Continue straight for {Math.round(distance)} meters</p>}\n      </div>\n    </div>\n  );\n};\n\n// Component to update next stop distance in the UI\nconst NextStopDistanceUpdater = ({ position, nextStop }) => {\n  useEffect(() => {\n    if (!position || !nextStop) return;\n\n    const updateDistance = () => {\n      const nextStopPosition = [\n        parseFloat(nextStop.latitude),\n        parseFloat(nextStop.longitude)\n      ];\n      \n      // Calculate distance between driver and next stop (in meters)\n      const distance = L.latLng(position).distanceTo(L.latLng(nextStopPosition));\n      \n      // Update the distance display in the UI\n      const distanceElement = document.getElementById('next-stop-distance');\n      if (distanceElement) {\n        distanceElement.textContent = `${Math.round(distance)} meters`;\n      }\n    };\n    \n    // Update immediately and then every second\n    updateDistance();\n    const interval = setInterval(updateDistance, 1000);\n    \n    return () => clearInterval(interval);\n  }, [position, nextStop]);\n  \n  return null;\n};\n\n// Simplified permanent directions component\nconst PermanentDirections = ({ stops, currentPosition, lastClearedStopIndex, nextStopIndex }) => {\n  const [direction, setDirection] = useState(null);\n  const [distance, setDistance] = useState(null);\n  \n  useEffect(() => {\n    if (!stops || !currentPosition || lastClearedStopIndex === null || nextStopIndex === null) return;\n    \n    // Use nextStop directly and remove reference to lastStop that isn't used\n    const nextStop = stops[nextStopIndex];\n    \n    // Calculate heading and distance continuously\n    const calculateDirections = () => {\n      const currentPos = L.latLng(currentPosition);\n      const nextStopPos = L.latLng(\n        parseFloat(nextStop.latitude),\n        parseFloat(nextStop.longitude)\n      );\n      \n      // Calculate distance to next stop\n      const distanceToNext = currentPos.distanceTo(nextStopPos);\n      setDistance(Math.round(distanceToNext));\n      \n      // Get route from current position to next stop using Leaflet routing\n      // (This is a simplification - in a real app we'd use the OSRM route data)\n      const bearing = calculateBearing(currentPos, nextStopPos);\n      \n      // Determine direction based on bearing\n      if (bearing >= 337.5 || bearing < 22.5) {\n        setDirection('north');\n      } else if (bearing >= 22.5 && bearing < 67.5) {\n        setDirection('northeast');\n      } else if (bearing >= 67.5 && bearing < 112.5) {\n        setDirection('east');\n      } else if (bearing >= 112.5 && bearing < 157.5) {\n        setDirection('southeast');\n      } else if (bearing >= 157.5 && bearing < 202.5) {\n        setDirection('south');\n      } else if (bearing >= 202.5 && bearing < 247.5) {\n        setDirection('southwest');\n      } else if (bearing >= 247.5 && bearing < 292.5) {\n        setDirection('west');\n      } else {\n        setDirection('northwest');\n      }\n    };\n    \n    // Calculate initially and then every second\n    calculateDirections();\n    const interval = setInterval(calculateDirections, 1000);\n    \n    return () => clearInterval(interval);\n  }, [stops, currentPosition, lastClearedStopIndex, nextStopIndex]);\n  \n  // Helper function to calculate bearing between two points\n  const calculateBearing = (start, end) => {\n    const startLat = start.lat * Math.PI / 180;\n    const startLng = start.lng * Math.PI / 180;\n    const endLat = end.lat * Math.PI / 180;\n    const endLng = end.lng * Math.PI / 180;\n    \n    const y = Math.sin(endLng - startLng) * Math.cos(endLat);\n    const x = Math.cos(startLat) * Math.sin(endLat) -\n              Math.sin(startLat) * Math.cos(endLat) * Math.cos(endLng - startLng);\n    \n    let bearing = Math.atan2(y, x) * 180 / Math.PI;\n    if (bearing < 0) bearing += 360;\n    \n    return bearing;\n  };\n  \n  // Always render the directions panel\n  return (\n    <div className=\"permanent-directions\">\n      <div className=\"direction-icon\">\n        {direction === 'north' && <i className=\"fas fa-arrow-up\"></i>}\n        {direction === 'northeast' && <i className=\"fas fa-arrow-up\" style={{ transform: 'rotate(45deg)' }}></i>}\n        {direction === 'east' && <i className=\"fas fa-arrow-right\"></i>}\n        {direction === 'southeast' && <i className=\"fas fa-arrow-down\" style={{ transform: 'rotate(-45deg)' }}></i>}\n        {direction === 'south' && <i className=\"fas fa-arrow-down\"></i>}\n        {direction === 'southwest' && <i className=\"fas fa-arrow-down\" style={{ transform: 'rotate(45deg)' }}></i>}\n        {direction === 'west' && <i className=\"fas fa-arrow-left\"></i>}\n        {direction === 'northwest' && <i className=\"fas fa-arrow-up\" style={{ transform: 'rotate(-45deg)' }}></i>}\n      </div>\n      <div className=\"direction-text\">\n        <p>Head <strong>{direction}</strong> for {distance} meters</p>\n        <p>Next stop: <strong>{stops[nextStopIndex].name}</strong></p>\n      </div>\n    </div>\n  );\n};\n\n// Button to center map on driver's location that is now placed inside MapContainer\nconst MapControlButtons = () => {\n  const map = useMap();\n  const { position, busInfo } = React.useContext(DriverMapContext);\n\n  const handleCenterMap = () => {\n    if (!map) return;\n\n    try {\n      if (position) {\n        // If we have the driver's position, center on that with maximum zoom\n        map.setView(position, 19); // Set to maximum zoom\n        console.log('Centering map on driver position with maximum zoom:', position);\n      } else if (busInfo && busInfo.nextStop) {\n        // Fall back to the next bus stop if driver position isn't available\n        const nextStopPosition = [\n          parseFloat(busInfo.nextStop.latitude),\n          parseFloat(busInfo.nextStop.longitude)\n        ];\n        map.setView(nextStopPosition, 15);\n        console.log('Centering map on next stop:', nextStopPosition);\n      } else if (busInfo && busInfo.route && busInfo.route.length > 0) {\n        // Fall back to the first stop in the route\n        const firstStopPosition = [\n          parseFloat(busInfo.route[0].latitude),\n          parseFloat(busInfo.route[0].longitude)\n        ];\n        map.setView(firstStopPosition, 15);\n        console.log('Centering map on first stop in route:', firstStopPosition);\n      }\n    } catch (error) {\n      console.error('Error centering map:', error);\n    }\n  };\n\n  return (\n    <div className=\"map-control-buttons leaflet-bottom leaflet-right\">\n      <div className=\"leaflet-control leaflet-bar\">\n        <button \n          className=\"center-map-button\"\n          onClick={handleCenterMap}\n          title={position ? \"Center map on your location\" : \"Center map on route\"}\n        >\n          <i className=\"fas fa-location-arrow\"></i>\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// Create a context to share state between components\nconst DriverMapContext = React.createContext({\n  position: null,\n  busInfo: null,\n  zoom: 15,\n  setPosition: () => {},\n  setZoom: () => {}\n});\n\nfunction DriverMapScreen() {\n  const [position, setPosition] = useState(null);\n  const [center, setCenter] = useState(null);\n  const [zoom, setZoom] = useState(15); // Add zoom state\n  const [busInfo, setBusInfo] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [mapReady, setMapReady] = useState(false);\n  const navigate = useNavigate();\n  \n  // For the map\n  const mapRef = useRef(null);\n  \n  // Function to handle map ready state\n  const handleMapReady = () => {\n    setMapReady(true);\n  };\n  \n  // Set up axios interceptor for JWT expiration\n  useEffect(() => {\n    const interceptor = axios.interceptors.response.use(\n      response => response,\n      error => {\n        if (error.response && (error.response.status === 401 || error.response.data?.expired)) {\n          console.log('Authentication token expired or invalid. Redirecting to login.');\n          localStorage.removeItem('jwtToken');\n          localStorage.removeItem('user');\n          navigate('/login');\n        }\n        return Promise.reject(error);\n      }\n    );\n    \n    return () => {\n      axios.interceptors.response.eject(interceptor);\n    };\n  }, [navigate]);\n  \n  // Fetch driver's bus info and route\n  useEffect(() => {\n    const fetchDriverBus = async () => {\n      try {\n        setLoading(true);\n        \n        const response = await axios.get(\n          getApiUrl('/driver/my-bus'),\n          {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n            }\n          }\n        );\n        \n        if (response.data && response.data.data) {\n          setBusInfo(response.data.data);\n          console.log('Driver bus info loaded:', response.data.data);\n        } else {\n          setError('No bus assigned to you');\n        }\n      } catch (error) {\n        console.error('Error fetching driver bus:', error);\n        setError('Failed to load your bus information');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchDriverBus();\n    \n    // Refresh bus info every 60 seconds\n    const interval = setInterval(fetchDriverBus, 60000);\n    \n    return () => clearInterval(interval);\n  }, []);  \n  \n  // Center map when position is first determined\n  useEffect(() => {\n    if (position && !center) {\n      setCenter(position);\n    }\n  }, [position, center]);\n  \n  // Handle stop reached automatically (replaces manual clearing)\n  const handleStopReached = async (busId, stopId) => {\n    try {\n      const response = await axios.post(\n        getApiUrl('/driver/clear-stop'),\n        { busId, stopId },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n          }\n        }\n      );\n      \n      if (response.data) {\n        console.log('Stop cleared automatically');\n        \n        // Update the local state with the new stops_cleared value\n        setBusInfo(prev => ({\n          ...prev,\n          bus: response.data.data,\n          stopsCleared: parseInt(response.data.data.stops_cleared)\n        }));\n        \n        // Refresh the bus info to get updated last/next stop\n        const fetchDriverBus = async () => {\n          try {\n            const response = await axios.get(\n              getApiUrl('/driver/my-bus'),\n              {\n                headers: {\n                  Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n                }\n              }\n            );\n            \n            if (response.data && response.data.data) {\n              setBusInfo(response.data.data);\n            }\n          } catch (error) {\n            console.error('Error refreshing driver bus info:', error);\n          }\n        };\n        \n        fetchDriverBus();\n      }\n    } catch (error) {\n      console.error('Error auto-clearing stop:', error);\n    }\n  };\n  \n  // Find indices for last cleared stop and next stop\n  const getStopIndices = () => {\n    if (!busInfo || !busInfo.route || busInfo.route.length === 0) {\n      return { lastClearedStopIndex: null, nextStopIndex: null };\n    }\n    \n    const stops = busInfo.route;\n    const stopsCleared = busInfo.stopsCleared || 0;\n    \n    // If stopsCleared is 0, the last cleared stop is the last one in the route (circular)\n    // and the next stop is the first in the route\n    if (stopsCleared === 0) {\n      return {\n        lastClearedStopIndex: stops.length - 1,\n        nextStopIndex: 0\n      };\n    }\n    \n    // Normalize stopsCleared to be within the route length (for circular routes)\n    const normalizedStopsCleared = stopsCleared % stops.length;\n    \n    return {\n      lastClearedStopIndex: normalizedStopsCleared - 1,\n      nextStopIndex: normalizedStopsCleared % stops.length\n    };\n  };\n  \n  const { lastClearedStopIndex, nextStopIndex } = getStopIndices();  \n  \n  // If still loading, show a spinner\n  if (loading) {\n    return (\n      <div className=\"driver-map-loading\">\n        <div className=\"spinner\"></div>\n        <p>Loading your bus information...</p>\n      </div>\n    );\n  }\n  \n  // If there's an error, show error message\n  if (error) {\n    return (\n      <div className=\"driver-map-error\">\n        <h2>Error</h2>\n        <p>{error}</p>\n        <button onClick={() => window.location.reload()}>Retry</button>\n      </div>\n    );\n  }\n  \n  // If no bus assigned, show message\n  if (!busInfo || !busInfo.bus) {\n    return (\n      <div className=\"driver-map-error\">\n        <h2>No Bus Assigned</h2>\n        <p>You do not have a bus assigned to you. Please contact an administrator.</p>\n      </div>\n    );\n  }\n  \n  // Function to set both center and zoom at the same time\n  const handleCenterMap = (newCenter) => {\n    if (!mapReady) return;\n    \n    setCenter(newCenter);\n    setZoom(19); // Set maximum zoom when centering\n  };\n  \n  // Context value\n  const contextValue = {\n    position,\n    busInfo,\n    zoom,\n    setPosition,\n    setZoom\n  };\n  \n  return (\n    <DriverMapContext.Provider value={contextValue}>\n      <div className=\"driver-map-screen\">\n        <div className=\"driver-map-container\">\n          <MapContainer\n            center={center || [22.3190, 87.3091]} // Default to IIT KGP if no position yet\n            zoom={zoom} // Use zoom state instead of hard-coded value\n            className=\"driver-map\"\n            whenCreated={(map) => {\n              mapRef.current = map;\n              handleMapReady();\n            }}\n          >\n            <TileLayer\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            \n            {/* Map controller to center map */}\n            <MapController center={center} zoom={zoom} />\n            \n            {/* Driver location tracker */}\n            <DriverLocationTracker setPosition={setPosition} />\n            \n            {/* Location updater component */}\n            {position && busInfo && (\n              <LocationUpdater\n                driverId={localStorage.getItem('userId')}\n                busId={busInfo.bus.id}\n                position={position}\n              />\n            )}\n            \n            {/* Proximity detector for auto-clearing stops */}\n            {position && busInfo && busInfo.nextStop && (\n              <ProximityDetector\n                busId={busInfo.bus.id}\n                position={position}\n                nextStop={busInfo.nextStop}\n                onStopReached={handleStopReached}\n              />\n            )}\n            \n            {/* Driver marker */}\n            {position && (\n              <Marker position={position} icon={busIcon}>\n                <Popup>\n                  <div className=\"driver-popup\">\n                    <strong>Your Location (Bus {busInfo.bus.name})</strong>\n                    <p>You are here.</p>\n                  </div>\n                </Popup>\n              </Marker>\n            )}\n            \n            {/* Show all stops in the route */}\n            {busInfo && busInfo.route && busInfo.route.map((stop, index) => (\n              <Marker\n                key={stop.id}\n                position={[parseFloat(stop.latitude), parseFloat(stop.longitude)]}\n                icon={index === nextStopIndex ? nextStopIcon : busStopIcon}\n              >\n                <Popup>\n                  <div className=\"stop-popup\">\n                    <strong>{stop.name}</strong>\n                    <p>Stop #{index + 1} in route</p>\n                    {index === nextStopIndex && (\n                      <p className=\"next-stop-label\">This is your next stop</p>\n                    )}\n                  </div>\n                </Popup>\n              </Marker>\n            ))}\n            \n            {/* OSRM routes - fixed by re-adding currentPosition dependency */}\n            {busInfo && busInfo.route && position && mapReady && (\n              <OsrmRoutes\n                stops={busInfo.route}\n                currentPosition={position}\n                lastClearedStopIndex={lastClearedStopIndex}\n                nextStopIndex={nextStopIndex}\n              />\n            )}\n            \n            {/* Distance updater for next stop */}\n            {position && busInfo && busInfo.nextStop && (\n              <NextStopDistanceUpdater\n                position={position}\n                nextStop={busInfo.nextStop}\n              />\n            )}\n            \n            {/* Map control buttons for centering */}\n            <MapControlButtons />\n          </MapContainer>\n          \n          {/* Permanent directions panel */}\n          {busInfo && busInfo.route && position && (\n            <PermanentDirections\n              stops={busInfo.route}\n              currentPosition={position}\n              lastClearedStopIndex={lastClearedStopIndex}\n              nextStopIndex={nextStopIndex}\n            />\n          )}\n          \n          {/* Outside location button as fallback (will be hidden by CSS in most cases) */}\n          <div className=\"location-button-container fallback\">\n            <button \n              className=\"location-button\" \n              onClick={() => handleCenterMap(position || \n                (busInfo && busInfo.nextStop ? \n                  [parseFloat(busInfo.nextStop.latitude), parseFloat(busInfo.nextStop.longitude)] : \n                  (busInfo && busInfo.route && busInfo.route.length > 0 ? \n                    [parseFloat(busInfo.route[0].latitude), parseFloat(busInfo.route[0].longitude)] : \n                    [22.3190, 87.3091])))} \n              title={position ? \"Center map on your location\" : \"Center map on route\"}\n            >\n              <i className=\"fas fa-location-arrow\"></i> {position ? \"Your Location\" : \"Center Map\"}\n            </button>\n          </div>\n          \n          {/* Bus info panel */}\n          <div className=\"bus-info-panel\">\n            <h3>Bus: {busInfo.bus.name}</h3>\n            {busInfo.nextStop && (\n              <div className=\"next-stop-info\">\n                <p><strong>Next Stop:</strong> {busInfo.nextStop.name}</p>\n                <p><strong>Distance:</strong> <span id=\"next-stop-distance\">Calculating...</span></p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </DriverMapContext.Provider>\n  );\n}\n\nexport default DriverMapScreen;\n"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,YAAY,QAAQ,eAAe;AAC5F,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,OAAO,+BAA+B;;AAEtC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAOL,CAAC,CAACM,IAAI,CAACC,OAAO,CAACC,SAAS,CAACC,WAAW;AAC3CT,CAAC,CAACM,IAAI,CAACC,OAAO,CAACG,YAAY,CAAC;EAC1BC,aAAa,EAAE,gEAAgE;EAC/EC,OAAO,EAAE,6DAA6D;EACtEC,SAAS,EAAE;AACb,CAAC,CAAC;;AAEF;AACA,MAAMC,OAAO,GAAG,IAAId,CAAC,CAACM,IAAI,CAAC;EACzBM,OAAO,EAAE,qDAAqD;EAC9DG,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;EAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;EACpBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE;AACtB,CAAC,CAAC;;AAEF;AACA,MAAMC,WAAW,GAAG,IAAIlB,CAAC,CAACM,IAAI,CAAC;EAC7BM,OAAO,EAAE,yDAAyD;EAClEG,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;EAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;EACpBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE;AACtB,CAAC,CAAC;;AAEF;AACA,MAAME,YAAY,GAAG,IAAInB,CAAC,CAACM,IAAI,CAAC;EAC9BM,OAAO,EAAE,yDAAyD;EAClEG,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;EAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;EACpBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;EACrBG,SAAS,EAAE,gBAAgB,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACA,MAAMC,aAAa,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAMC,GAAG,GAAG3B,MAAM,CAAC,CAAC;EAEpBN,SAAS,CAAC,MAAM;IACd,IAAI8B,MAAM,EAAE;MACVG,GAAG,CAACC,OAAO,CAACJ,MAAM,EAAEC,IAAI,IAAIE,GAAG,CAACE,OAAO,CAAC,CAAC,CAAC;IAC5C;EACF,CAAC,EAAE,CAACL,MAAM,EAAEC,IAAI,EAAEE,GAAG,CAAC,CAAC;EAEvB,OAAO,IAAI;AACb,CAAC;;AAED;AAAAD,EAAA,CAZMH,aAAa;EAAA,QACLvB,MAAM;AAAA;AAAA8B,EAAA,GADdP,aAAa;AAanB,MAAMQ,eAAe,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACzDzC,SAAS,CAAC,MAAM;IACd,IAAI,CAACwC,QAAQ,IAAI,CAACD,KAAK,EAAE;IAEzB,MAAMG,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMjC,KAAK,CAACkC,IAAI,CACdhC,SAAS,CAAC,yBAAyB,CAAC,EACpC;UACE4B,KAAK;UACLK,QAAQ,EAAEJ,QAAQ,CAAC,CAAC,CAAC;UACrBK,SAAS,EAAEL,QAAQ,CAAC,CAAC;QACvB,CAAC,EACD;UACEM,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;UAC3D;QACF,CACF,CAAC;QACDC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAEDV,cAAc,CAAC,CAAC;;IAEhB;IACA,MAAMW,QAAQ,GAAGC,WAAW,CAACZ,cAAc,EAAE,KAAK,CAAC;IAEnD,OAAO,MAAMa,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACb,QAAQ,EAAED,KAAK,EAAED,QAAQ,CAAC,CAAC;EAE/B,OAAO,IAAI;AACb,CAAC;;AAED;AAAAG,GAAA,CApCMJ,eAAe;AAAAmB,GAAA,GAAfnB,eAAe;AAqCrB,MAAMoB,iBAAiB,GAAGA,CAAC;EAAElB,KAAK;EAAEC,QAAQ;EAAEkB,QAAQ;EAAEC;AAAc,CAAC,KAAK;EAAAC,GAAA;EAC1E5D,SAAS,CAAC,MAAM;IACd,IAAI,CAACwC,QAAQ,IAAI,CAACkB,QAAQ,IAAI,CAACnB,KAAK,EAAE;IAEtC,MAAMsB,cAAc,GAAGA,CAAA,KAAM;MAC3B,MAAMC,gBAAgB,GAAG,CACvBC,UAAU,CAACL,QAAQ,CAACd,QAAQ,CAAC,EAC7BmB,UAAU,CAACL,QAAQ,CAACb,SAAS,CAAC,CAC/B;;MAED;MACA,MAAMmB,QAAQ,GAAGxD,CAAC,CAACyD,MAAM,CAACzB,QAAQ,CAAC,CAAC0B,UAAU,CAAC1D,CAAC,CAACyD,MAAM,CAACH,gBAAgB,CAAC,CAAC;;MAE1E;MACA,IAAIE,QAAQ,IAAI,EAAE,EAAE;QAClBd,OAAO,CAACC,GAAG,CAAC,4BAA4Ba,QAAQ,CAACG,OAAO,CAAC,CAAC,CAAC,yBAAyB,CAAC;QACrFR,aAAa,CAACpB,KAAK,EAAEmB,QAAQ,CAACU,OAAO,CAAC;MACxC;IACF,CAAC;;IAED;IACA,MAAMf,QAAQ,GAAGC,WAAW,CAACO,cAAc,EAAE,IAAI,CAAC;IAElD,OAAO,MAAMN,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACb,QAAQ,EAAEkB,QAAQ,EAAEnB,KAAK,EAAEoB,aAAa,CAAC,CAAC;EAE9C,OAAO,IAAI;AACb,CAAC;;AAED;AAAAC,GAAA,CA7BMH,iBAAiB;AAAAY,GAAA,GAAjBZ,iBAAiB;AA8BvB,MAAMa,UAAU,GAAGA,CAAC;EAAEC,KAAK;EAAEC,eAAe;EAAEC,oBAAoB;EAAEC;AAAc,CAAC,KAAK;EAAAC,GAAA;EACtF,MAAM1C,GAAG,GAAG3B,MAAM,CAAC,CAAC;EACpB,MAAMsE,QAAQ,GAAG3E,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM4E,cAAc,GAAG5E,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM,CAAC6E,SAAS,EAAEC,YAAY,CAAC,GAAGhF,QAAQ,CAAC,KAAK,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd,IAAI,CAACuE,KAAK,IAAIA,KAAK,CAACS,MAAM,GAAG,CAAC,IAAI,CAAC/C,GAAG,EAAE;IAExC,MAAMgD,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC,IAAI;QACFF,YAAY,CAAC,IAAI,CAAC;;QAElB;QACA,IAAIH,QAAQ,CAACM,OAAO,EAAE;UACpBjD,GAAG,CAACkD,WAAW,CAACP,QAAQ,CAACM,OAAO,CAAC;UACjCN,QAAQ,CAACM,OAAO,GAAG,IAAI;QACzB;;QAEA;QACA,MAAME,SAAS,GAAGb,KAAK,CAACtC,GAAG,CAACoD,IAAI,IAAI,CAClCtB,UAAU,CAACsB,IAAI,CAACxC,SAAS,CAAC,EAC1BkB,UAAU,CAACsB,IAAI,CAACzC,QAAQ,CAAC,CAC1B,CAAC;;QAEF;QACAwC,SAAS,CAACE,IAAI,CAACF,SAAS,CAAC,CAAC,CAAC,CAAC;;QAE5B;QACA,MAAMG,eAAe,GAAGH,SAAS,CAACnD,GAAG,CAACuD,EAAE,IAAIA,EAAE,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,CAACA,IAAI,CAAC,GAAG,CAAC;QAEnE,MAAMC,QAAQ,GAAG,MAAMjF,KAAK,CAACkF,GAAG,CAC9B,oDAAoDJ,eAAe,mCACrE,CAAC;QAED,IAAIG,QAAQ,CAACE,IAAI,CAACC,IAAI,KAAK,IAAI,IAAIH,QAAQ,CAACE,IAAI,CAACE,MAAM,CAACd,MAAM,GAAG,CAAC,EAAE;UAClE,MAAMe,aAAa,GAAGL,QAAQ,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACE,QAAQ,CAACC,WAAW;UAClE;UACA,MAAMA,WAAW,GAAGF,aAAa,CAAC9D,GAAG,CAACiE,KAAK,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;UAEpE;UACA,MAAMC,QAAQ,GAAG3F,CAAC,CAAC2F,QAAQ,CAACF,WAAW,EAAE;YACvCG,KAAK,EAAE,SAAS;YAChBC,MAAM,EAAE,CAAC;YACTC,OAAO,EAAE,GAAG;YACZC,QAAQ,EAAE;UACZ,CAAC,CAAC,CAACC,KAAK,CAACvE,GAAG,CAAC;UAEb2C,QAAQ,CAACM,OAAO,GAAGiB,QAAQ;QAC7B;MACF,CAAC,CAAC,OAAO/C,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAED,MAAMqD,uBAAuB,GAAG,MAAAA,CAAA,KAAY;MAC1C,IAAI;QACF;QACA,IAAI5B,cAAc,CAACK,OAAO,EAAE;UAC1BjD,GAAG,CAACkD,WAAW,CAACN,cAAc,CAACK,OAAO,CAAC;UACvCL,cAAc,CAACK,OAAO,GAAG,IAAI;QAC/B;;QAEA;QACA,IAAIT,oBAAoB,KAAK,IAAI,IAAIC,aAAa,KAAK,IAAI,EAAE;UAC3D,MAAMgC,eAAe,GAAGnC,KAAK,CAACE,oBAAoB,CAAC;UACnD,MAAMf,QAAQ,GAAGa,KAAK,CAACG,aAAa,CAAC;;UAErC;UACA,MAAMU,SAAS,GAAG,CAChB,CAACrB,UAAU,CAAC2C,eAAe,CAAC7D,SAAS,CAAC,EAAEkB,UAAU,CAAC2C,eAAe,CAAC9D,QAAQ,CAAC,CAAC;UAAE;UAC/E,CAACmB,UAAU,CAACL,QAAQ,CAACb,SAAS,CAAC,EAAEkB,UAAU,CAACL,QAAQ,CAACd,QAAQ,CAAC,CAAC,CAAC;UAAA,CACjE;;UAED;UACA,MAAM2C,eAAe,GAAGH,SAAS,CAACnD,GAAG,CAACuD,EAAE,IAAIA,EAAE,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,CAACA,IAAI,CAAC,GAAG,CAAC;UAEnE,MAAMC,QAAQ,GAAG,MAAMjF,KAAK,CAACkF,GAAG,CAC9B,oDAAoDJ,eAAe,mCACrE,CAAC;UAED,IAAIG,QAAQ,CAACE,IAAI,CAACC,IAAI,KAAK,IAAI,IAAIH,QAAQ,CAACE,IAAI,CAACE,MAAM,CAACd,MAAM,GAAG,CAAC,EAAE;YAClE,MAAMe,aAAa,GAAGL,QAAQ,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACE,QAAQ,CAACC,WAAW;YAClE;YACA,MAAMA,WAAW,GAAGF,aAAa,CAAC9D,GAAG,CAACiE,KAAK,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;YAEpE;YACA,MAAMC,QAAQ,GAAG3F,CAAC,CAAC2F,QAAQ,CAACF,WAAW,EAAE;cACvCG,KAAK,EAAE,SAAS;cAAE;cAClBC,MAAM,EAAE,CAAC;cACTC,OAAO,EAAE,GAAG;cACZC,QAAQ,EAAE;YACZ,CAAC,CAAC,CAACC,KAAK,CAACvE,GAAG,CAAC;YAEb4C,cAAc,CAACK,OAAO,GAAGiB,QAAQ;UACnC;QACF;QACApB,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAO3B,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;QAC1D2B,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDA,YAAY,CAAC,IAAI,CAAC;IAClBE,qBAAqB,CAAC,CAAC,CAAC0B,IAAI,CAAC,MAAMF,uBAAuB,CAAC,CAAC,CAAC;;IAE7D;IACA,OAAO,MAAM;MACX,IAAI7B,QAAQ,CAACM,OAAO,IAAIjD,GAAG,EAAE;QAC3BA,GAAG,CAACkD,WAAW,CAACP,QAAQ,CAACM,OAAO,CAAC;MACnC;MACA,IAAIL,cAAc,CAACK,OAAO,IAAIjD,GAAG,EAAE;QACjCA,GAAG,CAACkD,WAAW,CAACN,cAAc,CAACK,OAAO,CAAC;MACzC;IACF,CAAC;EACH,CAAC,EAAE,CAACjD,GAAG,EAAEsC,KAAK,EAAEE,oBAAoB,EAAEC,aAAa,CAAC,CAAC,CAAC,CAAC;;EAEvD;EACA,OAAOI,SAAS,gBACdjE,OAAA;IAAKe,SAAS,EAAC,sBAAsB;IAAAgF,QAAA,eACnC/F,OAAA;MAAKe,SAAS,EAAC,sBAAsB;MAAAgF,QAAA,gBACnC/F,OAAA;QAAKe,SAAS,EAAC;MAAc;QAAAiF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACpCnG,OAAA;QAAA+F,QAAA,EAAG;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC,GAAG,IAAI;AACjB,CAAC;;AAED;AAAArC,GAAA,CAhIML,UAAU;EAAA,QACFhE,MAAM;AAAA;AAAA2G,GAAA,GADd3C,UAAU;AAiIhB,MAAM4C,qBAAqB,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,GAAA;EACjD,MAAMnF,GAAG,GAAG1B,YAAY,CAAC;IACvB8G,aAAaA,CAACC,CAAC,EAAE;MACfH,WAAW,CAAC,CAACG,CAAC,CAACC,MAAM,CAACC,GAAG,EAAEF,CAAC,CAACC,MAAM,CAACE,GAAG,CAAC,CAAC;IAC3C,CAAC;IACDC,aAAaA,CAACJ,CAAC,EAAE;MACfpE,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEkE,CAAC,CAACK,OAAO,CAAC;MAC3CC,KAAK,CAAC,+DAA+D,CAAC;IACxE;EACF,CAAC,CAAC;EAEF5H,SAAS,CAAC,MAAM;IACd;IACAiC,GAAG,CAAC4F,MAAM,CAAC;MAAEC,KAAK,EAAE,IAAI;MAAEC,kBAAkB,EAAE;IAAK,CAAC,CAAC;IAErD,OAAO,MAAM;MACX9F,GAAG,CAAC+F,UAAU,CAAC,CAAC;IAClB,CAAC;EACH,CAAC,EAAE,CAAC/F,GAAG,CAAC,CAAC;EAET,OAAO,IAAI;AACb,CAAC;;AAED;AAAAmF,GAAA,CAvBMF,qBAAqB;EAAA,QACb3G,YAAY;AAAA;AAAA0H,GAAA,GADpBf,qBAAqB;AAwB3B,MAAMgB,cAAc,GAAGA,CAAC;EAAE1F,QAAQ;EAAE2F,SAAS;EAAEC;AAAQ,CAAC,KAAK;EAAAC,GAAA;EAC3D;EACA,MAAMpG,GAAG,GAAGhC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1B,MAAMqI,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI9F,QAAQ,EAAE;MACZ;MACA2F,SAAS,CAAC3F,QAAQ,CAAC;MACnB;MACAU,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEX,QAAQ,CAAC;IAC9E,CAAC,MAAM,IAAI4F,OAAO,IAAIA,OAAO,CAAC1E,QAAQ,EAAE;MACtC;MACA,MAAMI,gBAAgB,GAAG,CACvBC,UAAU,CAACqE,OAAO,CAAC1E,QAAQ,CAACd,QAAQ,CAAC,EACrCmB,UAAU,CAACqE,OAAO,CAAC1E,QAAQ,CAACb,SAAS,CAAC,CACvC;MACDsF,SAAS,CAACrE,gBAAgB,CAAC;MAC3BZ,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEW,gBAAgB,CAAC;IAC9D,CAAC,MAAM,IAAIsE,OAAO,IAAIA,OAAO,CAACG,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACvD,MAAM,GAAG,CAAC,EAAE;MAC/D;MACA,MAAMwD,iBAAiB,GAAG,CACxBzE,UAAU,CAACqE,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC3F,QAAQ,CAAC,EACrCmB,UAAU,CAACqE,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC1F,SAAS,CAAC,CACvC;MACDsF,SAAS,CAACK,iBAAiB,CAAC;MAC5BtF,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEqF,iBAAiB,CAAC;IACzE,CAAC,MAAM;MACL;MACA,MAAMC,eAAe,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;MAC1CN,SAAS,CAACM,eAAe,CAAC;MAC1BvF,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEsF,eAAe,CAAC;IACpE;EACF,CAAC;;EAED;EACA,oBACE5H,OAAA;IACEe,SAAS,EAAC,iBAAiB;IAC3B8G,OAAO,EAAEJ,WAAY;IACrBK,KAAK,EAAEnG,QAAQ,GAAG,6BAA6B,GAAG,qBAAsB;IAAAoE,QAAA,gBAExE/F,OAAA;MAAGe,SAAS,EAAC;IAAuB;MAAAiF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,KAAC,EAACxE,QAAQ,GAAG,eAAe,GAAG,YAAY;EAAA;IAAAqE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9E,CAAC;AAEb,CAAC;;AAED;AACA;AAAAqB,GAAA,CA/CMH,cAAc;AAAAU,GAAA,GAAdV,cAAc;AAgDpB,MAAMW,qBAAqB,GAAGA,CAAC;EAAEtG,KAAK;EAAEuG,MAAM;EAAEC,aAAa;EAAEC;AAAW,CAAC,KAAK;EAAAC,GAAA;EAC9E,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGpJ,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMqJ,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI,CAAC7G,KAAK,IAAI,CAACuG,MAAM,EAAE;IAEvB,IAAI;MACFK,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMzD,QAAQ,GAAG,MAAMjF,KAAK,CAACkC,IAAI,CAC/BhC,SAAS,CAAC,oBAAoB,CAAC,EAC/B;QAAE4B,KAAK;QAAEuG;MAAO,CAAC,EACjB;QACEhG,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;QAC3D;MACF,CACF,CAAC;MAED,IAAIyC,QAAQ,CAACE,IAAI,EAAE;QACjB1C,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;QACxC,IAAI4F,aAAa,EAAEA,aAAa,CAACrD,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC;MACtD;IACF,CAAC,CAAC,OAAOxC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CwE,KAAK,CAAC,mDAAmD,CAAC;IAC5D,CAAC,SAAS;MACRuB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,IAAI,CAACH,UAAU,EAAE,OAAO,IAAI;EAE5B,oBACEnI,OAAA;IACEe,SAAS,EAAC,mBAAmB;IAC7B8G,OAAO,EAAEU,eAAgB;IACzBC,QAAQ,EAAEH,OAAQ;IAAAtC,QAAA,EAEjBsC,OAAO,GAAG,YAAY,GAAG;EAAiB;IAAArC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEb,CAAC;;AAED;AAAAiC,GAAA,CA3CMJ,qBAAqB;AAAAS,GAAA,GAArBT,qBAAqB;AA4C3B,MAAMU,sBAAsB,GAAGA,CAAC;EAAEhF,KAAK;EAAEC,eAAe;EAAEC,oBAAoB;EAAEC;AAAc,CAAC,KAAK;EAAA8E,GAAA;EAClG,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG3J,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAAC4J,aAAa,EAAEC,gBAAgB,CAAC,GAAG7J,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACiE,QAAQ,EAAE6F,WAAW,CAAC,GAAG9J,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM+J,eAAe,GAAG7J,MAAM,CAAC,IAAI,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACuE,KAAK,IAAI,CAACC,eAAe,IAAIC,oBAAoB,KAAK,IAAI,IAAIC,aAAa,KAAK,IAAI,EAAE;IAE3F,MAAMqF,QAAQ,GAAGxF,KAAK,CAACE,oBAAoB,CAAC;IAC5C,MAAMf,QAAQ,GAAGa,KAAK,CAACG,aAAa,CAAC;;IAErC;IACA,MAAMsF,aAAa,GAAGA,CAAA,KAAM;MAC1B,MAAMC,UAAU,GAAGzJ,CAAC,CAACyD,MAAM,CAACO,eAAe,CAAC;MAC5C,MAAM0F,WAAW,GAAG1J,CAAC,CAACyD,MAAM,CAC1BF,UAAU,CAACgG,QAAQ,CAACnH,QAAQ,CAAC,EAC7BmB,UAAU,CAACgG,QAAQ,CAAClH,SAAS,CAC/B,CAAC;MACD,MAAMsH,WAAW,GAAG3J,CAAC,CAACyD,MAAM,CAC1BF,UAAU,CAACL,QAAQ,CAACd,QAAQ,CAAC,EAC7BmB,UAAU,CAACL,QAAQ,CAACb,SAAS,CAC/B,CAAC;;MAED;MACA,MAAMuH,aAAa,GAAGC,gBAAgB,CAACJ,UAAU,EAAEE,WAAW,CAAC;;MAE/D;MACA,MAAMG,cAAc,GAAGL,UAAU,CAAC/F,UAAU,CAACiG,WAAW,CAAC;MACzDN,WAAW,CAACS,cAAc,CAAC;;MAE3B;MACA,IAAIA,cAAc,IAAI,GAAG,EAAE;QACzB;QACA;QACA,MAAMC,cAAc,GAAGF,gBAAgB,CAACH,WAAW,EAAED,UAAU,CAAC;;QAEhE;QACA,MAAMO,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACN,aAAa,GAAGG,cAAc,CAAC;QACtD,MAAMI,eAAe,GAAGH,KAAK,GAAG,GAAG,GAAG,GAAG,GAAGA,KAAK,GAAGA,KAAK;;QAEzD;QACA,IAAIG,eAAe,GAAG,EAAE,IAAIA,eAAe,GAAG,GAAG,EAAE;UACjD,IAAKP,aAAa,GAAGG,cAAc,IAAIH,aAAa,GAAGG,cAAc,GAAG,GAAG,IACtEA,cAAc,GAAGH,aAAa,IAAIG,cAAc,GAAGH,aAAa,GAAG,GAAI,EAAE;YAC5ER,gBAAgB,CAAC,OAAO,CAAC;UAC3B,CAAC,MAAM;YACLA,gBAAgB,CAAC,MAAM,CAAC;UAC1B;;UAEA;UACA,IAAIU,cAAc,IAAI,EAAE,EAAE;YACxBZ,mBAAmB,CAAC,IAAI,CAAC;;YAEzB;YACA,MAAMkB,WAAW,GAAGC,UAAU,CAAC,MAAM;cACnCnB,mBAAmB,CAAC,KAAK,CAAC;YAC5B,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;YAEX,OAAO,MAAMoB,YAAY,CAACF,WAAW,CAAC;UACxC;QACF,CAAC,MAAM;UACLhB,gBAAgB,CAAC,UAAU,CAAC;QAC9B;MACF,CAAC,MAAM;QACLA,gBAAgB,CAAC,IAAI,CAAC;QACtBF,mBAAmB,CAAC,KAAK,CAAC;MAC5B;IACF,CAAC;;IAED;IACA,MAAMrG,QAAQ,GAAGC,WAAW,CAAC0G,aAAa,EAAE,IAAI,CAAC;IAEjD,OAAO,MAAMzG,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACkB,KAAK,EAAEC,eAAe,EAAEC,oBAAoB,EAAEC,aAAa,CAAC,CAAC;;EAEjE;EACA,MAAM2F,gBAAgB,GAAGA,CAACU,KAAK,EAAEC,GAAG,KAAK;IACvC,MAAMC,QAAQ,GAAGF,KAAK,CAACvD,GAAG,GAAGiD,IAAI,CAACS,EAAE,GAAG,GAAG;IAC1C,MAAMC,QAAQ,GAAGJ,KAAK,CAACtD,GAAG,GAAGgD,IAAI,CAACS,EAAE,GAAG,GAAG;IAC1C,MAAME,MAAM,GAAGJ,GAAG,CAACxD,GAAG,GAAGiD,IAAI,CAACS,EAAE,GAAG,GAAG;IACtC,MAAMG,MAAM,GAAGL,GAAG,CAACvD,GAAG,GAAGgD,IAAI,CAACS,EAAE,GAAG,GAAG;IAEtC,MAAMI,CAAC,GAAGb,IAAI,CAACc,GAAG,CAACF,MAAM,GAAGF,QAAQ,CAAC,GAAGV,IAAI,CAACe,GAAG,CAACJ,MAAM,CAAC;IACxD,MAAMK,CAAC,GAAGhB,IAAI,CAACe,GAAG,CAACP,QAAQ,CAAC,GAAGR,IAAI,CAACc,GAAG,CAACH,MAAM,CAAC,GACrCX,IAAI,CAACc,GAAG,CAACN,QAAQ,CAAC,GAAGR,IAAI,CAACe,GAAG,CAACJ,MAAM,CAAC,GAAGX,IAAI,CAACe,GAAG,CAACH,MAAM,GAAGF,QAAQ,CAAC;IAE7E,IAAIO,OAAO,GAAGjB,IAAI,CAACkB,KAAK,CAACL,CAAC,EAAEG,CAAC,CAAC,GAAG,GAAG,GAAGhB,IAAI,CAACS,EAAE;IAC9C,IAAIQ,OAAO,GAAG,CAAC,EAAEA,OAAO,IAAI,GAAG;IAE/B,OAAOA,OAAO;EAChB,CAAC;EAED,IAAI,CAACjC,gBAAgB,EAAE,OAAO,IAAI;;EAElC;EACA,oBACE5I,OAAA;IAAKe,SAAS,EAAC,mBAAmB;IAACgK,GAAG,EAAE9B,eAAgB;IAAAlD,QAAA,gBACtD/F,OAAA;MAAKe,SAAS,EAAC,WAAW;MAAAgF,QAAA,GACvB+C,aAAa,KAAK,MAAM,iBAAI9I,OAAA;QAAGe,SAAS,EAAC;MAAmB;QAAAiF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACjE2C,aAAa,KAAK,OAAO,iBAAI9I,OAAA;QAAGe,SAAS,EAAC;MAAoB;QAAAiF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACnE2C,aAAa,KAAK,UAAU,iBAAI9I,OAAA;QAAGe,SAAS,EAAC;MAAiB;QAAAiF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC,eACNnG,OAAA;MAAKe,SAAS,EAAC,WAAW;MAAAgF,QAAA,GACvB+C,aAAa,KAAK,MAAM,iBAAI9I,OAAA;QAAA+F,QAAA,GAAG,eAAa,EAAC6D,IAAI,CAACoB,KAAK,CAAC7H,QAAQ,CAAC,EAAC,SAAO;MAAA;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EAC7E2C,aAAa,KAAK,OAAO,iBAAI9I,OAAA;QAAA+F,QAAA,GAAG,gBAAc,EAAC6D,IAAI,CAACoB,KAAK,CAAC7H,QAAQ,CAAC,EAAC,SAAO;MAAA;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EAC/E2C,aAAa,KAAK,UAAU,iBAAI9I,OAAA;QAAA+F,QAAA,GAAG,wBAAsB,EAAC6D,IAAI,CAACoB,KAAK,CAAC7H,QAAQ,CAAC,EAAC,SAAO;MAAA;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AAAAwC,GAAA,CAhHMD,sBAAsB;AAAAuC,GAAA,GAAtBvC,sBAAsB;AAiH5B,MAAMwC,uBAAuB,GAAGA,CAAC;EAAEvJ,QAAQ;EAAEkB;AAAS,CAAC,KAAK;EAAAsI,GAAA;EAC1DhM,SAAS,CAAC,MAAM;IACd,IAAI,CAACwC,QAAQ,IAAI,CAACkB,QAAQ,EAAE;IAE5B,MAAMuI,cAAc,GAAGA,CAAA,KAAM;MAC3B,MAAMnI,gBAAgB,GAAG,CACvBC,UAAU,CAACL,QAAQ,CAACd,QAAQ,CAAC,EAC7BmB,UAAU,CAACL,QAAQ,CAACb,SAAS,CAAC,CAC/B;;MAED;MACA,MAAMmB,QAAQ,GAAGxD,CAAC,CAACyD,MAAM,CAACzB,QAAQ,CAAC,CAAC0B,UAAU,CAAC1D,CAAC,CAACyD,MAAM,CAACH,gBAAgB,CAAC,CAAC;;MAE1E;MACA,MAAMoI,eAAe,GAAGC,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;MACrE,IAAIF,eAAe,EAAE;QACnBA,eAAe,CAACG,WAAW,GAAG,GAAG5B,IAAI,CAACoB,KAAK,CAAC7H,QAAQ,CAAC,SAAS;MAChE;IACF,CAAC;;IAED;IACAiI,cAAc,CAAC,CAAC;IAChB,MAAM5I,QAAQ,GAAGC,WAAW,CAAC2I,cAAc,EAAE,IAAI,CAAC;IAElD,OAAO,MAAM1I,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACb,QAAQ,EAAEkB,QAAQ,CAAC,CAAC;EAExB,OAAO,IAAI;AACb,CAAC;;AAED;AAAAsI,GAAA,CA9BMD,uBAAuB;AAAAO,GAAA,GAAvBP,uBAAuB;AA+B7B,MAAMQ,mBAAmB,GAAGA,CAAC;EAAEhI,KAAK;EAAEC,eAAe;EAAEC,oBAAoB;EAAEC;AAAc,CAAC,KAAK;EAAA8H,IAAA;EAC/F,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG3M,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACiE,QAAQ,EAAE6F,WAAW,CAAC,GAAG9J,QAAQ,CAAC,IAAI,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,IAAI,CAACuE,KAAK,IAAI,CAACC,eAAe,IAAIC,oBAAoB,KAAK,IAAI,IAAIC,aAAa,KAAK,IAAI,EAAE;;IAE3F;IACA,MAAMhB,QAAQ,GAAGa,KAAK,CAACG,aAAa,CAAC;;IAErC;IACA,MAAMiI,mBAAmB,GAAGA,CAAA,KAAM;MAChC,MAAM1C,UAAU,GAAGzJ,CAAC,CAACyD,MAAM,CAACO,eAAe,CAAC;MAC5C,MAAM2F,WAAW,GAAG3J,CAAC,CAACyD,MAAM,CAC1BF,UAAU,CAACL,QAAQ,CAACd,QAAQ,CAAC,EAC7BmB,UAAU,CAACL,QAAQ,CAACb,SAAS,CAC/B,CAAC;;MAED;MACA,MAAMyH,cAAc,GAAGL,UAAU,CAAC/F,UAAU,CAACiG,WAAW,CAAC;MACzDN,WAAW,CAACY,IAAI,CAACoB,KAAK,CAACvB,cAAc,CAAC,CAAC;;MAEvC;MACA;MACA,MAAMoB,OAAO,GAAGrB,gBAAgB,CAACJ,UAAU,EAAEE,WAAW,CAAC;;MAEzD;MACA,IAAIuB,OAAO,IAAI,KAAK,IAAIA,OAAO,GAAG,IAAI,EAAE;QACtCgB,YAAY,CAAC,OAAO,CAAC;MACvB,CAAC,MAAM,IAAIhB,OAAO,IAAI,IAAI,IAAIA,OAAO,GAAG,IAAI,EAAE;QAC5CgB,YAAY,CAAC,WAAW,CAAC;MAC3B,CAAC,MAAM,IAAIhB,OAAO,IAAI,IAAI,IAAIA,OAAO,GAAG,KAAK,EAAE;QAC7CgB,YAAY,CAAC,MAAM,CAAC;MACtB,CAAC,MAAM,IAAIhB,OAAO,IAAI,KAAK,IAAIA,OAAO,GAAG,KAAK,EAAE;QAC9CgB,YAAY,CAAC,WAAW,CAAC;MAC3B,CAAC,MAAM,IAAIhB,OAAO,IAAI,KAAK,IAAIA,OAAO,GAAG,KAAK,EAAE;QAC9CgB,YAAY,CAAC,OAAO,CAAC;MACvB,CAAC,MAAM,IAAIhB,OAAO,IAAI,KAAK,IAAIA,OAAO,GAAG,KAAK,EAAE;QAC9CgB,YAAY,CAAC,WAAW,CAAC;MAC3B,CAAC,MAAM,IAAIhB,OAAO,IAAI,KAAK,IAAIA,OAAO,GAAG,KAAK,EAAE;QAC9CgB,YAAY,CAAC,MAAM,CAAC;MACtB,CAAC,MAAM;QACLA,YAAY,CAAC,WAAW,CAAC;MAC3B;IACF,CAAC;;IAED;IACAC,mBAAmB,CAAC,CAAC;IACrB,MAAMtJ,QAAQ,GAAGC,WAAW,CAACqJ,mBAAmB,EAAE,IAAI,CAAC;IAEvD,OAAO,MAAMpJ,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACkB,KAAK,EAAEC,eAAe,EAAEC,oBAAoB,EAAEC,aAAa,CAAC,CAAC;;EAEjE;EACA,MAAM2F,gBAAgB,GAAGA,CAACU,KAAK,EAAEC,GAAG,KAAK;IACvC,MAAMC,QAAQ,GAAGF,KAAK,CAACvD,GAAG,GAAGiD,IAAI,CAACS,EAAE,GAAG,GAAG;IAC1C,MAAMC,QAAQ,GAAGJ,KAAK,CAACtD,GAAG,GAAGgD,IAAI,CAACS,EAAE,GAAG,GAAG;IAC1C,MAAME,MAAM,GAAGJ,GAAG,CAACxD,GAAG,GAAGiD,IAAI,CAACS,EAAE,GAAG,GAAG;IACtC,MAAMG,MAAM,GAAGL,GAAG,CAACvD,GAAG,GAAGgD,IAAI,CAACS,EAAE,GAAG,GAAG;IAEtC,MAAMI,CAAC,GAAGb,IAAI,CAACc,GAAG,CAACF,MAAM,GAAGF,QAAQ,CAAC,GAAGV,IAAI,CAACe,GAAG,CAACJ,MAAM,CAAC;IACxD,MAAMK,CAAC,GAAGhB,IAAI,CAACe,GAAG,CAACP,QAAQ,CAAC,GAAGR,IAAI,CAACc,GAAG,CAACH,MAAM,CAAC,GACrCX,IAAI,CAACc,GAAG,CAACN,QAAQ,CAAC,GAAGR,IAAI,CAACe,GAAG,CAACJ,MAAM,CAAC,GAAGX,IAAI,CAACe,GAAG,CAACH,MAAM,GAAGF,QAAQ,CAAC;IAE7E,IAAIO,OAAO,GAAGjB,IAAI,CAACkB,KAAK,CAACL,CAAC,EAAEG,CAAC,CAAC,GAAG,GAAG,GAAGhB,IAAI,CAACS,EAAE;IAC9C,IAAIQ,OAAO,GAAG,CAAC,EAAEA,OAAO,IAAI,GAAG;IAE/B,OAAOA,OAAO;EAChB,CAAC;;EAED;EACA,oBACE7K,OAAA;IAAKe,SAAS,EAAC,sBAAsB;IAAAgF,QAAA,gBACnC/F,OAAA;MAAKe,SAAS,EAAC,gBAAgB;MAAAgF,QAAA,GAC5B6F,SAAS,KAAK,OAAO,iBAAI5L,OAAA;QAAGe,SAAS,EAAC;MAAiB;QAAAiF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC5DyF,SAAS,KAAK,WAAW,iBAAI5L,OAAA;QAAGe,SAAS,EAAC,iBAAiB;QAACgL,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAgB;MAAE;QAAAhG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACvGyF,SAAS,KAAK,MAAM,iBAAI5L,OAAA;QAAGe,SAAS,EAAC;MAAoB;QAAAiF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC9DyF,SAAS,KAAK,WAAW,iBAAI5L,OAAA;QAAGe,SAAS,EAAC,mBAAmB;QAACgL,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAiB;MAAE;QAAAhG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC1GyF,SAAS,KAAK,OAAO,iBAAI5L,OAAA;QAAGe,SAAS,EAAC;MAAmB;QAAAiF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC9DyF,SAAS,KAAK,WAAW,iBAAI5L,OAAA;QAAGe,SAAS,EAAC,mBAAmB;QAACgL,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAgB;MAAE;QAAAhG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACzGyF,SAAS,KAAK,MAAM,iBAAI5L,OAAA;QAAGe,SAAS,EAAC;MAAmB;QAAAiF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC7DyF,SAAS,KAAK,WAAW,iBAAI5L,OAAA;QAAGe,SAAS,EAAC,iBAAiB;QAACgL,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAiB;MAAE;QAAAhG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtG,CAAC,eACNnG,OAAA;MAAKe,SAAS,EAAC,gBAAgB;MAAAgF,QAAA,gBAC7B/F,OAAA;QAAA+F,QAAA,GAAG,OAAK,eAAA/F,OAAA;UAAA+F,QAAA,EAAS6F;QAAS;UAAA5F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,SAAK,EAAChD,QAAQ,EAAC,SAAO;MAAA;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC9DnG,OAAA;QAAA+F,QAAA,GAAG,aAAW,eAAA/F,OAAA;UAAA+F,QAAA,EAASrC,KAAK,CAACG,aAAa,CAAC,CAACoI;QAAI;UAAAjG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AAAAwF,IAAA,CA3FMD,mBAAmB;AAAAQ,IAAA,GAAnBR,mBAAmB;AA4FzB,MAAMS,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,IAAA;EAC9B,MAAMhL,GAAG,GAAG3B,MAAM,CAAC,CAAC;EACpB,MAAM;IAAEkC,QAAQ;IAAE4F;EAAQ,CAAC,GAAGtI,KAAK,CAACoN,UAAU,CAACC,gBAAgB,CAAC;EAEhE,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAACnL,GAAG,EAAE;IAEV,IAAI;MACF,IAAIO,QAAQ,EAAE;QACZ;QACAP,GAAG,CAACC,OAAO,CAACM,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;QAC3BU,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEX,QAAQ,CAAC;MAC9E,CAAC,MAAM,IAAI4F,OAAO,IAAIA,OAAO,CAAC1E,QAAQ,EAAE;QACtC;QACA,MAAMI,gBAAgB,GAAG,CACvBC,UAAU,CAACqE,OAAO,CAAC1E,QAAQ,CAACd,QAAQ,CAAC,EACrCmB,UAAU,CAACqE,OAAO,CAAC1E,QAAQ,CAACb,SAAS,CAAC,CACvC;QACDZ,GAAG,CAACC,OAAO,CAAC4B,gBAAgB,EAAE,EAAE,CAAC;QACjCZ,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEW,gBAAgB,CAAC;MAC9D,CAAC,MAAM,IAAIsE,OAAO,IAAIA,OAAO,CAACG,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACvD,MAAM,GAAG,CAAC,EAAE;QAC/D;QACA,MAAMwD,iBAAiB,GAAG,CACxBzE,UAAU,CAACqE,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC3F,QAAQ,CAAC,EACrCmB,UAAU,CAACqE,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC1F,SAAS,CAAC,CACvC;QACDZ,GAAG,CAACC,OAAO,CAACsG,iBAAiB,EAAE,EAAE,CAAC;QAClCtF,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEqF,iBAAiB,CAAC;MACzE;IACF,CAAC,CAAC,OAAOpF,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACEvC,OAAA;IAAKe,SAAS,EAAC,kDAAkD;IAAAgF,QAAA,eAC/D/F,OAAA;MAAKe,SAAS,EAAC,6BAA6B;MAAAgF,QAAA,eAC1C/F,OAAA;QACEe,SAAS,EAAC,mBAAmB;QAC7B8G,OAAO,EAAE0E,eAAgB;QACzBzE,KAAK,EAAEnG,QAAQ,GAAG,6BAA6B,GAAG,qBAAsB;QAAAoE,QAAA,eAExE/F,OAAA;UAAGe,SAAS,EAAC;QAAuB;UAAAiF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AAAAiG,IAAA,CAjDMD,iBAAiB;EAAA,QACT1M,MAAM;AAAA;AAAA+M,IAAA,GADdL,iBAAiB;AAkDvB,MAAMG,gBAAgB,gBAAGrN,KAAK,CAACwN,aAAa,CAAC;EAC3C9K,QAAQ,EAAE,IAAI;EACd4F,OAAO,EAAE,IAAI;EACbrG,IAAI,EAAE,EAAE;EACRoF,WAAW,EAAEA,CAAA,KAAM,CAAC,CAAC;EACrBoG,OAAO,EAAEA,CAAA,KAAM,CAAC;AAClB,CAAC,CAAC;AAEF,SAASC,eAAeA,CAAA,EAAG;EAAAC,IAAA;EACzB,MAAM,CAACjL,QAAQ,EAAE2E,WAAW,CAAC,GAAGpH,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAAC+B,MAAM,EAAEqG,SAAS,CAAC,GAAGpI,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACgC,IAAI,EAAEwL,OAAO,CAAC,GAAGxN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACqI,OAAO,EAAEsF,UAAU,CAAC,GAAG3N,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmJ,OAAO,EAAEC,UAAU,CAAC,GAAGpJ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACqD,KAAK,EAAEuK,QAAQ,CAAC,GAAG5N,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC6N,QAAQ,EAAEC,WAAW,CAAC,GAAG9N,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM+N,QAAQ,GAAGpN,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMqN,MAAM,GAAG9N,MAAM,CAAC,IAAI,CAAC;;EAE3B;EACA,MAAM+N,cAAc,GAAGA,CAAA,KAAM;IAC3BH,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;;EAED;EACA7N,SAAS,CAAC,MAAM;IACd,MAAMiO,WAAW,GAAGxN,KAAK,CAACyN,YAAY,CAACxI,QAAQ,CAACyI,GAAG,CACjDzI,QAAQ,IAAIA,QAAQ,EACpBtC,KAAK,IAAI;MAAA,IAAAgL,oBAAA;MACP,IAAIhL,KAAK,CAACsC,QAAQ,KAAKtC,KAAK,CAACsC,QAAQ,CAAC2I,MAAM,KAAK,GAAG,KAAAD,oBAAA,GAAIhL,KAAK,CAACsC,QAAQ,CAACE,IAAI,cAAAwI,oBAAA,eAAnBA,oBAAA,CAAqBE,OAAO,CAAC,EAAE;QACrFpL,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;QAC7EH,YAAY,CAACuL,UAAU,CAAC,UAAU,CAAC;QACnCvL,YAAY,CAACuL,UAAU,CAAC,MAAM,CAAC;QAC/BT,QAAQ,CAAC,QAAQ,CAAC;MACpB;MACA,OAAOU,OAAO,CAACC,MAAM,CAACrL,KAAK,CAAC;IAC9B,CACF,CAAC;IAED,OAAO,MAAM;MACX3C,KAAK,CAACyN,YAAY,CAACxI,QAAQ,CAACgJ,KAAK,CAACT,WAAW,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;;EAEd;EACA9N,SAAS,CAAC,MAAM;IACd,MAAM2O,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACFxF,UAAU,CAAC,IAAI,CAAC;QAEhB,MAAMzD,QAAQ,GAAG,MAAMjF,KAAK,CAACkF,GAAG,CAC9BhF,SAAS,CAAC,gBAAgB,CAAC,EAC3B;UACEmC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;UAC3D;QACF,CACF,CAAC;QAED,IAAIyC,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE;UACvC8H,UAAU,CAAChI,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC;UAC9B1C,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEuC,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC;QAC5D,CAAC,MAAM;UACL+H,QAAQ,CAAC,wBAAwB,CAAC;QACpC;MACF,CAAC,CAAC,OAAOvK,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDuK,QAAQ,CAAC,qCAAqC,CAAC;MACjD,CAAC,SAAS;QACRxE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDwF,cAAc,CAAC,CAAC;;IAEhB;IACA,MAAMtL,QAAQ,GAAGC,WAAW,CAACqL,cAAc,EAAE,KAAK,CAAC;IAEnD,OAAO,MAAMpL,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACArD,SAAS,CAAC,MAAM;IACd,IAAIwC,QAAQ,IAAI,CAACV,MAAM,EAAE;MACvBqG,SAAS,CAAC3F,QAAQ,CAAC;IACrB;EACF,CAAC,EAAE,CAACA,QAAQ,EAAEV,MAAM,CAAC,CAAC;;EAEtB;EACA,MAAM8M,iBAAiB,GAAG,MAAAA,CAAOrM,KAAK,EAAEuG,MAAM,KAAK;IACjD,IAAI;MACF,MAAMpD,QAAQ,GAAG,MAAMjF,KAAK,CAACkC,IAAI,CAC/BhC,SAAS,CAAC,oBAAoB,CAAC,EAC/B;QAAE4B,KAAK;QAAEuG;MAAO,CAAC,EACjB;QACEhG,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;QAC3D;MACF,CACF,CAAC;MAED,IAAIyC,QAAQ,CAACE,IAAI,EAAE;QACjB1C,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;QAEzC;QACAuK,UAAU,CAACmB,IAAI,KAAK;UAClB,GAAGA,IAAI;UACPC,GAAG,EAAEpJ,QAAQ,CAACE,IAAI,CAACA,IAAI;UACvBmJ,YAAY,EAAEC,QAAQ,CAACtJ,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACqJ,aAAa;QACzD,CAAC,CAAC,CAAC;;QAEH;QACA,MAAMN,cAAc,GAAG,MAAAA,CAAA,KAAY;UACjC,IAAI;YACF,MAAMjJ,QAAQ,GAAG,MAAMjF,KAAK,CAACkF,GAAG,CAC9BhF,SAAS,CAAC,gBAAgB,CAAC,EAC3B;cACEmC,OAAO,EAAE;gBACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;cAC3D;YACF,CACF,CAAC;YAED,IAAIyC,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE;cACvC8H,UAAU,CAAChI,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC;YAChC;UACF,CAAC,CAAC,OAAOxC,KAAK,EAAE;YACdF,OAAO,CAACE,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;UAC3D;QACF,CAAC;QAEDuL,cAAc,CAAC,CAAC;MAClB;IACF,CAAC,CAAC,OAAOvL,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;;EAED;EACA,MAAM8L,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAAC9G,OAAO,IAAI,CAACA,OAAO,CAACG,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACvD,MAAM,KAAK,CAAC,EAAE;MAC5D,OAAO;QAAEP,oBAAoB,EAAE,IAAI;QAAEC,aAAa,EAAE;MAAK,CAAC;IAC5D;IAEA,MAAMH,KAAK,GAAG6D,OAAO,CAACG,KAAK;IAC3B,MAAMwG,YAAY,GAAG3G,OAAO,CAAC2G,YAAY,IAAI,CAAC;;IAE9C;IACA;IACA,IAAIA,YAAY,KAAK,CAAC,EAAE;MACtB,OAAO;QACLtK,oBAAoB,EAAEF,KAAK,CAACS,MAAM,GAAG,CAAC;QACtCN,aAAa,EAAE;MACjB,CAAC;IACH;;IAEA;IACA,MAAMyK,sBAAsB,GAAGJ,YAAY,GAAGxK,KAAK,CAACS,MAAM;IAE1D,OAAO;MACLP,oBAAoB,EAAE0K,sBAAsB,GAAG,CAAC;MAChDzK,aAAa,EAAEyK,sBAAsB,GAAG5K,KAAK,CAACS;IAChD,CAAC;EACH,CAAC;EAED,MAAM;IAAEP,oBAAoB;IAAEC;EAAc,CAAC,GAAGwK,cAAc,CAAC,CAAC;;EAEhE;EACA,IAAIhG,OAAO,EAAE;IACX,oBACErI,OAAA;MAAKe,SAAS,EAAC,oBAAoB;MAAAgF,QAAA,gBACjC/F,OAAA;QAAKe,SAAS,EAAC;MAAS;QAAAiF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC/BnG,OAAA;QAAA+F,QAAA,EAAG;MAA+B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAEV;;EAEA;EACA,IAAI5D,KAAK,EAAE;IACT,oBACEvC,OAAA;MAAKe,SAAS,EAAC,kBAAkB;MAAAgF,QAAA,gBAC/B/F,OAAA;QAAA+F,QAAA,EAAI;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACdnG,OAAA;QAAA+F,QAAA,EAAIxD;MAAK;QAAAyD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACdnG,OAAA;QAAQ6H,OAAO,EAAEA,CAAA,KAAM0G,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAE;QAAA1I,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC;EAEV;;EAEA;EACA,IAAI,CAACoB,OAAO,IAAI,CAACA,OAAO,CAAC0G,GAAG,EAAE;IAC5B,oBACEjO,OAAA;MAAKe,SAAS,EAAC,kBAAkB;MAAAgF,QAAA,gBAC/B/F,OAAA;QAAA+F,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBnG,OAAA;QAAA+F,QAAA,EAAG;MAAuE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3E,CAAC;EAEV;;EAEA;EACA,MAAMoG,eAAe,GAAImC,SAAS,IAAK;IACrC,IAAI,CAAC3B,QAAQ,EAAE;IAEfzF,SAAS,CAACoH,SAAS,CAAC;IACpBhC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;EACf,CAAC;;EAED;EACA,MAAMiC,YAAY,GAAG;IACnBhN,QAAQ;IACR4F,OAAO;IACPrG,IAAI;IACJoF,WAAW;IACXoG;EACF,CAAC;EAED,oBACE1M,OAAA,CAACsM,gBAAgB,CAACsC,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAA5I,QAAA,eAC7C/F,OAAA;MAAKe,SAAS,EAAC,mBAAmB;MAAAgF,QAAA,eAChC/F,OAAA;QAAKe,SAAS,EAAC,sBAAsB;QAAAgF,QAAA,gBACnC/F,OAAA,CAACX,YAAY;UACX4B,MAAM,EAAEA,MAAM,IAAI,CAAC,OAAO,EAAE,OAAO,CAAE,CAAC;UAAA;UACtCC,IAAI,EAAEA,IAAK,CAAC;UAAA;UACZH,SAAS,EAAC,YAAY;UACtB+N,WAAW,EAAG1N,GAAG,IAAK;YACpB8L,MAAM,CAAC7I,OAAO,GAAGjD,GAAG;YACpB+L,cAAc,CAAC,CAAC;UAClB,CAAE;UAAApH,QAAA,gBAEF/F,OAAA,CAACV,SAAS;YACRyP,WAAW,EAAC,yFAAyF;YACrGC,GAAG,EAAC;UAAoD;YAAAhJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzD,CAAC,eAGFnG,OAAA,CAACgB,aAAa;YAACC,MAAM,EAAEA,MAAO;YAACC,IAAI,EAAEA;UAAK;YAAA8E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAG7CnG,OAAA,CAACqG,qBAAqB;YAACC,WAAW,EAAEA;UAAY;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,EAGlDxE,QAAQ,IAAI4F,OAAO,iBAClBvH,OAAA,CAACwB,eAAe;YACdC,QAAQ,EAAEU,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAE;YACzCV,KAAK,EAAE6F,OAAO,CAAC0G,GAAG,CAACgB,EAAG;YACtBtN,QAAQ,EAAEA;UAAS;YAAAqE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpB,CACF,EAGAxE,QAAQ,IAAI4F,OAAO,IAAIA,OAAO,CAAC1E,QAAQ,iBACtC7C,OAAA,CAAC4C,iBAAiB;YAChBlB,KAAK,EAAE6F,OAAO,CAAC0G,GAAG,CAACgB,EAAG;YACtBtN,QAAQ,EAAEA,QAAS;YACnBkB,QAAQ,EAAE0E,OAAO,CAAC1E,QAAS;YAC3BC,aAAa,EAAEiL;UAAkB;YAAA/H,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClC,CACF,EAGAxE,QAAQ,iBACP3B,OAAA,CAACT,MAAM;YAACoC,QAAQ,EAAEA,QAAS;YAACuN,IAAI,EAAEzO,OAAQ;YAAAsF,QAAA,eACxC/F,OAAA,CAACR,KAAK;cAAAuG,QAAA,eACJ/F,OAAA;gBAAKe,SAAS,EAAC,cAAc;gBAAAgF,QAAA,gBAC3B/F,OAAA;kBAAA+F,QAAA,GAAQ,qBAAmB,EAACwB,OAAO,CAAC0G,GAAG,CAAChC,IAAI,EAAC,GAAC;gBAAA;kBAAAjG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACvDnG,OAAA;kBAAA+F,QAAA,EAAG;gBAAa;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAG,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjB;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CACT,EAGAoB,OAAO,IAAIA,OAAO,CAACG,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACtG,GAAG,CAAC,CAACoD,IAAI,EAAE2K,KAAK,kBACzDnP,OAAA,CAACT,MAAM;YAELoC,QAAQ,EAAE,CAACuB,UAAU,CAACsB,IAAI,CAACzC,QAAQ,CAAC,EAAEmB,UAAU,CAACsB,IAAI,CAACxC,SAAS,CAAC,CAAE;YAClEkN,IAAI,EAAEC,KAAK,KAAKtL,aAAa,GAAG/C,YAAY,GAAGD,WAAY;YAAAkF,QAAA,eAE3D/F,OAAA,CAACR,KAAK;cAAAuG,QAAA,eACJ/F,OAAA;gBAAKe,SAAS,EAAC,YAAY;gBAAAgF,QAAA,gBACzB/F,OAAA;kBAAA+F,QAAA,EAASvB,IAAI,CAACyH;gBAAI;kBAAAjG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAS,CAAC,eAC5BnG,OAAA;kBAAA+F,QAAA,GAAG,QAAM,EAACoJ,KAAK,GAAG,CAAC,EAAC,WAAS;gBAAA;kBAAAnJ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAG,CAAC,EAChCgJ,KAAK,KAAKtL,aAAa,iBACtB7D,OAAA;kBAAGe,SAAS,EAAC,iBAAiB;kBAAAgF,QAAA,EAAC;gBAAsB;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAG,CACzD;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD;UAAC,GAZH3B,IAAI,CAACyK,EAAE;YAAAjJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAaN,CACT,CAAC,EAGDoB,OAAO,IAAIA,OAAO,CAACG,KAAK,IAAI/F,QAAQ,IAAIoL,QAAQ,iBAC/C/M,OAAA,CAACyD,UAAU;YACTC,KAAK,EAAE6D,OAAO,CAACG,KAAM;YACrB/D,eAAe,EAAEhC,QAAS;YAC1BiC,oBAAoB,EAAEA,oBAAqB;YAC3CC,aAAa,EAAEA;UAAc;YAAAmC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B,CACF,EAGAxE,QAAQ,IAAI4F,OAAO,IAAIA,OAAO,CAAC1E,QAAQ,iBACtC7C,OAAA,CAACkL,uBAAuB;YACtBvJ,QAAQ,EAAEA,QAAS;YACnBkB,QAAQ,EAAE0E,OAAO,CAAC1E;UAAS;YAAAmD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B,CACF,eAGDnG,OAAA,CAACmM,iBAAiB;YAAAnG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC,EAGdoB,OAAO,IAAIA,OAAO,CAACG,KAAK,IAAI/F,QAAQ,iBACnC3B,OAAA,CAAC0L,mBAAmB;UAClBhI,KAAK,EAAE6D,OAAO,CAACG,KAAM;UACrB/D,eAAe,EAAEhC,QAAS;UAC1BiC,oBAAoB,EAAEA,oBAAqB;UAC3CC,aAAa,EAAEA;QAAc;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CACF,eAGDnG,OAAA;UAAKe,SAAS,EAAC,oCAAoC;UAAAgF,QAAA,eACjD/F,OAAA;YACEe,SAAS,EAAC,iBAAiB;YAC3B8G,OAAO,EAAEA,CAAA,KAAM0E,eAAe,CAAC5K,QAAQ,KACpC4F,OAAO,IAAIA,OAAO,CAAC1E,QAAQ,GAC1B,CAACK,UAAU,CAACqE,OAAO,CAAC1E,QAAQ,CAACd,QAAQ,CAAC,EAAEmB,UAAU,CAACqE,OAAO,CAAC1E,QAAQ,CAACb,SAAS,CAAC,CAAC,GAC9EuF,OAAO,IAAIA,OAAO,CAACG,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACvD,MAAM,GAAG,CAAC,GACnD,CAACjB,UAAU,CAACqE,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC3F,QAAQ,CAAC,EAAEmB,UAAU,CAACqE,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC1F,SAAS,CAAC,CAAC,GAC/E,CAAC,OAAO,EAAE,OAAO,CAAE,CAAC,CAAE;YAC5B8F,KAAK,EAAEnG,QAAQ,GAAG,6BAA6B,GAAG,qBAAsB;YAAAoE,QAAA,gBAExE/F,OAAA;cAAGe,SAAS,EAAC;YAAuB;cAAAiF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,KAAC,EAACxE,QAAQ,GAAG,eAAe,GAAG,YAAY;UAAA;YAAAqE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9E;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGNnG,OAAA;UAAKe,SAAS,EAAC,gBAAgB;UAAAgF,QAAA,gBAC7B/F,OAAA;YAAA+F,QAAA,GAAI,OAAK,EAACwB,OAAO,CAAC0G,GAAG,CAAChC,IAAI;UAAA;YAAAjG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EAC/BoB,OAAO,CAAC1E,QAAQ,iBACf7C,OAAA;YAAKe,SAAS,EAAC,gBAAgB;YAAAgF,QAAA,gBAC7B/F,OAAA;cAAA+F,QAAA,gBAAG/F,OAAA;gBAAA+F,QAAA,EAAQ;cAAU;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,KAAC,EAACoB,OAAO,CAAC1E,QAAQ,CAACoJ,IAAI;YAAA;cAAAjG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC1DnG,OAAA;cAAA+F,QAAA,gBAAG/F,OAAA;gBAAA+F,QAAA,EAAQ;cAAS;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,KAAC,eAAAnG,OAAA;gBAAMiP,EAAE,EAAC,oBAAoB;gBAAAlJ,QAAA,EAAC;cAAc;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClF,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEhC;AAACyG,IAAA,CAzVQD,eAAe;EAAA,QAQL9M,WAAW;AAAA;AAAAuP,IAAA,GARrBzC,eAAe;AA2VxB,eAAeA,eAAe;AAAC,IAAApL,EAAA,EAAAoB,GAAA,EAAAa,GAAA,EAAA4C,GAAA,EAAAgB,GAAA,EAAAW,GAAA,EAAAU,GAAA,EAAAwC,GAAA,EAAAQ,GAAA,EAAAS,IAAA,EAAAM,IAAA,EAAA4C,IAAA;AAAAC,YAAA,CAAA9N,EAAA;AAAA8N,YAAA,CAAA1M,GAAA;AAAA0M,YAAA,CAAA7L,GAAA;AAAA6L,YAAA,CAAAjJ,GAAA;AAAAiJ,YAAA,CAAAjI,GAAA;AAAAiI,YAAA,CAAAtH,GAAA;AAAAsH,YAAA,CAAA5G,GAAA;AAAA4G,YAAA,CAAApE,GAAA;AAAAoE,YAAA,CAAA5D,GAAA;AAAA4D,YAAA,CAAAnD,IAAA;AAAAmD,YAAA,CAAA7C,IAAA;AAAA6C,YAAA,CAAAD,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}