{"ast":null,"code":"var _jsxFileName = \"/home/lubesh/Desktop/DBMS/KGP_Bus/frontend/src/components/driver_pages/DriverMapScreen.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMap, useMapEvents } from 'react-leaflet';\nimport L from 'leaflet';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { getApiUrl } from '../../utils/api2.js';\nimport '../../css/DriverMapScreen.css';\n\n// Fix for default marker icon in Leaflet with React\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',\n  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',\n  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png'\n});\n\n// Custom bus icon\nconst busIcon = new L.Icon({\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/30/30979.png',\n  iconSize: [40, 40],\n  iconAnchor: [20, 40],\n  popupAnchor: [0, -40]\n});\n\n// Bus stop icon\nconst busStopIcon = new L.Icon({\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/1165/1165895.png',\n  iconSize: [24, 24],\n  iconAnchor: [12, 24],\n  popupAnchor: [0, -24]\n});\n\n// Next stop icon (highlighted)\nconst nextStopIcon = new L.Icon({\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/1165/1165895.png',\n  iconSize: [36, 36],\n  iconAnchor: [18, 36],\n  popupAnchor: [0, -36],\n  className: 'next-stop-icon' // CSS class for styling\n});\n\n// Component to handle map centering\nconst MapController = ({\n  center,\n  zoom\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (center) {\n      map.setView(center, zoom || map.getZoom());\n    }\n  }, [center, zoom, map]);\n  return null;\n};\n\n// Component to update driver's location in the database\n_s(MapController, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapController;\nconst LocationUpdater = ({\n  driverId,\n  busId,\n  position\n}) => {\n  _s2();\n  useEffect(() => {\n    if (!position || !busId) return;\n    const updateLocation = async () => {\n      try {\n        await axios.post(getApiUrl('/driver/update-location'), {\n          busId,\n          latitude: position[0],\n          longitude: position[1]\n        }, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n          }\n        });\n        console.log('Location updated successfully');\n      } catch (error) {\n        console.error('Error updating location:', error);\n      }\n    };\n    updateLocation();\n\n    // Update location every 5 seconds (changed from 10 seconds)\n    const interval = setInterval(updateLocation, 5000);\n    return () => clearInterval(interval);\n  }, [position, busId, driverId]);\n  return null;\n};\n\n// Component to detect proximity to next bus stop\n_s2(LocationUpdater, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = LocationUpdater;\nconst ProximityDetector = ({\n  busId,\n  position,\n  nextStop,\n  onStopReached\n}) => {\n  _s3();\n  useEffect(() => {\n    if (!position || !nextStop || !busId) return;\n    const checkProximity = () => {\n      const nextStopPosition = [parseFloat(nextStop.latitude), parseFloat(nextStop.longitude)];\n\n      // Calculate distance between driver and next stop (in meters)\n      const distance = L.latLng(position).distanceTo(L.latLng(nextStopPosition));\n\n      // If within 30 meters, mark the stop as cleared\n      if (distance <= 30) {\n        console.log(`Within 30m of next stop (${distance.toFixed(2)}m). Auto-clearing stop.`);\n        onStopReached(busId, nextStop.stop_id);\n      }\n    };\n\n    // Check proximity every second\n    const interval = setInterval(checkProximity, 1000);\n    return () => clearInterval(interval);\n  }, [position, nextStop, busId, onStopReached]);\n  return null;\n};\n\n// Component to draw OSRM route between stops\n_s3(ProximityDetector, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c3 = ProximityDetector;\nconst OsrmRoutes = ({\n  stops,\n  currentPosition,\n  lastClearedStopIndex,\n  nextStopIndex\n}) => {\n  _s4();\n  const map = useMap();\n  const routeRef = useRef(null);\n  const nextSegmentRef = useRef(null);\n  useEffect(() => {\n    if (!stops || stops.length < 2 || !map) return;\n    const fetchAndDrawFullRoute = async () => {\n      try {\n        // Clear previous route\n        if (routeRef.current) {\n          map.removeLayer(routeRef.current);\n          routeRef.current = null;\n        }\n\n        // Build waypoints for the complete route\n        const waypoints = stops.map(stop => [parseFloat(stop.longitude), parseFloat(stop.latitude)]);\n\n        // Close the loop for circular route\n        waypoints.push(waypoints[0]);\n\n        // Convert waypoints to the format expected by OSRM API\n        const waypointsString = waypoints.map(wp => wp.join(',')).join(';');\n        const response = await axios.get(`https://router.project-osrm.org/route/v1/driving/${waypointsString}?overview=full&geometries=geojson`);\n        if (response.data.code === 'Ok' && response.data.routes.length > 0) {\n          const routeGeometry = response.data.routes[0].geometry.coordinates;\n          // OSRM returns coordinates as [lng, lat], we need to flip for Leaflet\n          const coordinates = routeGeometry.map(coord => [coord[1], coord[0]]);\n\n          // Create a polyline for the full route\n          const polyline = L.polyline(coordinates, {\n            color: '#3388ff',\n            weight: 4,\n            opacity: 0.6,\n            lineJoin: 'round'\n          }).addTo(map);\n          routeRef.current = polyline;\n        }\n      } catch (error) {\n        console.error('Error fetching full route:', error);\n      }\n    };\n    const fetchAndDrawNextSegment = async () => {\n      try {\n        // Clear previous next segment route\n        if (nextSegmentRef.current) {\n          map.removeLayer(nextSegmentRef.current);\n          nextSegmentRef.current = null;\n        }\n\n        // Only draw if we have a last cleared stop and next stop\n        if (lastClearedStopIndex !== null && nextStopIndex !== null) {\n          const lastClearedStop = stops[lastClearedStopIndex];\n          const nextStop = stops[nextStopIndex];\n\n          // Build waypoints from last cleared stop to next stop\n          const waypoints = [[parseFloat(lastClearedStop.longitude), parseFloat(lastClearedStop.latitude)],\n          // Last cleared stop [lng, lat]\n          [parseFloat(nextStop.longitude), parseFloat(nextStop.latitude)] // Next stop [lng, lat]\n          ];\n\n          // Convert waypoints to the format expected by OSRM API\n          const waypointsString = waypoints.map(wp => wp.join(',')).join(';');\n          const response = await axios.get(`https://router.project-osrm.org/route/v1/driving/${waypointsString}?overview=full&geometries=geojson`);\n          if (response.data.code === 'Ok' && response.data.routes.length > 0) {\n            const routeGeometry = response.data.routes[0].geometry.coordinates;\n            // OSRM returns coordinates as [lng, lat], we need to flip for Leaflet\n            const coordinates = routeGeometry.map(coord => [coord[1], coord[0]]);\n\n            // Create a highlighted polyline for the next segment\n            const polyline = L.polyline(coordinates, {\n              color: '#FF0000',\n              // Red color for the highlighted segment\n              weight: 6,\n              opacity: 0.9,\n              lineJoin: 'round'\n            }).addTo(map);\n            nextSegmentRef.current = polyline;\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching next segment route:', error);\n      }\n    };\n    fetchAndDrawFullRoute();\n    fetchAndDrawNextSegment();\n\n    // Clean up function\n    return () => {\n      if (routeRef.current && map) {\n        map.removeLayer(routeRef.current);\n      }\n      if (nextSegmentRef.current && map) {\n        map.removeLayer(nextSegmentRef.current);\n      }\n    };\n  }, [map, stops, lastClearedStopIndex, nextStopIndex]); // Removed currentPosition dependency\n\n  return null;\n};\n\n// Component for tracking driver location with geolocation API\n_s4(OsrmRoutes, \"4FIBFaKyBjoe+Q6MALJXncebVEA=\", false, function () {\n  return [useMap];\n});\n_c4 = OsrmRoutes;\nconst DriverLocationTracker = ({\n  setPosition\n}) => {\n  _s5();\n  const map = useMapEvents({\n    locationfound(e) {\n      setPosition([e.latlng.lat, e.latlng.lng]);\n    },\n    locationerror(e) {\n      console.error('Location error:', e.message);\n      alert('Could not get your location. Please enable location services.');\n    }\n  });\n  useEffect(() => {\n    // Start tracking location when component mounts\n    map.locate({\n      watch: true,\n      enableHighAccuracy: true\n    });\n    return () => {\n      map.stopLocate();\n    };\n  }, [map]);\n  return null;\n};\n\n// Button to center map on driver's location\n_s5(DriverLocationTracker, \"gWh149/DLPuF22WgXAndVVlzhL4=\", false, function () {\n  return [useMapEvents];\n});\n_c5 = DriverLocationTracker;\nconst LocationButton = ({\n  position,\n  setCenter,\n  busInfo\n}) => {\n  const handleClick = () => {\n    if (position) {\n      // If we have the driver's position, center on that\n      setCenter(position);\n      console.log('Centering map on driver position:', position);\n    } else if (busInfo && busInfo.nextStop) {\n      // Fall back to the next bus stop if driver position isn't available\n      const nextStopPosition = [parseFloat(busInfo.nextStop.latitude), parseFloat(busInfo.nextStop.longitude)];\n      setCenter(nextStopPosition);\n      console.log('Centering map on next stop:', nextStopPosition);\n    } else if (busInfo && busInfo.route && busInfo.route.length > 0) {\n      // Fall back to the first stop in the route\n      const firstStopPosition = [parseFloat(busInfo.route[0].latitude), parseFloat(busInfo.route[0].longitude)];\n      setCenter(firstStopPosition);\n      console.log('Centering map on first stop in route:', firstStopPosition);\n    } else {\n      // Default to IIT KGP location\n      const defaultPosition = [22.3190, 87.3091];\n      setCenter(defaultPosition);\n      console.log('Centering map on default location:', defaultPosition);\n    }\n  };\n\n  // Always make the button clickable\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"location-button\",\n    onClick: handleClick,\n    title: position ? \"Center map on your location\" : \"Center map on route\",\n    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas fa-location-arrow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), \" \", position ? \"Your Location\" : \"Center Map\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 5\n  }, this);\n};\n\n// Button to mark a stop as cleared\n_c6 = LocationButton;\nconst ClearStopButton = ({\n  busId,\n  stopId,\n  onStopCleared,\n  isNextStop\n}) => {\n  _s6();\n  const [loading, setLoading] = useState(false);\n  const handleClearStop = async () => {\n    if (!busId || !stopId) return;\n    try {\n      setLoading(true);\n      const response = await axios.post(getApiUrl('/driver/clear-stop'), {\n        busId,\n        stopId\n      }, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n        }\n      });\n      if (response.data) {\n        console.log('Stop cleared successfully');\n        if (onStopCleared) onStopCleared(response.data.data);\n      }\n    } catch (error) {\n      console.error('Error clearing stop:', error);\n      alert('Failed to mark stop as cleared. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (!isNextStop) return null;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"clear-stop-button\",\n    onClick: handleClearStop,\n    disabled: loading,\n    children: loading ? 'Marking...' : 'Mark as Cleared'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 340,\n    columnNumber: 5\n  }, this);\n};\n\n// Component to detect upcoming turns and show notifications\n_s6(ClearStopButton, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\n_c7 = ClearStopButton;\nconst TurnNotification = ({\n  stops,\n  currentPosition,\n  lastClearedStopIndex,\n  nextStopIndex\n}) => {\n  _s7();\n  const [showNotification, setShowNotification] = useState(false);\n  const [turnDirection, setTurnDirection] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const notificationRef = useRef(null);\n  useEffect(() => {\n    if (!stops || !currentPosition || lastClearedStopIndex === null || nextStopIndex === null) return;\n    const lastStop = stops[lastClearedStopIndex];\n    const nextStop = stops[nextStopIndex];\n\n    // Calculate upcoming turns by comparing bearings\n    const calculateTurn = () => {\n      const currentPos = L.latLng(currentPosition);\n      const lastStopPos = L.latLng(parseFloat(lastStop.latitude), parseFloat(lastStop.longitude));\n      const nextStopPos = L.latLng(parseFloat(nextStop.latitude), parseFloat(nextStop.longitude));\n\n      // Calculate bearings\n      const bearingToNext = calculateBearing(currentPos, nextStopPos);\n\n      // Calculate distance to next stop\n      const distanceToNext = currentPos.distanceTo(nextStopPos);\n      setDistance(distanceToNext);\n\n      // Determine if there's a turn coming up (within 100m)\n      if (distanceToNext <= 100) {\n        // Calculate current heading based on last few positions\n        // This is simplified - ideally, you'd track recent positions to determine heading\n        const currentHeading = calculateBearing(lastStopPos, currentPos);\n\n        // Calculate angle between current heading and bearing to next stop\n        const angle = Math.abs(bearingToNext - currentHeading);\n        const normalizedAngle = angle > 180 ? 360 - angle : angle;\n\n        // Determine turn direction based on angle\n        if (normalizedAngle > 30 && normalizedAngle < 150) {\n          if (bearingToNext > currentHeading && bearingToNext - currentHeading < 180 || currentHeading > bearingToNext && currentHeading - bearingToNext > 180) {\n            setTurnDirection('right');\n          } else {\n            setTurnDirection('left');\n          }\n\n          // Show notification 5 seconds before turn (assume average speed of 5m/s)\n          if (distanceToNext <= 25) {\n            setShowNotification(true);\n\n            // Hide notification 5 seconds after passing the turn\n            const hideTimeout = setTimeout(() => {\n              setShowNotification(false);\n            }, 10000); // 5 seconds before + 5 seconds after = 10 seconds total\n\n            return () => clearTimeout(hideTimeout);\n          }\n        } else {\n          setTurnDirection('straight');\n        }\n      } else {\n        setTurnDirection(null);\n        setShowNotification(false);\n      }\n    };\n\n    // Calculate turn every 1 second\n    const interval = setInterval(calculateTurn, 1000);\n    return () => clearInterval(interval);\n  }, [stops, currentPosition, lastClearedStopIndex, nextStopIndex]);\n\n  // Helper function to calculate bearing between two points\n  const calculateBearing = (start, end) => {\n    const startLat = start.lat * Math.PI / 180;\n    const startLng = start.lng * Math.PI / 180;\n    const endLat = end.lat * Math.PI / 180;\n    const endLng = end.lng * Math.PI / 180;\n    const y = Math.sin(endLng - startLng) * Math.cos(endLat);\n    const x = Math.cos(startLat) * Math.sin(endLat) - Math.sin(startLat) * Math.cos(endLat) * Math.cos(endLng - startLng);\n    let bearing = Math.atan2(y, x) * 180 / Math.PI;\n    if (bearing < 0) bearing += 360;\n    return bearing;\n  };\n  if (!showNotification) return null;\n\n  // Render turn notification\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"turn-notification\",\n    ref: notificationRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"turn-icon\",\n      children: [turnDirection === 'left' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 38\n      }, this), turnDirection === 'right' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 39\n      }, this), turnDirection === 'straight' && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-arrow-up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"turn-text\",\n      children: [turnDirection === 'left' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Turn left in \", Math.round(distance), \" meters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 38\n      }, this), turnDirection === 'right' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Turn right in \", Math.round(distance), \" meters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 39\n      }, this), turnDirection === 'straight' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Continue straight for \", Math.round(distance), \" meters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 448,\n    columnNumber: 5\n  }, this);\n};\n_s7(TurnNotification, \"uLacB8YG+OyfTtGa+mjBcznmiBo=\");\n_c8 = TurnNotification;\nfunction DriverMapScreen() {\n  _s8();\n  const [position, setPosition] = useState(null);\n  const [center, setCenter] = useState(null);\n  const [busInfo, setBusInfo] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // For the map\n  const mapRef = useRef(null);\n\n  // Set up axios interceptor for JWT expiration\n  useEffect(() => {\n    const interceptor = axios.interceptors.response.use(response => response, error => {\n      var _error$response$data;\n      if (error.response && (error.response.status === 401 || (_error$response$data = error.response.data) !== null && _error$response$data !== void 0 && _error$response$data.expired)) {\n        console.log('Authentication token expired or invalid. Redirecting to login.');\n        localStorage.removeItem('jwtToken');\n        localStorage.removeItem('user');\n        navigate('/login');\n      }\n      return Promise.reject(error);\n    });\n    return () => {\n      axios.interceptors.response.eject(interceptor);\n    };\n  }, [navigate]);\n\n  // Fetch driver's bus info and route\n  useEffect(() => {\n    const fetchDriverBus = async () => {\n      try {\n        setLoading(true);\n        const response = await axios.get(getApiUrl('/driver/my-bus'), {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n          }\n        });\n        if (response.data && response.data.data) {\n          setBusInfo(response.data.data);\n          console.log('Driver bus info loaded:', response.data.data);\n        } else {\n          setError('No bus assigned to you');\n        }\n      } catch (error) {\n        console.error('Error fetching driver bus:', error);\n        setError('Failed to load your bus information');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDriverBus();\n\n    // Refresh bus info every 60 seconds\n    const interval = setInterval(fetchDriverBus, 60000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Center map when position is first determined\n  useEffect(() => {\n    if (position && !center) {\n      setCenter(position);\n    }\n  }, [position, center]);\n\n  // Handle stop reached automatically (replaces manual clearing)\n  const handleStopReached = async (busId, stopId) => {\n    try {\n      const response = await axios.post(getApiUrl('/driver/clear-stop'), {\n        busId,\n        stopId\n      }, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n        }\n      });\n      if (response.data) {\n        console.log('Stop cleared automatically');\n\n        // Update the local state with the new stops_cleared value\n        setBusInfo(prev => ({\n          ...prev,\n          bus: response.data.data,\n          stopsCleared: parseInt(response.data.data.stops_cleared)\n        }));\n\n        // Refresh the bus info to get updated last/next stop\n        const fetchDriverBus = async () => {\n          try {\n            const response = await axios.get(getApiUrl('/driver/my-bus'), {\n              headers: {\n                Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n              }\n            });\n            if (response.data && response.data.data) {\n              setBusInfo(response.data.data);\n            }\n          } catch (error) {\n            console.error('Error refreshing driver bus info:', error);\n          }\n        };\n        fetchDriverBus();\n      }\n    } catch (error) {\n      console.error('Error auto-clearing stop:', error);\n    }\n  };\n\n  // Find indices for last cleared stop and next stop\n  const getStopIndices = () => {\n    if (!busInfo || !busInfo.route || busInfo.route.length === 0) {\n      return {\n        lastClearedStopIndex: null,\n        nextStopIndex: null\n      };\n    }\n    const stops = busInfo.route;\n    const stopsCleared = busInfo.stopsCleared || 0;\n\n    // If stopsCleared is 0, the last cleared stop is the last one in the route (circular)\n    // and the next stop is the first in the route\n    if (stopsCleared === 0) {\n      return {\n        lastClearedStopIndex: stops.length - 1,\n        nextStopIndex: 0\n      };\n    }\n\n    // Normalize stopsCleared to be within the route length (for circular routes)\n    const normalizedStopsCleared = stopsCleared % stops.length;\n    return {\n      lastClearedStopIndex: normalizedStopsCleared - 1,\n      nextStopIndex: normalizedStopsCleared % stops.length\n    };\n  };\n  const {\n    lastClearedStopIndex,\n    nextStopIndex\n  } = getStopIndices();\n\n  // If still loading, show a spinner\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"driver-map-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading your bus information...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If there's an error, show error message\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"driver-map-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If no bus assigned, show message\n  if (!busInfo || !busInfo.bus) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"driver-map-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No Bus Assigned\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You do not have a bus assigned to you. Please contact an administrator.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"driver-map-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"driver-map-container\",\n      children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n        center: center || [22.3190, 87.3091] // Default to IIT KGP if no position yet\n        ,\n        zoom: 15,\n        className: \"driver-map\",\n        ref: mapRef,\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MapController, {\n          center: center,\n          zoom: 15\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DriverLocationTracker, {\n          setPosition: setPosition\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 11\n        }, this), position && busInfo && /*#__PURE__*/_jsxDEV(LocationUpdater, {\n          driverId: localStorage.getItem('userId'),\n          busId: busInfo.bus.id,\n          position: position\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 13\n        }, this), position && busInfo && busInfo.nextStop && /*#__PURE__*/_jsxDEV(ProximityDetector, {\n          busId: busInfo.bus.id,\n          position: position,\n          nextStop: busInfo.nextStop,\n          onStopReached: handleStopReached\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 13\n        }, this), position && /*#__PURE__*/_jsxDEV(Marker, {\n          position: position,\n          icon: busIcon,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"driver-popup\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [\"Your Location (Bus \", busInfo.bus.name, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 692,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"You are here.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 693,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 691,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 13\n        }, this), busInfo && busInfo.route && busInfo.route.map((stop, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: [parseFloat(stop.latitude), parseFloat(stop.longitude)],\n          icon: index === nextStopIndex ? nextStopIcon : busStopIcon,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stop-popup\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: stop.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 708,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Stop #\", index + 1, \" in route\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 709,\n                columnNumber: 19\n              }, this), index === nextStopIndex && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"next-stop-label\",\n                children: \"This is your next stop\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 711,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 15\n          }, this)\n        }, stop.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 13\n        }, this)), busInfo && busInfo.route && position && /*#__PURE__*/_jsxDEV(OsrmRoutes, {\n          stops: busInfo.route,\n          currentPosition: position,\n          lastClearedStopIndex: lastClearedStopIndex,\n          nextStopIndex: nextStopIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 9\n      }, this), busInfo && busInfo.route && position && /*#__PURE__*/_jsxDEV(TurnNotification, {\n        stops: busInfo.route,\n        currentPosition: position,\n        lastClearedStopIndex: lastClearedStopIndex,\n        nextStopIndex: nextStopIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LocationButton, {\n        position: position,\n        setCenter: setCenter,\n        busInfo: busInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bus-info-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Bus: \", busInfo.bus.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 11\n        }, this), busInfo.nextStop && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"next-stop-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Next Stop:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 751,\n              columnNumber: 18\n            }, this), \" \", busInfo.nextStop.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 751,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Distance:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 752,\n              columnNumber: 18\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              id: \"next-stop-distance\",\n              children: \"Calculating...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 752,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 752,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 649,\n    columnNumber: 5\n  }, this);\n}\n_s8(DriverMapScreen, \"XWHFvNHYabNxUQIYrxr62TAt4Kk=\", false, function () {\n  return [useNavigate];\n});\n_c9 = DriverMapScreen;\nexport default DriverMapScreen;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"MapController\");\n$RefreshReg$(_c2, \"LocationUpdater\");\n$RefreshReg$(_c3, \"ProximityDetector\");\n$RefreshReg$(_c4, \"OsrmRoutes\");\n$RefreshReg$(_c5, \"DriverLocationTracker\");\n$RefreshReg$(_c6, \"LocationButton\");\n$RefreshReg$(_c7, \"ClearStopButton\");\n$RefreshReg$(_c8, \"TurnNotification\");\n$RefreshReg$(_c9, \"DriverMapScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MapContainer","TileLayer","Marker","Popup","useMap","useMapEvents","L","axios","useNavigate","getApiUrl","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","busIcon","iconSize","iconAnchor","popupAnchor","busStopIcon","nextStopIcon","className","MapController","center","zoom","_s","map","setView","getZoom","_c","LocationUpdater","driverId","busId","position","_s2","updateLocation","post","latitude","longitude","headers","Authorization","localStorage","getItem","console","log","error","interval","setInterval","clearInterval","_c2","ProximityDetector","nextStop","onStopReached","_s3","checkProximity","nextStopPosition","parseFloat","distance","latLng","distanceTo","toFixed","stop_id","_c3","OsrmRoutes","stops","currentPosition","lastClearedStopIndex","nextStopIndex","_s4","routeRef","nextSegmentRef","length","fetchAndDrawFullRoute","current","removeLayer","waypoints","stop","push","waypointsString","wp","join","response","get","data","code","routes","routeGeometry","geometry","coordinates","coord","polyline","color","weight","opacity","lineJoin","addTo","fetchAndDrawNextSegment","lastClearedStop","_c4","DriverLocationTracker","setPosition","_s5","locationfound","e","latlng","lat","lng","locationerror","message","alert","locate","watch","enableHighAccuracy","stopLocate","_c5","LocationButton","setCenter","busInfo","handleClick","route","firstStopPosition","defaultPosition","onClick","title","children","fileName","_jsxFileName","lineNumber","columnNumber","_c6","ClearStopButton","stopId","onStopCleared","isNextStop","_s6","loading","setLoading","handleClearStop","disabled","_c7","TurnNotification","_s7","showNotification","setShowNotification","turnDirection","setTurnDirection","setDistance","notificationRef","lastStop","calculateTurn","currentPos","lastStopPos","nextStopPos","bearingToNext","calculateBearing","distanceToNext","currentHeading","angle","Math","abs","normalizedAngle","hideTimeout","setTimeout","clearTimeout","start","end","startLat","PI","startLng","endLat","endLng","y","sin","cos","x","bearing","atan2","ref","round","_c8","DriverMapScreen","_s8","setBusInfo","setError","navigate","mapRef","interceptor","interceptors","use","_error$response$data","status","expired","removeItem","Promise","reject","eject","fetchDriverBus","handleStopReached","prev","bus","stopsCleared","parseInt","stops_cleared","getStopIndices","normalizedStopsCleared","window","location","reload","attribution","url","id","icon","name","index","_c9","$RefreshReg$"],"sources":["/home/lubesh/Desktop/DBMS/KGP_Bus/frontend/src/components/driver_pages/DriverMapScreen.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMap, useMapEvents } from 'react-leaflet';\nimport L from 'leaflet';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { getApiUrl } from '../../utils/api2.js';\nimport '../../css/DriverMapScreen.css';\n\n// Fix for default marker icon in Leaflet with React\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',\n  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',\n  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',\n});\n\n// Custom bus icon\nconst busIcon = new L.Icon({\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/30/30979.png',\n  iconSize: [40, 40],\n  iconAnchor: [20, 40],\n  popupAnchor: [0, -40]\n});\n\n// Bus stop icon\nconst busStopIcon = new L.Icon({\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/1165/1165895.png',\n  iconSize: [24, 24],\n  iconAnchor: [12, 24],\n  popupAnchor: [0, -24]\n});\n\n// Next stop icon (highlighted)\nconst nextStopIcon = new L.Icon({\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/1165/1165895.png',\n  iconSize: [36, 36],\n  iconAnchor: [18, 36],\n  popupAnchor: [0, -36],\n  className: 'next-stop-icon' // CSS class for styling\n});\n\n// Component to handle map centering\nconst MapController = ({ center, zoom }) => {\n  const map = useMap();\n  \n  useEffect(() => {\n    if (center) {\n      map.setView(center, zoom || map.getZoom());\n    }\n  }, [center, zoom, map]);\n  \n  return null;\n};\n\n// Component to update driver's location in the database\nconst LocationUpdater = ({ driverId, busId, position }) => {\n  useEffect(() => {\n    if (!position || !busId) return;\n\n    const updateLocation = async () => {\n      try {\n        await axios.post(\n          getApiUrl('/driver/update-location'),\n          {\n            busId,\n            latitude: position[0],\n            longitude: position[1]\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n            }\n          }\n        );\n        console.log('Location updated successfully');\n      } catch (error) {\n        console.error('Error updating location:', error);\n      }\n    };\n\n    updateLocation();\n    \n    // Update location every 5 seconds (changed from 10 seconds)\n    const interval = setInterval(updateLocation, 5000);\n    \n    return () => clearInterval(interval);\n  }, [position, busId, driverId]);\n  \n  return null;\n};\n\n// Component to detect proximity to next bus stop\nconst ProximityDetector = ({ busId, position, nextStop, onStopReached }) => {\n  useEffect(() => {\n    if (!position || !nextStop || !busId) return;\n\n    const checkProximity = () => {\n      const nextStopPosition = [\n        parseFloat(nextStop.latitude),\n        parseFloat(nextStop.longitude)\n      ];\n      \n      // Calculate distance between driver and next stop (in meters)\n      const distance = L.latLng(position).distanceTo(L.latLng(nextStopPosition));\n      \n      // If within 30 meters, mark the stop as cleared\n      if (distance <= 30) {\n        console.log(`Within 30m of next stop (${distance.toFixed(2)}m). Auto-clearing stop.`);\n        onStopReached(busId, nextStop.stop_id);\n      }\n    };\n    \n    // Check proximity every second\n    const interval = setInterval(checkProximity, 1000);\n    \n    return () => clearInterval(interval);\n  }, [position, nextStop, busId, onStopReached]);\n  \n  return null;\n};\n\n// Component to draw OSRM route between stops\nconst OsrmRoutes = ({ stops, currentPosition, lastClearedStopIndex, nextStopIndex }) => {\n  const map = useMap();\n  const routeRef = useRef(null);\n  const nextSegmentRef = useRef(null);\n  \n  useEffect(() => {\n    if (!stops || stops.length < 2 || !map) return;\n    \n    const fetchAndDrawFullRoute = async () => {\n      try {\n        // Clear previous route\n        if (routeRef.current) {\n          map.removeLayer(routeRef.current);\n          routeRef.current = null;\n        }\n        \n        // Build waypoints for the complete route\n        const waypoints = stops.map(stop => [\n          parseFloat(stop.longitude), \n          parseFloat(stop.latitude)\n        ]);\n        \n        // Close the loop for circular route\n        waypoints.push(waypoints[0]);\n        \n        // Convert waypoints to the format expected by OSRM API\n        const waypointsString = waypoints.map(wp => wp.join(',')).join(';');\n        \n        const response = await axios.get(\n          `https://router.project-osrm.org/route/v1/driving/${waypointsString}?overview=full&geometries=geojson`\n        );\n        \n        if (response.data.code === 'Ok' && response.data.routes.length > 0) {\n          const routeGeometry = response.data.routes[0].geometry.coordinates;\n          // OSRM returns coordinates as [lng, lat], we need to flip for Leaflet\n          const coordinates = routeGeometry.map(coord => [coord[1], coord[0]]);\n          \n          // Create a polyline for the full route\n          const polyline = L.polyline(coordinates, {\n            color: '#3388ff',\n            weight: 4,\n            opacity: 0.6,\n            lineJoin: 'round'\n          }).addTo(map);\n          \n          routeRef.current = polyline;\n        }\n      } catch (error) {\n        console.error('Error fetching full route:', error);\n      }\n    };\n    \n    const fetchAndDrawNextSegment = async () => {\n      try {\n        // Clear previous next segment route\n        if (nextSegmentRef.current) {\n          map.removeLayer(nextSegmentRef.current);\n          nextSegmentRef.current = null;\n        }\n        \n        // Only draw if we have a last cleared stop and next stop\n        if (lastClearedStopIndex !== null && nextStopIndex !== null) {\n          const lastClearedStop = stops[lastClearedStopIndex];\n          const nextStop = stops[nextStopIndex];\n          \n          // Build waypoints from last cleared stop to next stop\n          const waypoints = [\n            [parseFloat(lastClearedStop.longitude), parseFloat(lastClearedStop.latitude)], // Last cleared stop [lng, lat]\n            [parseFloat(nextStop.longitude), parseFloat(nextStop.latitude)] // Next stop [lng, lat]\n          ];\n          \n          // Convert waypoints to the format expected by OSRM API\n          const waypointsString = waypoints.map(wp => wp.join(',')).join(';');\n          \n          const response = await axios.get(\n            `https://router.project-osrm.org/route/v1/driving/${waypointsString}?overview=full&geometries=geojson`\n          );\n          \n          if (response.data.code === 'Ok' && response.data.routes.length > 0) {\n            const routeGeometry = response.data.routes[0].geometry.coordinates;\n            // OSRM returns coordinates as [lng, lat], we need to flip for Leaflet\n            const coordinates = routeGeometry.map(coord => [coord[1], coord[0]]);\n            \n            // Create a highlighted polyline for the next segment\n            const polyline = L.polyline(coordinates, {\n              color: '#FF0000', // Red color for the highlighted segment\n              weight: 6,\n              opacity: 0.9,\n              lineJoin: 'round'\n            }).addTo(map);\n            \n            nextSegmentRef.current = polyline;\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching next segment route:', error);\n      }\n    };\n    \n    fetchAndDrawFullRoute();\n    fetchAndDrawNextSegment();\n    \n    // Clean up function\n    return () => {\n      if (routeRef.current && map) {\n        map.removeLayer(routeRef.current);\n      }\n      if (nextSegmentRef.current && map) {\n        map.removeLayer(nextSegmentRef.current);\n      }\n    };\n  }, [map, stops, lastClearedStopIndex, nextStopIndex]); // Removed currentPosition dependency\n  \n  return null;\n};\n\n// Component for tracking driver location with geolocation API\nconst DriverLocationTracker = ({ setPosition }) => {\n  const map = useMapEvents({\n    locationfound(e) {\n      setPosition([e.latlng.lat, e.latlng.lng]);\n    },\n    locationerror(e) {\n      console.error('Location error:', e.message);\n      alert('Could not get your location. Please enable location services.');\n    }\n  });\n  \n  useEffect(() => {\n    // Start tracking location when component mounts\n    map.locate({ watch: true, enableHighAccuracy: true });\n    \n    return () => {\n      map.stopLocate();\n    };\n  }, [map]);\n  \n  return null;\n};\n\n// Button to center map on driver's location\nconst LocationButton = ({ position, setCenter, busInfo }) => {\n  const handleClick = () => {\n    if (position) {\n      // If we have the driver's position, center on that\n      setCenter(position);\n      console.log('Centering map on driver position:', position);\n    } else if (busInfo && busInfo.nextStop) {\n      // Fall back to the next bus stop if driver position isn't available\n      const nextStopPosition = [\n        parseFloat(busInfo.nextStop.latitude),\n        parseFloat(busInfo.nextStop.longitude)\n      ];\n      setCenter(nextStopPosition);\n      console.log('Centering map on next stop:', nextStopPosition);\n    } else if (busInfo && busInfo.route && busInfo.route.length > 0) {\n      // Fall back to the first stop in the route\n      const firstStopPosition = [\n        parseFloat(busInfo.route[0].latitude),\n        parseFloat(busInfo.route[0].longitude)\n      ];\n      setCenter(firstStopPosition);\n      console.log('Centering map on first stop in route:', firstStopPosition);\n    } else {\n      // Default to IIT KGP location\n      const defaultPosition = [22.3190, 87.3091];\n      setCenter(defaultPosition);\n      console.log('Centering map on default location:', defaultPosition);\n    }\n  };\n  \n  // Always make the button clickable\n  return (\n    <button \n      className=\"location-button\" \n      onClick={handleClick} \n      title={position ? \"Center map on your location\" : \"Center map on route\"}\n    >\n      <i className=\"fas fa-location-arrow\"></i> {position ? \"Your Location\" : \"Center Map\"}\n    </button>\n  );\n};\n\n// Button to mark a stop as cleared\nconst ClearStopButton = ({ busId, stopId, onStopCleared, isNextStop }) => {\n  const [loading, setLoading] = useState(false);\n  \n  const handleClearStop = async () => {\n    if (!busId || !stopId) return;\n    \n    try {\n      setLoading(true);\n      const response = await axios.post(\n        getApiUrl('/driver/clear-stop'),\n        { busId, stopId },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n          }\n        }\n      );\n      \n      if (response.data) {\n        console.log('Stop cleared successfully');\n        if (onStopCleared) onStopCleared(response.data.data);\n      }\n    } catch (error) {\n      console.error('Error clearing stop:', error);\n      alert('Failed to mark stop as cleared. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  if (!isNextStop) return null;\n  \n  return (\n    <button \n      className=\"clear-stop-button\" \n      onClick={handleClearStop} \n      disabled={loading}\n    >\n      {loading ? 'Marking...' : 'Mark as Cleared'}\n    </button>\n  );\n};\n\n// Component to detect upcoming turns and show notifications\nconst TurnNotification = ({ stops, currentPosition, lastClearedStopIndex, nextStopIndex }) => {\n  const [showNotification, setShowNotification] = useState(false);\n  const [turnDirection, setTurnDirection] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const notificationRef = useRef(null);\n  \n  useEffect(() => {\n    if (!stops || !currentPosition || lastClearedStopIndex === null || nextStopIndex === null) return;\n    \n    const lastStop = stops[lastClearedStopIndex];\n    const nextStop = stops[nextStopIndex];\n    \n    // Calculate upcoming turns by comparing bearings\n    const calculateTurn = () => {\n      const currentPos = L.latLng(currentPosition);\n      const lastStopPos = L.latLng(\n        parseFloat(lastStop.latitude),\n        parseFloat(lastStop.longitude)\n      );\n      const nextStopPos = L.latLng(\n        parseFloat(nextStop.latitude),\n        parseFloat(nextStop.longitude)\n      );\n      \n      // Calculate bearings\n      const bearingToNext = calculateBearing(currentPos, nextStopPos);\n      \n      // Calculate distance to next stop\n      const distanceToNext = currentPos.distanceTo(nextStopPos);\n      setDistance(distanceToNext);\n      \n      // Determine if there's a turn coming up (within 100m)\n      if (distanceToNext <= 100) {\n        // Calculate current heading based on last few positions\n        // This is simplified - ideally, you'd track recent positions to determine heading\n        const currentHeading = calculateBearing(lastStopPos, currentPos);\n        \n        // Calculate angle between current heading and bearing to next stop\n        const angle = Math.abs(bearingToNext - currentHeading);\n        const normalizedAngle = angle > 180 ? 360 - angle : angle;\n        \n        // Determine turn direction based on angle\n        if (normalizedAngle > 30 && normalizedAngle < 150) {\n          if ((bearingToNext > currentHeading && bearingToNext - currentHeading < 180) || \n              (currentHeading > bearingToNext && currentHeading - bearingToNext > 180)) {\n            setTurnDirection('right');\n          } else {\n            setTurnDirection('left');\n          }\n          \n          // Show notification 5 seconds before turn (assume average speed of 5m/s)\n          if (distanceToNext <= 25) {\n            setShowNotification(true);\n            \n            // Hide notification 5 seconds after passing the turn\n            const hideTimeout = setTimeout(() => {\n              setShowNotification(false);\n            }, 10000); // 5 seconds before + 5 seconds after = 10 seconds total\n            \n            return () => clearTimeout(hideTimeout);\n          }\n        } else {\n          setTurnDirection('straight');\n        }\n      } else {\n        setTurnDirection(null);\n        setShowNotification(false);\n      }\n    };\n    \n    // Calculate turn every 1 second\n    const interval = setInterval(calculateTurn, 1000);\n    \n    return () => clearInterval(interval);\n  }, [stops, currentPosition, lastClearedStopIndex, nextStopIndex]);\n  \n  // Helper function to calculate bearing between two points\n  const calculateBearing = (start, end) => {\n    const startLat = start.lat * Math.PI / 180;\n    const startLng = start.lng * Math.PI / 180;\n    const endLat = end.lat * Math.PI / 180;\n    const endLng = end.lng * Math.PI / 180;\n    \n    const y = Math.sin(endLng - startLng) * Math.cos(endLat);\n    const x = Math.cos(startLat) * Math.sin(endLat) -\n              Math.sin(startLat) * Math.cos(endLat) * Math.cos(endLng - startLng);\n    \n    let bearing = Math.atan2(y, x) * 180 / Math.PI;\n    if (bearing < 0) bearing += 360;\n    \n    return bearing;\n  };\n  \n  if (!showNotification) return null;\n  \n  // Render turn notification\n  return (\n    <div className=\"turn-notification\" ref={notificationRef}>\n      <div className=\"turn-icon\">\n        {turnDirection === 'left' && <i className=\"fas fa-arrow-left\"></i>}\n        {turnDirection === 'right' && <i className=\"fas fa-arrow-right\"></i>}\n        {turnDirection === 'straight' && <i className=\"fas fa-arrow-up\"></i>}\n      </div>\n      <div className=\"turn-text\">\n        {turnDirection === 'left' && <p>Turn left in {Math.round(distance)} meters</p>}\n        {turnDirection === 'right' && <p>Turn right in {Math.round(distance)} meters</p>}\n        {turnDirection === 'straight' && <p>Continue straight for {Math.round(distance)} meters</p>}\n      </div>\n    </div>\n  );\n};\n\nfunction DriverMapScreen() {\n  const [position, setPosition] = useState(null);\n  const [center, setCenter] = useState(null);\n  const [busInfo, setBusInfo] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  \n  // For the map\n  const mapRef = useRef(null);\n  \n  // Set up axios interceptor for JWT expiration\n  useEffect(() => {\n    const interceptor = axios.interceptors.response.use(\n      response => response,\n      error => {\n        if (error.response && (error.response.status === 401 || error.response.data?.expired)) {\n          console.log('Authentication token expired or invalid. Redirecting to login.');\n          localStorage.removeItem('jwtToken');\n          localStorage.removeItem('user');\n          navigate('/login');\n        }\n        return Promise.reject(error);\n      }\n    );\n    \n    return () => {\n      axios.interceptors.response.eject(interceptor);\n    };\n  }, [navigate]);\n  \n  // Fetch driver's bus info and route\n  useEffect(() => {\n    const fetchDriverBus = async () => {\n      try {\n        setLoading(true);\n        \n        const response = await axios.get(\n          getApiUrl('/driver/my-bus'),\n          {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n            }\n          }\n        );\n        \n        if (response.data && response.data.data) {\n          setBusInfo(response.data.data);\n          console.log('Driver bus info loaded:', response.data.data);\n        } else {\n          setError('No bus assigned to you');\n        }\n      } catch (error) {\n        console.error('Error fetching driver bus:', error);\n        setError('Failed to load your bus information');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchDriverBus();\n    \n    // Refresh bus info every 60 seconds\n    const interval = setInterval(fetchDriverBus, 60000);\n    \n    return () => clearInterval(interval);\n  }, []);  \n  \n  // Center map when position is first determined\n  useEffect(() => {\n    if (position && !center) {\n      setCenter(position);\n    }\n  }, [position, center]);\n  \n  // Handle stop reached automatically (replaces manual clearing)\n  const handleStopReached = async (busId, stopId) => {\n    try {\n      const response = await axios.post(\n        getApiUrl('/driver/clear-stop'),\n        { busId, stopId },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n          }\n        }\n      );\n      \n      if (response.data) {\n        console.log('Stop cleared automatically');\n        \n        // Update the local state with the new stops_cleared value\n        setBusInfo(prev => ({\n          ...prev,\n          bus: response.data.data,\n          stopsCleared: parseInt(response.data.data.stops_cleared)\n        }));\n        \n        // Refresh the bus info to get updated last/next stop\n        const fetchDriverBus = async () => {\n          try {\n            const response = await axios.get(\n              getApiUrl('/driver/my-bus'),\n              {\n                headers: {\n                  Authorization: `Bearer ${localStorage.getItem('jwtToken')}`\n                }\n              }\n            );\n            \n            if (response.data && response.data.data) {\n              setBusInfo(response.data.data);\n            }\n          } catch (error) {\n            console.error('Error refreshing driver bus info:', error);\n          }\n        };\n        \n        fetchDriverBus();\n      }\n    } catch (error) {\n      console.error('Error auto-clearing stop:', error);\n    }\n  };\n  \n  // Find indices for last cleared stop and next stop\n  const getStopIndices = () => {\n    if (!busInfo || !busInfo.route || busInfo.route.length === 0) {\n      return { lastClearedStopIndex: null, nextStopIndex: null };\n    }\n    \n    const stops = busInfo.route;\n    const stopsCleared = busInfo.stopsCleared || 0;\n    \n    // If stopsCleared is 0, the last cleared stop is the last one in the route (circular)\n    // and the next stop is the first in the route\n    if (stopsCleared === 0) {\n      return {\n        lastClearedStopIndex: stops.length - 1,\n        nextStopIndex: 0\n      };\n    }\n    \n    // Normalize stopsCleared to be within the route length (for circular routes)\n    const normalizedStopsCleared = stopsCleared % stops.length;\n    \n    return {\n      lastClearedStopIndex: normalizedStopsCleared - 1,\n      nextStopIndex: normalizedStopsCleared % stops.length\n    };\n  };\n  \n  const { lastClearedStopIndex, nextStopIndex } = getStopIndices();  \n  \n  // If still loading, show a spinner\n  if (loading) {\n    return (\n      <div className=\"driver-map-loading\">\n        <div className=\"spinner\"></div>\n        <p>Loading your bus information...</p>\n      </div>\n    );\n  }\n  \n  // If there's an error, show error message\n  if (error) {\n    return (\n      <div className=\"driver-map-error\">\n        <h2>Error</h2>\n        <p>{error}</p>\n        <button onClick={() => window.location.reload()}>Retry</button>\n      </div>\n    );\n  }\n  \n  // If no bus assigned, show message\n  if (!busInfo || !busInfo.bus) {\n    return (\n      <div className=\"driver-map-error\">\n        <h2>No Bus Assigned</h2>\n        <p>You do not have a bus assigned to you. Please contact an administrator.</p>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"driver-map-screen\">\n      <div className=\"driver-map-container\">\n        <MapContainer\n          center={center || [22.3190, 87.3091]} // Default to IIT KGP if no position yet\n          zoom={15}\n          className=\"driver-map\"\n          ref={mapRef}\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          \n          {/* Map controller to center map */}\n          <MapController center={center} zoom={15} />\n          \n          {/* Driver location tracker */}\n          <DriverLocationTracker setPosition={setPosition} />\n          \n          {/* Location updater component */}\n          {position && busInfo && (\n            <LocationUpdater\n              driverId={localStorage.getItem('userId')}\n              busId={busInfo.bus.id}\n              position={position}\n            />\n          )}\n          \n          {/* Proximity detector for auto-clearing stops */}\n          {position && busInfo && busInfo.nextStop && (\n            <ProximityDetector\n              busId={busInfo.bus.id}\n              position={position}\n              nextStop={busInfo.nextStop}\n              onStopReached={handleStopReached}\n            />\n          )}\n          \n          {/* Driver marker */}\n          {position && (\n            <Marker position={position} icon={busIcon}>\n              <Popup>\n                <div className=\"driver-popup\">\n                  <strong>Your Location (Bus {busInfo.bus.name})</strong>\n                  <p>You are here.</p>\n                </div>\n              </Popup>\n            </Marker>\n          )}\n          \n          {/* Show all stops in the route */}\n          {busInfo && busInfo.route && busInfo.route.map((stop, index) => (\n            <Marker\n              key={stop.id}\n              position={[parseFloat(stop.latitude), parseFloat(stop.longitude)]}\n              icon={index === nextStopIndex ? nextStopIcon : busStopIcon}\n            >\n              <Popup>\n                <div className=\"stop-popup\">\n                  <strong>{stop.name}</strong>\n                  <p>Stop #{index + 1} in route</p>\n                  {index === nextStopIndex && (\n                    <p className=\"next-stop-label\">This is your next stop</p>\n                  )}\n                </div>\n              </Popup>\n            </Marker>\n          ))}\n          \n          {/* OSRM routes */}\n          {busInfo && busInfo.route && position && (\n            <OsrmRoutes\n              stops={busInfo.route}\n              currentPosition={position}\n              lastClearedStopIndex={lastClearedStopIndex}\n              nextStopIndex={nextStopIndex}\n            />\n          )}\n        </MapContainer>\n        \n        {/* Turn notification */}\n        {busInfo && busInfo.route && position && (\n          <TurnNotification\n            stops={busInfo.route}\n            currentPosition={position}\n            lastClearedStopIndex={lastClearedStopIndex}\n            nextStopIndex={nextStopIndex}\n          />\n        )}\n        \n        {/* Location button outside map - now always visible */}\n        <LocationButton \n          position={position} \n          setCenter={setCenter} \n          busInfo={busInfo} \n        />\n        \n        {/* Bus info panel */}\n        <div className=\"bus-info-panel\">\n          <h3>Bus: {busInfo.bus.name}</h3>\n          {busInfo.nextStop && (\n            <div className=\"next-stop-info\">\n              <p><strong>Next Stop:</strong> {busInfo.nextStop.name}</p>\n              <p><strong>Distance:</strong> <span id=\"next-stop-distance\">Calculating...</span></p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DriverMapScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}