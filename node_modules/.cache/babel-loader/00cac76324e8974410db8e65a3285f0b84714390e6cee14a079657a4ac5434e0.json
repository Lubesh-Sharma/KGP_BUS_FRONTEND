{"ast":null,"code":"var _jsxFileName = \"/home/lubesh/Desktop/DBMS/KGP_Bus/frontend/src/components/user_pages/BusStopSearch.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { GoogleMap, useJsApiLoader, Marker, InfoWindow, DirectionsRenderer } from '@react-google-maps/api';\nimport api from '../../utils/api';\nimport '../../css/user.css';\n\n// Default map container styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapContainerStyle = {\n  width: '100%',\n  height: '100%'\n};\n\n// Map options with default controls enabled\nconst defaultOptions = {\n  mapTypeControl: true,\n  streetViewControl: true,\n  fullscreenControl: true,\n  zoomControl: true,\n  myLocationButtonControl: true,\n  disableDefaultUI: false\n};\n\n// Component to handle routing between points using Google Directions API\nconst DirectionsService = ({\n  startPoint,\n  endPoint,\n  setDirections\n}) => {\n  _s();\n  useEffect(() => {\n    if (!startPoint || !endPoint) return;\n    const directionsService = new window.google.maps.DirectionsService();\n    directionsService.route({\n      origin: startPoint,\n      destination: endPoint,\n      travelMode: window.google.maps.TravelMode.WALKING\n    }, (result, status) => {\n      if (status === window.google.maps.DirectionsStatus.OK) {\n        setDirections(result);\n      } else {\n        console.error(`Directions request failed: ${status}`);\n      }\n    });\n    return () => {\n      setDirections(null);\n    };\n  }, [startPoint, endPoint, setDirections]);\n  return null;\n};\n_s(DirectionsService, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = DirectionsService;\nconst BusStopSearch = ({\n  userLocation,\n  setUserLocation\n}) => {\n  _s2();\n  // Load the Google Maps JS API\n  const {\n    isLoaded,\n    loadError\n  } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n    libraries: ['places']\n  });\n  const [busStops, setBusStops] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [mapCenter, setMapCenter] = useState(userLocation ? {\n    lat: userLocation[0],\n    lng: userLocation[1]\n  } : {\n    lat: 22.3190,\n    lng: 87.3091\n  });\n  const [zoom, setZoom] = useState(15);\n  const [coordinates, setCoordinates] = useState({\n    latitude: userLocation ? userLocation[0].toFixed(6) : '22.3190',\n    longitude: userLocation ? userLocation[1].toFixed(6) : '87.3091'\n  });\n\n  // Always initialize the red marker with user location or default\n  const [searchMarker, setSearchMarker] = useState(userLocation ? {\n    lat: userLocation[0],\n    lng: userLocation[1]\n  } : {\n    lat: 22.3190,\n    lng: 87.3091\n  });\n  const [searchResults, setSearchResults] = useState([]);\n  const [hasSearched, setHasSearched] = useState(false);\n  const [selectedStop, setSelectedStop] = useState(null);\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  const [busStopToRedMarkerDirections, setBusStopToRedMarkerDirections] = useState(null);\n  const mapRef = useRef(null);\n\n  // Initialize coordinates with user's location as soon as it's available\n  useEffect(() => {\n    if (userLocation) {\n      setCoordinates({\n        latitude: userLocation[0].toFixed(6),\n        longitude: userLocation[1].toFixed(6)\n      });\n      setMapCenter({\n        lat: userLocation[0],\n        lng: userLocation[1]\n      });\n      setSearchMarker({\n        lat: userLocation[0],\n        lng: userLocation[1]\n      });\n    }\n  }, [userLocation]);\n\n  // Function to fetch bus stops\n  const fetchBusStops = async () => {\n    try {\n      console.log('Fetching bus stops from API');\n      const response = await api.get('/bus_stops/getAllBusStops');\n      console.log('Raw API response:', response.data);\n      if (response.data && response.data.data) {\n        return response.data.data;\n      } else {\n        console.error('Invalid response format:', response.data);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching bus stops from database:', error);\n      throw error;\n    }\n  };\n\n  // Load bus stops on component mount\n  useEffect(() => {\n    const loadBusStops = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchBusStops();\n        const busStopsArray = Array.isArray(data) ? data : [];\n        const cleanedData = busStopsArray.map(stop => ({\n          ...stop,\n          latitude: parseFloat(stop.latitude),\n          longitude: parseFloat(stop.longitude)\n        }));\n        setBusStops(cleanedData);\n        setError(null);\n      } catch (err) {\n        console.error(\"Error loading bus stops:\", err);\n        setError(\"Failed to load bus stops. Please try again later.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadBusStops();\n  }, []);\n\n  // Handle form input changes\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCoordinates(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Center map on user location with maximum zoom\n  const handleCenterOnUser = () => {\n    if (userLocation) {\n      setMapCenter({\n        lat: userLocation[0],\n        lng: userLocation[1]\n      });\n      setZoom(19);\n      setCoordinates({\n        latitude: userLocation[0].toFixed(6),\n        longitude: userLocation[1].toFixed(6)\n      });\n    }\n  };\n\n  // Function to search for nearby bus stops\n  const handleSearch = () => {\n    try {\n      const lat = parseFloat(coordinates.latitude);\n      const lng = parseFloat(coordinates.longitude);\n      if (isNaN(lat) || isNaN(lng) || lat < -90 || lat > 90 || lng < -180 || lng > 180) {\n        setError(\"Please enter valid coordinates\");\n        return;\n      }\n      setError(null);\n      setSearchMarker({\n        lat,\n        lng\n      });\n\n      // Clear any existing directions when performing a new search\n      setBusStopToRedMarkerDirections(null);\n      setSelectedStop(null); // Also clear the selected stop\n\n      const results = busStops.map(stop => {\n        const distance = calculateDistance(lat, lng, stop.latitude, stop.longitude);\n        return {\n          ...stop,\n          distance: distance\n        };\n      });\n      const sortedResults = [...results].sort((a, b) => a.distance - b.distance);\n      setSearchResults(sortedResults);\n      setHasSearched(true);\n      setMapCenter({\n        lat,\n        lng\n      });\n      setZoom(16);\n    } catch (error) {\n      console.error(\"Search error:\", error);\n      setError(\"An error occurred during search\");\n    }\n  };\n\n  // Handle click on search result item\n  const handleStopSelect = stop => {\n    // First clear any previous routes\n    setBusStopToRedMarkerDirections(null);\n\n    // Set the selected stop and update UI\n    setSelectedStop(stop);\n    setSelectedMarker(stop.id);\n    setMapCenter({\n      lat: stop.latitude,\n      lng: stop.longitude\n    });\n    setZoom(18);\n\n    // Now calculate the new route from this stop to the red marker\n    if (searchMarker) {\n      const directionsService = new window.google.maps.DirectionsService();\n      directionsService.route({\n        origin: {\n          lat: stop.latitude,\n          lng: stop.longitude\n        },\n        destination: searchMarker,\n        travelMode: window.google.maps.TravelMode.WALKING\n      }, (result, status) => {\n        if (status === window.google.maps.DirectionsStatus.OK) {\n          // Only set directions if we still have the same selected stop\n          // to avoid race conditions with multiple requests\n          if (selectedStop && selectedStop.id === stop.id) {\n            setBusStopToRedMarkerDirections(result);\n          }\n        } else {\n          console.error(`Directions request failed: ${status}`);\n        }\n      });\n    }\n  };\n\n  // Calculate distance between two coordinates using Haversine formula\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371e3;\n    const φ1 = lat1 * Math.PI / 180;\n    const φ2 = lat2 * Math.PI / 180;\n    const Δφ = (lat2 - lat1) * Math.PI / 180;\n    const Δλ = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  };\n\n  // Format distance for display\n  const formatDistance = meters => {\n    if (meters < 1000) {\n      return `${Math.round(meters)} meters`;\n    } else {\n      return `${(meters / 1000).toFixed(2)} km`;\n    }\n  };\n\n  // Handle map click to set coordinates\n  const onMapClick = useCallback(e => {\n    const lat = e.latLng.lat();\n    const lng = e.latLng.lng();\n\n    // Update coordinates input fields\n    setCoordinates({\n      latitude: lat.toFixed(6),\n      longitude: lng.toFixed(6)\n    });\n\n    // Update red marker position\n    setSearchMarker({\n      lat,\n      lng\n    });\n\n    // Clear any existing directions and selections when clicking a new location\n    setBusStopToRedMarkerDirections(null);\n    setSelectedStop(null);\n    setSelectedMarker(null);\n  }, []);\n\n  // Store map instance when it loads\n  const onLoad = useCallback(map => {\n    mapRef.current = map;\n  }, []);\n\n  // Clean up function when component unmounts\n  const onUnmount = useCallback(() => {\n    mapRef.current = null;\n  }, []);\n  if (loadError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [\"Error loading Google Maps: \", loadError.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 12\n    }, this);\n  }\n  if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-message\",\n      children: \"Loading Google Maps...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bus-stop-search\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-panel-top\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Search Bus Stops\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"latitude\",\n              children: \"Latitude:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"latitude\",\n              name: \"latitude\",\n              value: coordinates.latitude,\n              onChange: handleInputChange,\n              placeholder: \"e.g. 22.3190\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"longitude\",\n              children: \"Longitude:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"longitude\",\n              name: \"longitude\",\n              value: coordinates.longitude,\n              onChange: handleInputChange,\n              placeholder: \"e.g. 87.3091\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"help-text\",\n            children: \"Click on the map to set coordinates or use your current location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"search-btn\",\n            onClick: handleSearch,\n            disabled: loading,\n            children: loading ? 'Loading...' : 'Find Nearest Bus Stops'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-panel-bottom\",\n        children: [hasSearched && searchResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-results\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Nearest Bus Stops\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"results-list\",\n            children: searchResults.map((stop, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-item\",\n              onClick: () => handleStopSelect(stop),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"result-index\",\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"result-details\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: stop.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"distance\",\n                  children: [\"Distance: \", formatDistance(stop.distance)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 365,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"coordinates\",\n                  children: [stop.latitude.toFixed(6), \", \", stop.longitude.toFixed(6)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 21\n              }, this)]\n            }, stop.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this), hasSearched && searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-results\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No bus stops found near the selected location.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        center: mapCenter,\n        zoom: zoom,\n        options: defaultOptions,\n        onClick: onMapClick,\n        onLoad: onLoad,\n        onUnmount: onUnmount,\n        children: [userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: userLocation[0],\n            lng: userLocation[1]\n          },\n          icon: {\n            url: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png',\n            scaledSize: new window.google.maps.Size(32, 32),\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(16, 32)\n          },\n          onClick: () => {\n            setSelectedMarker('user');\n            // Clear any route when clicking user marker\n            setBusStopToRedMarkerDirections(null);\n            setSelectedStop(null);\n          },\n          children: selectedMarker === 'user' && /*#__PURE__*/_jsxDEV(InfoWindow, {\n            onCloseClick: () => setSelectedMarker(null),\n            options: {\n              pixelOffset: new window.google.maps.Size(0, -32)\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Your Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 51\n              }, this), userLocation[0].toFixed(6), \", \", userLocation[1].toFixed(6)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: searchMarker,\n          icon: {\n            url: 'https://maps.google.com/mapfiles/ms/icons/red-dot.png',\n            scaledSize: new window.google.maps.Size(32, 32),\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(16, 32)\n          },\n          onClick: () => {\n            setSelectedMarker('search');\n            // Clear any route when clicking search marker\n            setBusStopToRedMarkerDirections(null);\n            setSelectedStop(null);\n          },\n          children: selectedMarker === 'search' && /*#__PURE__*/_jsxDEV(InfoWindow, {\n            onCloseClick: () => setSelectedMarker(null),\n            options: {\n              pixelOffset: new window.google.maps.Size(0, -32)\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Clicked Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 52\n              }, this), searchMarker.lat.toFixed(6), \", \", searchMarker.lng.toFixed(6)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this), busStops.map(stop => /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: stop.latitude,\n            lng: stop.longitude\n          },\n          icon: {\n            url: 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png',\n            scaledSize: new window.google.maps.Size(32, 32),\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(16, 32)\n          },\n          onClick: () => {\n            // Clear any previous selection first\n            setSelectedMarker(null);\n\n            // Then select this bus stop and show its path\n            setTimeout(() => {\n              setSelectedMarker(stop.id);\n              handleStopSelect(stop);\n            }, 10);\n          },\n          children: selectedMarker === stop.id && /*#__PURE__*/_jsxDEV(InfoWindow, {\n            onCloseClick: () => setSelectedMarker(null),\n            options: {\n              pixelOffset: new window.google.maps.Size(0, -32)\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: stop.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 49\n              }, this), searchMarker && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Distance: \", formatDistance(calculateDistance(searchMarker.lat, searchMarker.lng, stop.latitude, stop.longitude))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 17\n          }, this)\n        }, stop.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 13\n        }, this)), selectedStop && busStopToRedMarkerDirections && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n          directions: busStopToRedMarkerDirections,\n          options: {\n            suppressMarkers: true,\n            // Don't show default markers\n            polylineOptions: {\n              strokeColor: '#FF69B4',\n              // Pink color for the path\n              strokeWeight: 4,\n              strokeOpacity: 0.7\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 5\n  }, this);\n};\n_s2(BusStopSearch, \"rCCsbfExfCA5n1mY5w5ebRVRXG0=\", false, function () {\n  return [useJsApiLoader];\n});\n_c2 = BusStopSearch;\nexport default BusStopSearch;\nvar _c, _c2;\n$RefreshReg$(_c, \"DirectionsService\");\n$RefreshReg$(_c2, \"BusStopSearch\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","GoogleMap","useJsApiLoader","Marker","InfoWindow","DirectionsRenderer","api","jsxDEV","_jsxDEV","mapContainerStyle","width","height","defaultOptions","mapTypeControl","streetViewControl","fullscreenControl","zoomControl","myLocationButtonControl","disableDefaultUI","DirectionsService","startPoint","endPoint","setDirections","_s","directionsService","window","google","maps","route","origin","destination","travelMode","TravelMode","WALKING","result","status","DirectionsStatus","OK","console","error","_c","BusStopSearch","userLocation","setUserLocation","_s2","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_API_KEY","libraries","busStops","setBusStops","loading","setLoading","setError","mapCenter","setMapCenter","lat","lng","zoom","setZoom","coordinates","setCoordinates","latitude","toFixed","longitude","searchMarker","setSearchMarker","searchResults","setSearchResults","hasSearched","setHasSearched","selectedStop","setSelectedStop","selectedMarker","setSelectedMarker","busStopToRedMarkerDirections","setBusStopToRedMarkerDirections","mapRef","fetchBusStops","log","response","get","data","loadBusStops","busStopsArray","Array","isArray","cleanedData","map","stop","parseFloat","err","handleInputChange","e","name","value","target","prev","handleCenterOnUser","handleSearch","isNaN","results","distance","calculateDistance","sortedResults","sort","a","b","handleStopSelect","id","lat1","lon1","lat2","lon2","R","φ1","Math","PI","φ2","Δφ","Δλ","sin","cos","c","atan2","sqrt","formatDistance","meters","round","onMapClick","latLng","onLoad","current","onUnmount","className","children","message","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","onChange","placeholder","onClick","disabled","length","index","center","options","position","icon","url","scaledSize","Size","Point","anchor","onCloseClick","pixelOffset","setTimeout","directions","suppressMarkers","polylineOptions","strokeColor","strokeWeight","strokeOpacity","_c2","$RefreshReg$"],"sources":["/home/lubesh/Desktop/DBMS/KGP_Bus/frontend/src/components/user_pages/BusStopSearch.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { GoogleMap, useJsApiLoader, Marker, InfoWindow, DirectionsRenderer } from '@react-google-maps/api';\nimport api from '../../utils/api';\nimport '../../css/user.css';\n\n// Default map container styles\nconst mapContainerStyle = {\n  width: '100%',\n  height: '100%'\n};\n\n// Map options with default controls enabled\nconst defaultOptions = {\n  mapTypeControl: true,\n  streetViewControl: true,\n  fullscreenControl: true,\n  zoomControl: true,\n  myLocationButtonControl: true,\n  disableDefaultUI: false,\n};\n\n// Component to handle routing between points using Google Directions API\nconst DirectionsService = ({ startPoint, endPoint, setDirections }) => {\n  useEffect(() => {\n    if (!startPoint || !endPoint) return;\n\n    const directionsService = new window.google.maps.DirectionsService();\n\n    directionsService.route(\n      {\n        origin: startPoint,\n        destination: endPoint,\n        travelMode: window.google.maps.TravelMode.WALKING,\n      },\n      (result, status) => {\n        if (status === window.google.maps.DirectionsStatus.OK) {\n          setDirections(result);\n        } else {\n          console.error(`Directions request failed: ${status}`);\n        }\n      }\n    );\n\n    return () => {\n      setDirections(null);\n    };\n  }, [startPoint, endPoint, setDirections]);\n\n  return null;\n};\n\nconst BusStopSearch = ({ userLocation, setUserLocation }) => {\n  // Load the Google Maps JS API\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n    libraries: ['places'],\n  });\n\n  const [busStops, setBusStops] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [mapCenter, setMapCenter] = useState(\n    userLocation ? { lat: userLocation[0], lng: userLocation[1] } : { lat: 22.3190, lng: 87.3091 }\n  );\n  const [zoom, setZoom] = useState(15);\n  const [coordinates, setCoordinates] = useState({\n    latitude: userLocation ? userLocation[0].toFixed(6) : '22.3190',\n    longitude: userLocation ? userLocation[1].toFixed(6) : '87.3091',\n  });\n  \n  // Always initialize the red marker with user location or default\n  const [searchMarker, setSearchMarker] = useState(\n    userLocation ? { lat: userLocation[0], lng: userLocation[1] } : { lat: 22.3190, lng: 87.3091 }\n  );\n  \n  const [searchResults, setSearchResults] = useState([]);\n  const [hasSearched, setHasSearched] = useState(false);\n  const [selectedStop, setSelectedStop] = useState(null);\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  const [busStopToRedMarkerDirections, setBusStopToRedMarkerDirections] = useState(null);\n\n  const mapRef = useRef(null);\n  \n  // Initialize coordinates with user's location as soon as it's available\n  useEffect(() => {\n    if (userLocation) {\n      setCoordinates({\n        latitude: userLocation[0].toFixed(6),\n        longitude: userLocation[1].toFixed(6)\n      });\n      setMapCenter({ lat: userLocation[0], lng: userLocation[1] });\n      setSearchMarker({ lat: userLocation[0], lng: userLocation[1] });\n    }\n  }, [userLocation]);\n  \n  // Function to fetch bus stops\n  const fetchBusStops = async () => {\n    try {\n      console.log('Fetching bus stops from API');\n      const response = await api.get('/bus_stops/getAllBusStops');\n      console.log('Raw API response:', response.data);\n      \n      if (response.data && response.data.data) {\n        return response.data.data;\n      } else {\n        console.error('Invalid response format:', response.data);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching bus stops from database:', error);\n      throw error;\n    }\n  };\n  \n  // Load bus stops on component mount\n  useEffect(() => {\n    const loadBusStops = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchBusStops();\n        \n        const busStopsArray = Array.isArray(data) ? data : [];\n        \n        const cleanedData = busStopsArray.map(stop => ({\n          ...stop,\n          latitude: parseFloat(stop.latitude),\n          longitude: parseFloat(stop.longitude)\n        }));\n        \n        setBusStops(cleanedData);\n        setError(null);\n      } catch (err) {\n        console.error(\"Error loading bus stops:\", err);\n        setError(\"Failed to load bus stops. Please try again later.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadBusStops();\n  }, []);\n  \n  // Handle form input changes\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setCoordinates(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  // Center map on user location with maximum zoom\n  const handleCenterOnUser = () => {\n    if (userLocation) {\n      setMapCenter({ lat: userLocation[0], lng: userLocation[1] });\n      setZoom(19);\n      setCoordinates({\n        latitude: userLocation[0].toFixed(6),\n        longitude: userLocation[1].toFixed(6)\n      });\n    }\n  };\n  \n  // Function to search for nearby bus stops\n  const handleSearch = () => {\n    try {\n      const lat = parseFloat(coordinates.latitude);\n      const lng = parseFloat(coordinates.longitude);\n      \n      if (isNaN(lat) || isNaN(lng) || \n          lat < -90 || lat > 90 || \n          lng < -180 || lng > 180) {\n        setError(\"Please enter valid coordinates\");\n        return;\n      }\n      \n      setError(null);\n      setSearchMarker({ lat, lng });\n      \n      // Clear any existing directions when performing a new search\n      setBusStopToRedMarkerDirections(null);\n      setSelectedStop(null); // Also clear the selected stop\n      \n      const results = busStops.map(stop => {\n        const distance = calculateDistance(\n          lat, lng,\n          stop.latitude, stop.longitude\n        );\n        \n        return {\n          ...stop,\n          distance: distance\n        };\n      });\n      \n      const sortedResults = [...results].sort((a, b) => a.distance - b.distance);\n      setSearchResults(sortedResults);\n      setHasSearched(true);\n      \n      setMapCenter({ lat, lng });\n      setZoom(16);\n    } catch (error) {\n      console.error(\"Search error:\", error);\n      setError(\"An error occurred during search\");\n    }\n  };\n  \n  // Handle click on search result item\n  const handleStopSelect = (stop) => {\n    // First clear any previous routes\n    setBusStopToRedMarkerDirections(null);\n    \n    // Set the selected stop and update UI\n    setSelectedStop(stop);\n    setSelectedMarker(stop.id);\n    setMapCenter({ lat: stop.latitude, lng: stop.longitude });\n    setZoom(18);\n\n    // Now calculate the new route from this stop to the red marker\n    if (searchMarker) {\n      const directionsService = new window.google.maps.DirectionsService();\n      \n      directionsService.route(\n        {\n          origin: { lat: stop.latitude, lng: stop.longitude },\n          destination: searchMarker,\n          travelMode: window.google.maps.TravelMode.WALKING,\n        },\n        (result, status) => {\n          if (status === window.google.maps.DirectionsStatus.OK) {\n            // Only set directions if we still have the same selected stop\n            // to avoid race conditions with multiple requests\n            if (selectedStop && selectedStop.id === stop.id) {\n              setBusStopToRedMarkerDirections(result);\n            }\n          } else {\n            console.error(`Directions request failed: ${status}`);\n          }\n        }\n      );\n    }\n  };\n  \n  // Calculate distance between two coordinates using Haversine formula\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371e3;\n    const φ1 = lat1 * Math.PI / 180;\n    const φ2 = lat2 * Math.PI / 180;\n    const Δφ = (lat2 - lat1) * Math.PI / 180;\n    const Δλ = (lon2 - lon1) * Math.PI / 180;\n    \n    const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\n            Math.cos(φ1) * Math.cos(φ2) *\n            Math.sin(Δλ/2) * Math.sin(Δλ/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    \n    return R * c;\n  };\n  \n  // Format distance for display\n  const formatDistance = (meters) => {\n    if (meters < 1000) {\n      return `${Math.round(meters)} meters`;\n    } else {\n      return `${(meters / 1000).toFixed(2)} km`;\n    }\n  };\n\n  // Handle map click to set coordinates\n  const onMapClick = useCallback((e) => {\n    const lat = e.latLng.lat();\n    const lng = e.latLng.lng();\n    \n    // Update coordinates input fields\n    setCoordinates({\n      latitude: lat.toFixed(6),\n      longitude: lng.toFixed(6)\n    });\n    \n    // Update red marker position\n    setSearchMarker({ lat, lng });\n    \n    // Clear any existing directions and selections when clicking a new location\n    setBusStopToRedMarkerDirections(null);\n    setSelectedStop(null);\n    setSelectedMarker(null);\n  }, []);\n\n  // Store map instance when it loads\n  const onLoad = useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  // Clean up function when component unmounts\n  const onUnmount = useCallback(() => {\n    mapRef.current = null;\n  }, []);\n\n  if (loadError) {\n    return <div className=\"error-message\">Error loading Google Maps: {loadError.message}</div>;\n  }\n\n  if (!isLoaded) {\n    return <div className=\"loading-message\">Loading Google Maps...</div>;\n  }\n  \n  return (\n    <div className=\"bus-stop-search\">\n      <div className=\"location-panel\">\n        <div className=\"location-panel-top\">\n          <h2>Search Bus Stops</h2>\n          {error && <div className=\"error-message\">{error}</div>}\n          \n          <div className=\"search-form\">\n            <div className=\"form-group\">\n              <label htmlFor=\"latitude\">Latitude:</label>\n              <input \n                type=\"text\" \n                id=\"latitude\" \n                name=\"latitude\" \n                value={coordinates.latitude} \n                onChange={handleInputChange} \n                placeholder=\"e.g. 22.3190\"\n              />\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"longitude\">Longitude:</label>\n              <input \n                type=\"text\" \n                id=\"longitude\" \n                name=\"longitude\" \n                value={coordinates.longitude} \n                onChange={handleInputChange} \n                placeholder=\"e.g. 87.3091\"\n              />\n            </div>\n            \n            <p className=\"help-text\">Click on the map to set coordinates or use your current location</p>\n            \n            <button \n              className=\"search-btn\"\n              onClick={handleSearch}\n              disabled={loading}\n            >\n              {loading ? 'Loading...' : 'Find Nearest Bus Stops'}\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"location-panel-bottom\">\n          {hasSearched && searchResults.length > 0 && (\n            <div className=\"search-results\">\n              <h3>Nearest Bus Stops</h3>\n              <div className=\"results-list\">\n                {searchResults.map((stop, index) => (\n                  <div \n                    key={stop.id} \n                    className=\"result-item\"\n                    onClick={() => handleStopSelect(stop)}\n                  >\n                    <div className=\"result-index\">{index + 1}</div>\n                    <div className=\"result-details\">\n                      <h4>{stop.name}</h4>\n                      <p className=\"distance\">Distance: {formatDistance(stop.distance)}</p>\n                      <p className=\"coordinates\">\n                        {stop.latitude.toFixed(6)}, {stop.longitude.toFixed(6)}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          {hasSearched && searchResults.length === 0 && (\n            <div className=\"no-results\">\n              <p>No bus stops found near the selected location.</p>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"map-container\">\n        <GoogleMap\n          mapContainerStyle={mapContainerStyle}\n          center={mapCenter}\n          zoom={zoom}\n          options={defaultOptions}\n          onClick={onMapClick}\n          onLoad={onLoad}\n          onUnmount={onUnmount}\n        >\n          {/* Display user location */}\n          {userLocation && (\n            <Marker\n              position={{ lat: userLocation[0], lng: userLocation[1] }}\n              icon={{\n                url: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png',\n                scaledSize: new window.google.maps.Size(32, 32),\n                origin: new window.google.maps.Point(0, 0),\n                anchor: new window.google.maps.Point(16, 32),\n              }}\n              onClick={() => {\n                setSelectedMarker('user');\n                // Clear any route when clicking user marker\n                setBusStopToRedMarkerDirections(null);\n                setSelectedStop(null);\n              }}\n            >\n              {selectedMarker === 'user' && (\n                <InfoWindow \n                  onCloseClick={() => setSelectedMarker(null)}\n                  options={{ pixelOffset: new window.google.maps.Size(0, -32) }}\n                >\n                  <div>\n                    <strong>Your Location</strong><br />\n                    {userLocation[0].toFixed(6)}, {userLocation[1].toFixed(6)}\n                  </div>\n                </InfoWindow>\n              )}\n            </Marker>\n          )}\n          \n          {/* Always display search marker (red pin) */}\n          <Marker\n            position={searchMarker}\n            icon={{\n              url: 'https://maps.google.com/mapfiles/ms/icons/red-dot.png',\n              scaledSize: new window.google.maps.Size(32, 32),\n              origin: new window.google.maps.Point(0, 0),\n              anchor: new window.google.maps.Point(16, 32),\n            }}\n            onClick={() => {\n              setSelectedMarker('search');\n              // Clear any route when clicking search marker\n              setBusStopToRedMarkerDirections(null);\n              setSelectedStop(null);\n            }}\n          >\n            {selectedMarker === 'search' && (\n              <InfoWindow \n                onCloseClick={() => setSelectedMarker(null)}\n                options={{ pixelOffset: new window.google.maps.Size(0, -32) }}\n              >\n                <div>\n                  <strong>Clicked Location</strong><br />\n                  {searchMarker.lat.toFixed(6)}, {searchMarker.lng.toFixed(6)}\n                </div>\n              </InfoWindow>\n            )}\n          </Marker>\n          \n          {/* Display all bus stops */}\n          {busStops.map(stop => (\n            <Marker\n              key={stop.id}\n              position={{ lat: stop.latitude, lng: stop.longitude }}\n              icon={{\n                url: 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png',\n                scaledSize: new window.google.maps.Size(32, 32),\n                origin: new window.google.maps.Point(0, 0),\n                anchor: new window.google.maps.Point(16, 32),\n              }}\n              onClick={() => {\n                // Clear any previous selection first\n                setSelectedMarker(null);\n                \n                // Then select this bus stop and show its path\n                setTimeout(() => {\n                  setSelectedMarker(stop.id);\n                  handleStopSelect(stop);\n                }, 10);\n              }}\n            >\n              {selectedMarker === stop.id && (\n                <InfoWindow \n                  onCloseClick={() => setSelectedMarker(null)}\n                  options={{ pixelOffset: new window.google.maps.Size(0, -32) }}\n                >\n                  <div>\n                    <strong>{stop.name}</strong><br />\n                    {searchMarker && (\n                      <span>\n                        Distance: {formatDistance(\n                          calculateDistance(\n                            searchMarker.lat, searchMarker.lng,\n                            stop.latitude, stop.longitude\n                          )\n                        )}\n                      </span>\n                    )}\n                  </div>\n                </InfoWindow>\n              )}\n            </Marker>\n          ))}\n          \n          {/* Only render the route if we have a selected stop and directions */}\n          {selectedStop && busStopToRedMarkerDirections && (\n            <DirectionsRenderer\n              directions={busStopToRedMarkerDirections}\n              options={{\n                suppressMarkers: true, // Don't show default markers\n                polylineOptions: {\n                  strokeColor: '#FF69B4', // Pink color for the path\n                  strokeWeight: 4,\n                  strokeOpacity: 0.7,\n                }\n              }}\n            />\n          )}\n        </GoogleMap>\n      </div>\n    </div>\n  );\n};\n\nexport default BusStopSearch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}